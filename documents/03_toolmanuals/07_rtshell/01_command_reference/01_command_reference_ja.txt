// Title: rtshellコマンド・リファレンス
** 概要
コマンドの多くは、ネームサーバで動作しているコンポーネントとマネージャーをファイルシステムのように扱えるようにしてあります。ディレクトリに入ったり、コンポーネントをcatのようにで読んだり、アクティブさせたり、ポートを接続させたりすることができます。ほかのコマンドはRTシステムを管理するためのRTSProfileファイルに関連して使用されます。

** コマンド
|LEFT:15|LEFT:80|c
|コマンド名|概要|
|rtact|RTコンポーネントをアクティブ化します。|
|rtcat|RTコンポーネントのメタデータを表示します。|
|rtcheck|起動中のRTシステムを保存されたRTSProfileと比べる。|
|rtcomp|コンポジットコンポーネントを作る。|
|rtcon|ポートを接続する。|
|rtconf|コンポーネントのコンフィグレーションを編集する。|
|rtcryo|起動中のRTシステムをRTSProfileファイルに保存する。|
|rtcwd|現在のワーキングダイレクトリを変更する。|
|rtdeact|コンポーネントをディアクティブにする。|
|rtdel|ネームサーバからオブジェクトを消す。|
|rtdis|ポートの接続を削除する。|
|rtdoc|RTコンポーネントのドキュメンテーションを表示する。|
|rtexit|RTコンポーネントを停止する。|
|rtfind|起動中のRTコンポーネントやマネージャ等を探す。|
|rtinject|ポートにデータを送る。|
|rtlog|ポートが送るデータをログに保存して再生する。|
|rtls|ダイレクトリのオブジェクトをリストする。|
|rtmgr|マネジャーでRTコンポーネントを管理する。|
|rtprint|ポートが送るデータをターミナルに表示する。|
|rtpwd|現在のワーキングダイレクトリを表示する。|
|rtreset|RTコンポーネントをリセットする。|
|rtresurrect|RTSProfileファイルに保存されたRTシステムを復元する。|
|rtstart|RTシステムを起動する。|
|rtstodot|起動中のRTシステムをグラフで表示する。|
|rtstop|RTシステムを停止する。|
|rtteardown|RTシステムを削除する。|


** RTCツリー

すべてのコマンドはRTCツリー上で起動します。RTCツリーとは、ネームサーバ上のコンテキスト、コンポーネント、マネージャ等をファイルシステムに見立てて扱うことができる仕組みです。通常のファイルシステムと同じように扱うことができます。

ネームサーバはルートディレクトリ"/"直下のサブディレクトリとして扱われます。その下にはファイルやサブディレクトリが存在します。サブディレクトリはネームサーバ上のネーミングコンテクストに対応します。ファイルはコンポーネントとマネージャーに対応します。

ツリーを構築するためのネームサーバを与える方法は2通りあります。一つはrtshellコマンドに渡したネームサーバへの相対パスです。これはカレント作業ディレクトリからの相対パスとなります。また絶対パス指定して場合はルート直下のディレクトリがネームサーバがあるホスト名(IPアドレスの場合もあり)となります。

もう一つはRTCTREE_NAMESERVERS環境変数です。ネームサーバアドレスをセミコロンで区切り、リストを渡すこともできます。複数のネームサーバがあるホストを指定した場合はそれぞれのホストがルート直下に見えるようになります。

//動かないようなのでコメントアウト
** シェルコンプリーション
//Bash（バッシュ）シェルの使う方はrtshellに含めているコンプリーションスクリプトによってrtshellのコマンドをもっと使いやすくできます。スクリプトは${prefix}/share/rtshellにインストールされます。以下のコマンドでロードしてください:
// $ source bash_completion
//以上のコマンドを~/.bashrcというファイルに保存したら自動的にロードされます。
//
//コンプリーションの例:
// $ rtcwd [TAB]
// $ rtcwd localhost/
// $ rtcwd localhost/[TAB]
// $ rtcwd localhost/kenroke.host_cxt/
// $ rtcwd localhost/kenroke.host_cxt/[TAB][TAB]
// ConsoleIn0.rtc  ConfigSample0.rtc  manager.mgr  Sensor0.rtc
// $ rtcwd localhost/kenroke.host_cxt/[ENTER]
// $ rtconf ConfigSample0.rtc set [TAB]
// double_param0  double_param1  int_param0     int_param1     str_param0
// str_param1     vector_param0
// $ rtcon Sensor0.rtc:[TAB]
// in   out

** システムの要件
- rtshellはrtctree 3.0が必要です。インストールされていない場合はコマンドは起動しません。
- RTSProfileを使うコマンドはrtsprofile 2.0が必要です。インストールされていない場合はこのコマンドは起動しません。
- rtshellはPython 2.6が必要です。Python 3.0はまだテストされていないので動かない可能性はあります。
- rtinject 、rtlog及びrtprintはOpenRTM-pythonが必要です。

** パス
rtshell はパスでRTCツリーのオブジェクトを示します。ネームサーバとネームコンテクストはディレクトリ名として指定され、マネージャとRTコンポーネントはファイル名として指定されます。コマンドに渡したパスはrtshellのカレント作業ディレクトリを元に指定されます。(相対パスの場合)。rtshellのカレント作業ディレクトリはRTCSH_CWDという環境変数に保存されて、rtcwdというコマンドで変更することができます。(現時点でrtcwdコマンドはLinux環境では動作していません)

利用できるパスはコマンド実行時に参照しているネームサーバによって変わります。ネームサーバが実行されているホスト名はRTCTREE_NAMESERVERSという環境変数で指定することができます。また、直接ルート直下のパスとして/<ホスト名>/.... のような形でネームサーバが実行されているホストを指定することもできます。

例えば、/localhost/comp0.rtcはlocalhostにあるネームサーバに登録されたcomp0.rtcというRTコンポーネントを示します。/localhost/manager/comp0.rtcはlocalhostにあるネームサーバの下のmanagerというディレクトリに登録されたcomp0.rtcというRTコンポーネントを示します。./comp0.rtcはカレント作業ディレクトリにあるcomp0.rtcというRTコンポーネントを示します。

RTコンポーネントのポートを示す場合、パスの後にコロン（「:」）で区切って指定します。例えば、/localhost/comp0.rtc:dataはcomp0.rtcというRTコンポーネントのdataというポートを意味します。

新しいポートを作れるコマンドもあり、この場合、オプションでそれらをパスに追加することができます。使えるオプションは作られるポートの名前とフォーマッタです。指定方法は以下の通りです:

 <path>:<port>.<new_port_name>#<formatter>

*** 例:
 /localhost/blurg.host_cxt/comp0.rtc:input.stuff#a_printer

新たに作られるポートの名前はstuffで、データはa_printerという関数(フォーマッター)でターミナルに表示するように指定してます。(a_printerの関数はPythonが利用可能な場所に存在する必要があります。普通はユーザがモジュールで提供します。) 作られたポートはcomp0.rtcのinputというポートに接続されます。

<new_port_name>という部分は必須ではありません。指定しない場合は"."も指定しないでください。例:

 /localhost/blurg.host_cxt/comp0.rtc:input#a_printer

<formatter>という部分は必須ではありません。書いていない場合は"."も指定しないでください。例:

 /localhost/blurg.host_cxt/comp0.rtc:input.stuff

** 環境変数
:RTCTREE_ORB_ARGS|ORBを作る時に渡す変数です。セミコロンで区切ります。必須ではありません。
:RTCTREE_NAMESERVERS|RTCツリーを作る時に参照するネームサーバのアドレスです。アドレスをセミコロンで区切ります。リストされたアドレスはRTCツリーに追加されrtshellで参照できるようになります。ルート下のディレクトリ名としてパスで指定することもできるので必須ではありません。
:RTSH_CWD|rtshellの現在のワーキングディレクトリ。rtshellが自動的に設定します。設定しないでください。

一般的な利用ではユーザが設定する変数はRTCTREE_NAMESERVERSのみです。よく使うネームサーバを設定しておくと便利です。例えば、Bashシェルの場合、以下のコマンドはlocalhostとポート192.168.0.1:65346およびホストexample.comにあるネームサーバをrtshellが参照できるようにします。

 $ export RTCTREE_NAMESERVERS=localhost;192.168.0.1:65346;example.com


** 返り値
成功の場合はゼロを返します。失敗の場合はゼロではない値を返します。

デバグ情報とエラーはstderrに出力されます。
