// Title: SDO サービス編
// -*- pukiwiki-edit -*-
//* SDO サービス編

#contents

RTC には、サービスポート以外に、SDO サービスと呼ばれるサービスインターフェースを追加することができます。

SDO は Super Distributed Object の略であり、OMG で標準化された分散コンポーネントの規格一つです。
RTC の実態である RTObject は、実は SDO のオブジェクトを継承していて、RTC は SDO のオブジェクトの一種であると言えます。
SDO では、コンポーネントの基本的なインターフェースが定義されています。
SDO のコンポーネントが持つサービスインターフェースは、SDOService インターフェースと呼ばれ、インターフェース定義を継承することになっています。
実は、RTC のポートや実行コンテキストも SDOService を継承しており、SDO サービスの一種となっています。

サービスポートと SDO サービスの違いは何でしょうか？

どちらも、RTC の外側に対してサービスを提供 (Provided) したり、外部のサービスを利用 (Required) するものです。
大きな違いは、サービスポートは RTC の内部のロジック（RTC 開発者が実装するコアロジック）の詳細にアクセスするための（あるいは、コアロジックから外部のサービスにアクセスするための）インターフェースを提供するのに対して、SDO サービスは、RTC 自身、すなわちコアロジックを包含するコンポーネントの機能の詳細にアクセスする（コンポー
ネントの機能から外部のサービスにアクセスする）インターフェースを提供します。

- ''サービスポート'': RTC 内のコアロジックに対するサービス（から利用する）サービス
- ''SDOサービス'': RTC のコンポーネントとしての機能に対する（から利用する）サービス

SDO サービスの具体的な使われ方は以下のようなものです。

** ComponentObserver の例

例えば、OpenRTM の拡張機能として ComponentObserver と呼ばれるものがあります。これは、外部のツールなどが、コンポーネント (RTC) 自身に何らかの状態変化があった際に、ポーリングをしなくとも通知を受け取ることができる仕組みです。

RTC の状態や、プロファイル、EC の状態、ポートの接続・切断を含む状態の変化、コンフィギュレーションの変更などに変更があった場合に、ツール等がその変更の通知を受け取ることができます。

これらの状態変化は、RTC の get_component_profile()、EC の get_profile()関数などを周期的に呼ぶ（ポーリングする）ことで、外部から知ることは可能です。しかし、RTC の様々な変化を知るために、複数のツールや外部の RTC から get_xxx() などの多数の関数を周期的に呼ぶことは非効率であり、変化の見地も最悪ケースではポーリングの周期の分の遅延が発生します。

ツールなどが、あらかじめコールバックオブジェクトをRTCに与えておき、変化があった場合にのみRTC側からそのオブジェクトの関数を即座に呼べば、遅延もなく変化が起きた場合にのみ関数がコールされるため効率的です。

また、こうした機能は RTC のコアロジックとは関係なく、RTC のフレームワークそのものに関連するサービス機能です。したがって、このようなサービスインターフェースは SDO サービスとして実装することが適切です。

なお、ComponentObserver のケースでは、RTC 側ではツールが提供するサービスオブジェクトの関数を呼ぶことで、その機能を実現します。すなわち、サービスの実装はツール側に存在し、RTC 側ではツールのサービスを利用することになります。したがって、このケースでは、RTC 側は SDO サービスのコンシューマ (Required インターフェース) を実装することとなります。

逆に、RTC 側がサービスを提供し、ツールなど外部からそのサービスを利用するケースも考えられます。この場合は、SDOサービスのプロバイダ (Provided インターフェース) を実装することになります。


** 実現方法

SDO サービスプロバイダ、SDO サービスコンシューマ共に、通常は共有オブジェクトの形で提供され、所定の方法で RTC のプロセスからロード、ファクトリへの登録、インスタンス化されてサービスの提供または利用が開始されます。

SDO サービスは、1つのRTCに対して1種類につき1つの SDO サービスがインスタンス化され対応付けられます。プロセス単位であらかじめ定められたサービスがインスタンス化されます。

rtc.conf に設定可能な SDO サービス関連のオプションは次のようになっています。

|>|CENTER: SDO サービスプロバイダ関係の設定 |
| sdo.service.provider.available_services | 読み出しのみ。利用可能なサービスのリスト |
| sdo.service.provider.enabled_services | 読み込まれた SDO サービスプロバイダのうち、有効にするもの。すべて有効の場合は ALL を指定 |
| sdo.service.provider.providing_services | 読み出しのみ。利用されている SDO サービスのリスト。|
|>|CENTER: SDO サービスコンシューマ関係の設定 |
| sdo.service.consumer.available_services | 読み出しのみ。利用可能な SDO サービスコンシューマのリスト。 |
| sdo.service.consumer.enabled_services | 読み込まれた SDO サービスコンシューマのうち、有効にするもの。すべて有効の場合は ALL を指定 |


次節からは、SDO サービスの RTC 側でのプロバイダ、コンシューマの実装方法について説明します。

