// Title: Debugging RTSystemEditor, RTCBuilder
#contents

This page describes the debugging procedure of RTSystemEditor and RTCBuilder.
//このページではRTSystemEditor、RTCBuilderのデバッグの手順を説明します。

** Obtain required software
//** 必要なソフトウェアの入手

*** eclipse
RTSystemEditor, RTCBuilder will work as eclipse plugin. Please download eclipse from the following site. At that time please select Ultimate Full Edision for package. Standard Edition requires plug-in development environment to be installed manually.
//RTSystemEditor、RTCBuilderはeclipseのプラグインとして動作します。
//以下のサイトからから、eclipseをダウンロードしてください。
//その際にパッケージはUltimateのFull Edisionを選択してください。
//Standard Editionだとプラグイン開発環境を手動でインストールする必要があります。


- http://mergedoc.osdn.jp/


*** JDK
Since you need JRE 1.8 or higher, please obtain and install the latest version of JDK installer from below.
//JRE 1.8以上が必要なため、以下から最新版のJDKのインストーラーを入手してインストールしてください。

- http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html

*** RTSystemEditor, RTCBuilder source code
//*** RTSystemEditor、RTCBuilderのソースコード

Please check out below from [[TortoiseSVN:https://tortoisesvn.net/]] etc.
//以下から[[TortoiseSVN:https://tortoisesvn.net/]]等によりチェックアウトしてください。


- http://svn.openrtm.org/rtmtools/trunk/rtmtools/

** Build
//** ビルド
Please execute eclipse.exe.
//eclipse.exeを実行してください。

*** JRE setting
//*** JREの設定
Set up the JRE to use.
//使用するJREを設定します。

In the JRE path (eg C:\Program Files (x86)\Java\jdk1.8.0_131\jre), Select "Add" → "Standard VM" under "Window" → "Settings" → "Java" → "Installed JRE" and add a check
//「ウインドウ」→「設定」→「Java」→「インストール済みのJRE」で、「追加」→「標準 VM」を選択後にJREのパス(例：C:\Program Files (x86)\Java\jdk1.8.0_131\jre)を追加後にチェックを入れる

#br

#ref(plugin4_1.png)

#br

#ref(plugin5_1.png)

#br

#ref(plugin6.png)

#br

#ref(plugin7_1.png)

#br

#ref(plugin8_1.png, 80%)

#br


*** Setting compiler compliance level
//*** コンパイラー準拠レベルの設定
Since the compiler compliance level may be set to 1.6 in the initial state, please set the compiler compliance level to 1.8 with "Window" → "Setting" → "Java" → "compiler".
//初期の状態でコンパイラー準拠レベルが1.6に設定されている場合があるようなので、「ウインドウ」→「設定」→「Java」→「コンパイラー」でコンパイラー準拠レベルを1.8に設定してください。

#br

#ref(plugin9_1.png, 80%)

#br

*** Import RTSystemEditor, RTCBuilder project
//*** RTSystemEditor、RTCBuilderプロジェクトのインポート
RT System Editor, RTC Builder into eclipse of development environment.
Select "File" → "Import" → "Plug-in Development" → "Plug-in and Fragment", then press "Next".
//RT System Editor、RTC Builderを開発環境のeclipseにインポートします。
//「ファイル」→「インポート」→「プラグイン開発」→「プラグインおよびフラグメント」を選択後「次へ」を押してください。

#br

#ref(plugin12.png)

#br

#br

#ref(plugin13.png)

#br

Please turn on "Directory" of "Import destination", set the directory where rtmtools was checked out, and proceed to the next.
//「インポート先」の「ディレクトリー」をオンにして、rtmtoolsをチェックアウトしたディレクトリを設定して次へ進んでください。

#br

#ref(plugin14_1.png)

#br

Please select "Add all" and press the completion button.
//全て追加を選択して、完了ボタンを押してください。



#br

#ref(plugin15_1.png)

#br

*** IDL compilation
//*** IDLコンパイル
Compile the IDL file.
In the package explorer, start by right clicking "buildForClient" of jp.go.aist.rtm.toolscommon project and choosing "Execute" → "Ant build".
//IDLファイルのコンパイルを行います。
//パッケージエクスプローラーでjp.go.aist.rtm.toolscommonプロジェクトの「buildForCliant」を右クリックして「実行」→「Antビルド」を選択すれば開始します。


#br

#ref(plugin2_1.png)

#br

**** Garbled characters in Ant build
//**** Antビルドで文字化けする場合
Double-click "Execution" → "External Tools" → "Configure External Tool" → "Ant Build" and select "Common" tab → "Encode" to Other "MS932" please.
//Antビルドで文字化けする場合は、「実行」→「外部ツール」→「外部ツールの構成」→「Antビルド」をダブルクリックして、「共通」タブ→「エンコード」でその他「MS932」に設定してください。


#br

#ref(plugin10.png)

#br

#br

#ref(plugin11_1.png)

#br

*** Modifying the classpath
//*** クラスパスの修正
Depending on the environment, the classpath may not be set correctly.
In that case, since ClassNotFoundException exception occurs at debugging, please correct all plugin.xml that exists in rtmtools.
Double click on plugin.xml in Package Explorer and add "." To "Classpath" from "Runtime" tab. (It can be added to "Bundle-ClassPath" of "MANIFEST.MF")
//環境によってはクラスパスが正しく設定されない場合があります。
//その場合はデバッグ時にClassNotFoundExceptionの例外が発生するため、rtmtoolsに存在するplugin.xml全てを修正してください。
//パッケージエクスプローラーでplugin.xmlをダブルクリックして、「ランタイム」タブから「クラスパス」に「.」を追加してください。(「MANIFEST.MF」の「Bundle-ClassPath」に追加しても可)


#br

#ref(plugin1_1.png)

#br

That's all there is to it.
//これで準備完了です。

** Debug execution
//** デバッグ実行
Debugging starts with "Debug" → "Eclipse application" from the button of the upper bug mark.
//上部の虫のマークのボタンから、「デバッグ」→「Eclipse アプリケーション」でデバッグが開始します。

#br

#ref(plugin3_1.png)

#br