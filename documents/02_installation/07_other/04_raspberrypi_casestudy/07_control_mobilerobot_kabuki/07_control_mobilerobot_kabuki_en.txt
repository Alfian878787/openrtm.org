// Title: Control of mobile robot Kobuki
// * 移動ロボット Kobuki の制御
#contents

Kobuki is a research mobile robot released from Yujin Robotics.
Vacuum cleaner Robot is almost the same size as Roomba and can be controlled from a PC etc. via USB serial connection.
It is equipped with IO, serial input/output, power supply connector, button, LED, etc. It is suitable for use as an experimental robot.
//Kobuki は Yujin Robotics から発売されている研究用移動ロボットです。
//掃除機ロボット Roomba とほぼ同様の大きさで、USBシリアル接続でPC等から制御ができるようになっています。
//また、IO、シリアル入出力、電源コネクタ、ボタン、LED等が装備されており、実験用ロボットとしての利用に適しています。

You can download the script that installs the software etc. necessary to operate the following Kobuki's sample from here.
//以下の Kobuki のサンプルを動作させるために必要なソフトウエアのインストールなどを行うスクリプトがこちらからダウンロードできます。

- http://svn.openrtm.org/Embedded/trunk/RaspberryPi/tools/rpi.sh

 $ wget  http://svn.openrtm.org/Embedded/trunk/RaspberryPi/tools/rpi.sh
 $ chmod 755 rpi.sh
 $ sudo ./rpi.sh hostname --type kobuki

In the following explanation, the environment construction and Kobuki's sample are compiled automatically.
//で、以下の解説で行っている環境構築と Kobuki のサンプルのコンパイルが自動で行われます。


** (G)Connection between Raspberry Pi and Kobuki
//** Raspberry Pi と Kobuki の接続

The figure below is the main panel of Kobuki.
//下図は Kobuki のメインパネルです。

#ref(kobuki_panel.png,center)
CENTER: ''Kobuki DC output connector''
//CENTER: ''Kobuki DC 出力コネクタ''

We use 5V 1A DC output connector for power supply to Raspberry Pi, USB connector for connection with Raspberry Pi.
//Raspberry Pi への電源供給に 5V1A DC出力コネクタ、Raspberry Pi との接続には USBコネクタを利用します。

*** (G)Power supply
//*** 電源
Kobuki has a DC output connector capable of outputting 5V 1A and you can supply the power of Raspberry Pi from here.
//Kobuki には 5V 1A 出力可能な DC出力コネクタがあり、Raspberry Pi の電源をここから供給することができます。

5V 1A output connector with the following model number is used.
//5V1A 出力コネクタは以下の型番のものを使用します。

|>|CENTER: ''Kobuki 5V 1A connector'' |
| Housing | Molex PN: 43645-0200 |
| Terminal | Molex PN: 43030-0001 |
//|>|CENTER: ''Kobuki 5V1A用コネクタ'' |
//| ハウジング | Molex PN : 43645-0200 |
//| ターミナル | Molex PN : 43030-0001 |

#ref(kobuki5v_connector.png,center)
CENTER: ''Connector for Kobuki DC 5V 1A''
//CENTER: ''Kobuki DC5V1A用コネクタ''

You can also purchase it at RT robot shop etc.
//RTロボットショップなどでも購入できます。

- [[Connector set for Kobuki ¥450.-:http://www.rt-shop.jp/index.php?main_page=product_info&cPath=1001_1022&products_id=784]]
//- [[Kobuki用コネクタセット￥450.-:http://www.rt-shop.jp/index.php?main_page=product_info&cPath=1001_1022&products_id=784]]

We will supply power to Raspberry Pi by creating DC connector and USB conversion cable as shown below.
//下図のような DCコネクタと USBの変換ケーブルを作成することで、Raspberry Pi へ電源を供給します。

#ref(kobuki_raspberry_dccable.png,center)
CENTER: ''DC cable for Raspberry Pi''
//CENTER: ''Raspberry Pi用 DCケーブル''

In recent years, many batteries with a USB output terminal for smartphones are on sale so these power supplies can also be used.
//近年ではスマートフォン用の USB出力端子がついたバッテリーが多数発売されていますので、こういった電源も利用できます。

#ref(battery.png,center)
CENTER: ''Battery for smartphone''
//CENTER: ''スマートフォン用バッテリー''

*** (G)USB

Connect Kobuki and Raspberry Pi with the USB cable that came with Kobuki.
From Raspberry Pi side it appears as /dev/ttyUSB0.
//Kobuki に付属している USB ケーブルで Kobuki と Raspberry Pi を接続します。
//Raspberry Pi側からは /dev/ttyUSB0 として見えます。

 $ ls /dev/ttyUSB*
 /dev/ttyUSB0

*** (G)Connection
//*** 接続

Install Raspberry Pi in Kobuki and connect the power supply and USB. If you make Raspberry Pi wireless LAN connection, it becomes Kobuki which can be controlled wirelessly.
//Raspberry Pi を Kobuki に搭載して、電源と USBを接続します。Raspberry Pi を無線LAN接続にすれば、無線遠隔操作可能な Kobuki になります。

#ref(kobuki_and_raspi.png,center)
CENTER: ''Kobuki 'with Raspberry Pi''
//CENTER: ''Raspberry Pi を搭載したKobuki''

Since there is a possibility of dropping during Kobuki operation, it is good to fix Raspberry Pi with a Velcro tape or the like.
//Kobuki 動作時に脱落する可能性がありますので、Raspberry Pi はマジックテープなどで固定するとよいでしょう。

** (G)Compiling Kobuki AIST RT components
//** KobukiAIST RTコンポーネントのコンパイル

In the previous section we also tested the compilation of the RT component, but we will review it again here. First, check out the Kobuki AIST RT component from the following repository and build it.
//前節でも RTコンポーネントのコンパイルのテストを行いましたが、ここで再度おさらいします。まずは、KobukiAIST RTコンポーネントを以下のリポジトリからチェックアウトしビルドします。

- KobukiAIST RTC: http://svn.openrtm.org/components/trunk/mobile_robots/kobuki

  $ svn co http://svn.openrtm.org/components/trunk/mobile_robots/kobuki
  $ cd kobuki
  $ mkdir build
  $ cd build
  $ cmake -DCMAKE_INSTALL_PREFIX=/usr ..
  $ make
  $ cd src
  $ sudo make install

With this, Kobuki AIST RTC is built and the executable file
- /usr/lib/openrtm-1.1/rtc/KobukiAISTComp
It should be installed.
//以上で、KobukiAIST RTCがビルドされ、実行ファイルが
//- /usr/lib/openrtm-1.1/rtc/KobukiAISTComp
//にインストールされるはずです。

Try to start it up. Since access to the device file /dev/ttyUSB0 requires root privilege, it is running with sudo.
//試しに起動してみます。デバイスファイル /dev/ttyUSB0 へのアクセスには root 権限が必要ですので、sudo を使って起動しています。

 $ rtm-naming
 $ sudo /usr/lib/openrtm-1.1/rtc/KobukiAISTComp

If you start RTSystemEditor and connect to Raspberry Pi's host name or IP address, you should see a component called KobukiAIST0.
Please click to display the Configuration dialog.
//RTSystemEditor を起動し、Raspberry Pi のホスト名またはIPアドレスに接続すると、KobukiAIST0 というコンポーネントが見えるはずです。
//クリックして Configuration ダイアログを表示させてみてください。

Since it is designed to be able to operate LED1, LED2, etc, please click RED, GREEN etc. with the radio button. The LED will light up.
//LED1 や LED2 などの操作が行えるようになっていますので、radio ボタンで RED や GREEN などをクリックしてください。LED が点灯します。

** (G)Automatic activation of Kobuki AIST component
//** KobukiAIST コンポーネントの自動起動

Kobuki AIST component is started automatically when Raspberry Pi is started.
As a result, when you turn on the power to Kobuki, Raspberry Pi and Kobuki AIST components will start automatically and you will be able to operate Kobuki via RTC without having to login to Raspberry Pi every time.
//KobukiAIST コンポーネントをRaspberry Pi 起動時に自動的に起動するようにします。
//これにより、Kobuki に電源を投入すると、Raspberry Pi および KobukiAIST コンポーネントが自動的に起動するようになり、Raspberry Pi にいちいちログインしなくとも Kobuki を RTC 経由で操作できるようになります。

Create the following script as /etc/kobuki.sh.
//以下のようなスクリプトを /etc/kobuki.sh として作成します。

 $ sudo vi /etc/kobuki.sh

The contents of kobuki.sh are as follows.
//kobuki.sh の内容な以下の通りです。

 #!/bin/sh
 #
 # KobukiAIST RTC launch script
 #
 #       Copyright Noriaki Ando <n-ando@openrtm.org>
 #       2011.03.27
 #
 # This script should be executed from rc script like a rc.local
 # as the following command line.
 #
 #
 ns=/usr/bin/rtm-naming
 kobukiRTC=/usr/lib/openrtm-1.1/rtc/KobukiAISTComp
 workdir=/tmp/kobuki
 
 \$ns
 sleep 5
 
 if test -d $workdir ; then
         echo ""
 else
         mkdir \$workdir
 fi
 
 cd $workdir
 
 while :
 do
     rm -f \$workdir/*.log
     \$kobukiRTC
     sleep 5
 done

Give execute privilege.
//実行権限をつけます。

 $ sudo chmod 755 /etc/kobuki.sh

Furthermore, to start automatically, insert the following line before the last ''exit 0'' of /etc/rc.local.
//さらに、自動的に起動するように /etc/rc.local の最後の  ''exit 0'' の手前に以下のような一行を挿入します。

 /etc/kobuki.sh 2>&1 | perl -p -e 's/\n/\r\n/g' 1>&2 &
 exit 0

Now, when Raspberry Pi starts up, the Kobuki AIST component also starts up automatically.
Even if Kobuki AIST component is terminated by exit, it starts again after 5 seconds.
As long as Kobuki is powered on, the Kobuki AIST component will continue to stay resident.
//これで、Raspberry Pi が起動すると、KobukiAIST コンポーネントも自動的に起動します。
//また、万一 KobukiAIST コンポーネントを exit で終了させても、5秒後再度起動します。
//Kobuki に電源が入っている限り、KobukiAIST コンポーネントは常駐し続けるようになっています。

** (G)Operation of Kobuki component
//** Kobuki コンポーネントの操作

*** (G)Operation by TkJoystick
//*** TkJoystick による操作

TkJoystick is a component included as a sample in OpenRTM-aist-Python. However, the output is only the XY value of the joystick and the output for the wheel speed of the opposed two-wheeled mobile robot, and there is no output of the two-dimensional velocity vector (TimedVelocity2D).
//TkJoystick は OpenRTM-aist-Python にサンプルとして含まれているコンポーネントです。ただし、出力はジョイスティックのX-Y値と、対向2輪型移動ロボットの車輪速度用の出力のみで、2次元速度ベクトル (TimedVelocity2D) 出力は有りません。

Improve the TkJoyStick component, output 2-D velocity vector (TimedVelocity2D), connect with Kobuki and operate.
//TkJoyStick コンポーネントを改良して、2次元速度ベクトル (TimedVelocity2D) の出力をするようにし、Kobukiと接続して操作してみてください。

- Original TkJyoStick RTC: http://svn.openrtm.org/OpenRTM-aist-Python/trunk/OpenRTM-aist-Python/OpenRTM_aist/examples/TkJoyStick/

On Windows, the following directories are also installed. (x.y is version)
//Windows では以下のディレクトリーもインストールされています。(x.yはバージョン)

- C:\Program Files (x86)\OpenRTM-aist\x.y\examples\Python\TkJoyStick
- C:\Program Files\OpenRTM-aist\x.y\examples\Python\TkJoyStick

**** (G)Hint
//**** ヒント

In TkJoystick.py, the left and right wheel speeds are calculated. Considering the kinematics of the mobile robot from here, the speed v and the angular velocity ω can be calculated.
(For reference, I will make a link to Professor Kumagai of Tohoku Gakuin University.
//TkJoystick.py の中では、左右の車輪速度を計算しています。ここから、移動ロボットの運動学を考慮すれば、速度 v および角速度 ω を計算することができます。
//(参考のため、東北学院大学の熊谷先生のページへのリンクを張っておきます。) 

- [[See the Mathematics section of Wheel Mobile Robot: http://www.mech.tohoku-gakuin.ac.jp/rde/contents/course/robotics/wheelrobot.html]]
//- [[車輪移動ロボットの数学の項を参照:http://www.mech.tohoku-gakuin.ac.jp/rde/contents/course/robotics/wheelrobot.html]]

TimedVelocity2D has the following data structure.
//なお、TimedVelocity2D は以下のようなデータ構造となっています。

 struct Velocity2D
 {
    double va; // angular velocity [rad/s]
    double vx; // translation speed (forward) [m/s]
    double vy; // translation speed (lateral direction) [m/s] 0 for the opposite two-wheel type
//double va; // 角速度 [rad/s]
//double vx; // 並進速度(前方) [m/s]
//double vy; // 並進速度(横方向) [m/s] 対向2輪型では0
 };
 struct TimedVelocity2D
 {
   Time tm;
   Velocity2D data;
 };

*** (G)Move autonomously
//*** 自律的に移動させる

I will move Kobuki autonomously using a sensor.
Kobuki is equipped with bumper sensor, proximity sensor (far/near), Cliff sensor.
Here, like Roomba, when continuing to move forward, when detecting a wall, I try to move it with an algorithm that goes down a little, rotates and moves forward again.
(Roomba moves a bit more wisely ...)
//Kobuki をセンサーを利用して自律的に移動させてみます。
//Kobuki は、バンパセンサー、近接センサー(遠・近)、Cliffセンサーを装備されています。
//ここでは、Roomba っぽく、前進し続けて壁を検知したら、少し下がり、回転し、再び前進をする、というアルゴリズムで動かしてみます。
//(Roomba はもう少し賢く動きますが。。。)

The sensor output of Kobuki AIST RTC is as follows.
The IR sensor is for receiving signals from infrared from the dock and can not be used for obstacle detection. Therefore, only bumpers and cliff sensors can be used to detect obstacles and cliffs.
//KobukiAIST RTC のセンサ出力は以下のようになっています。
//IRセンサはドックからの赤外線による信号を受けるためのもので、障害物検知には使用できません。したがって、バンパおよび崖センサーのみが障害物・崖検知に利用できます。

| No. | Enum | Meaning |
//|No. | enum | 意味 |
|  0 | RIGHT_BUMPER         | Right bumper |
|  1 | CENTER_BUMPER        | Central bumper |
|  2 | LEFT_BUMPER          | Left bumper |
|  3 | RIGHT_WHEEL_DROP     | Right wheel release |
|  4 | LEFT_WHEEL_DROP      | Left wheel derailleur |
|  5 | RIGHT_CLIFF          | Right cliff sensor |
|  6 | CENTER_CLIFF         | Central cliff sensor |
|  7 | LEFT_CLIFF           | Left cliff sensor |
|  8 | RIGHT_IRFAR_RIGHT    | Right IR / dock right far |
|  9 | RIGHT_IRFAR_CENTER   | Right IR / dock Middle distance |
| 10 | RIGHT_IRFAR_LEFT     | Right IR / dock left |
| 11 | RIGHT_IRNEAR_RIGHT   | Right IR / dock right near |
| 12 | RIGHT_IRNEAR_CENTER  | Right IR / Dock Center Near |
| 13 | RIGHT_IRNEAR_LEFT    | Right IR / Dock Sightseeing |
| 14 | CENTER_IRFAR_RIGHT   | Central IR / dock far right |
| 15 | CENTER_IRFAR_CENTER  | Central IR / Dock Central Distance |
| 16 | CENTER_IRFAR_LEFT    | Central IR / dock left |
| 17 | CENTER_IRNEAR_RIGHT  | Central IR / dock right near |
| 18 | CENTER_IRNEAR_CENTER | Central IR / Dock Center Near |
| 19 | CENTER_IRNEAR_LEFT   | Central IR / Dock Sight-seeing |
| 20 | LEFT_IRFAR_RIGHT     | Left IR / dock far right |
| 21 | LEFT_IRFAR_CENTER    | Left IR / Dock Middle distance |
| 22 | LEFT_IRFAR_LEFT      | Left IR / dock left |
| 23 | LEFT_IRNEAR_RIGHT    | Left IR / dock right near |
| 24 | LEFT_IRNEAR_CENTER   | Left IR / Dock Center Near |
| 25 | LEFT_IRNEAR_LEFT     | Left IR / Dock Sightseeing |
| 26 | KOBUKI_DOCKED        | Dock completed |
//|  0 | RIGHT_BUMPER         | 右バンパ |
//|  1 | CENTER_BUMPER        | 中央バンパ |
//|  2 | LEFT_BUMPER          | 左バンパ |
//|  3 | RIGHT_WHEEL_DROP     | 右車輪脱輪 |
//|  4 | LEFT_WHEEL_DROP      | 左車輪脱輪 |
//|  5 | RIGHT_CLIFF          | 右崖センサ |
//|  6 | CENTER_CLIFF         | 中央崖センサ |
//|  7 | LEFT_CLIFF           | 左崖センサ |
//|  8 | RIGHT_IRFAR_RIGHT    | 右IR/ドック右遠 |
//|  9 | RIGHT_IRFAR_CENTER   | 右IR/ドック中央遠 |
//| 10 | RIGHT_IRFAR_LEFT     | 右IR/ドック左遠 |
//| 11 | RIGHT_IRNEAR_RIGHT   | 右IR/ドック右近 |
//| 12 | RIGHT_IRNEAR_CENTER  | 右IR/ドック中央近 |
//| 13 | RIGHT_IRNEAR_LEFT    | 右IR/ドック左近 |
//| 14 | CENTER_IRFAR_RIGHT   | 中央IR/ドック右遠 |
//| 15 | CENTER_IRFAR_CENTER  | 中央IR/ドック中央遠 |
//| 16 | CENTER_IRFAR_LEFT    | 中央IR/ドック左遠 |
//| 17 | CENTER_IRNEAR_RIGHT  | 中央IR/ドック右近 |
//| 18 | CENTER_IRNEAR_CENTER | 中央IR/ドック中央近 |
//| 19 | CENTER_IRNEAR_LEFT   | 中央IR/ドック左近 |
//| 20 | LEFT_IRFAR_RIGHT     | 左IR/ドック右遠 |
//| 21 | LEFT_IRFAR_CENTER    | 左IR/ドック中央遠 |
//| 22 | LEFT_IRFAR_LEFT      | 左IR/ドック左遠 |
//| 23 | LEFT_IRNEAR_RIGHT    | 左IR/ドック右近 |
//| 24 | LEFT_IRNEAR_CENTER   | 左IR/ドック中央近 |
//| 25 | LEFT_IRNEAR_LEFT     | 左IR/ドック左近 |
//| 26 | KOBUKI_DOCKED        | ドック完了 |

To receive these outputs, one InPort of RTC::TimedBooleanSeq type is required.
In addition, one OutPort of TimedVelocity 2D type for outputting the movement speed command to Kobuki is required.
//これらの出力を受けるため RTC::TimedBooleanSeq 型の InPort が一つ必要になります。
//また、Kobuki に移動速度指令を出力するための TimedVelocity2D型の OutPort が一つ必要になります。

|>|CENTER: ''Basic profile'' |
| Component name | KobukiAutoMove |
| Module overview | Kobuki auto move component |
| Version | 1.0.0 |
| Vendor name | AIST |
|>|CENTER: ''Activity'' |
|onInitialize, onFinalize, onActivated, onDeactivated, onExecute |
|>|CENTER: ''Data port''' |
|>| [in] bumper |
| Overview | sensor information true: obstacle detection (bumper contact, wheel fall, cliff detection) false: no obstacle |
| Data type | TimedBooleanSeq |
| Details | Data [0]: right bumper, data [1]: central bumper, ... data [7]: left cliff sensor (see table above) |
|>| [out] targetVelocity |
| Overview | Speed vector of mobile robot |
| Data type | TimedVelocity 2D |
| Detail | vx: translation speed, vy: 0.0, va: angular velocity |
| Unit | vx [m/s], va [rad/s] |
//|>|CENTER: ''基本プロファイル'' |
//|コンポーネント名称 | KobukiAutoMove |
//| モジュール概要   | Kobuki auto move component |
//| バージョン       | 1.0.0     |
//| ベンダ名         | AIST      |
//|>|CENTER: ''アクティビティ'' |
//|>|onInitialize、onFinalize、onActivated、onDeactivated、onExecute |
//|>|CENTER: ''データポート'' |
//|>| [in] bumper |
//| 概要 | センサ情報　true:障害物検出（バンパ接触、車輪落下、崖検知）　false:障害物無し |
//| データ型 | TimedBooleanSeq |
//| 詳細     | data[0]: 右バンパ、data[1]: 中央バンパ、... data[7]: 左崖センサ（上の表参照） |
//|>| [out] targetVelocity |
//| 概要 |移動ロボットの速度ベクトル|
//| データ型 | TimedVelocity2D |
//| 詳細     | vx: 並進速度、vy: 0.0、va: 角速度 |
//| 単位     | vx [m/s]、va [rad/s] |

Using the above information as a clue, please create a simple component that will autonomously move Kobuki.
If you are having trouble connecting components, please see [[Troubleshooting:http://openrtm.org/openrtm/en/node/5273#trouble]].
//以上の情報を手掛かりに、Kobuki を自律移動させる簡単なコンポーネントを作成してみてください。
//コンポーネントの接続でうまく行かない場合は、[[トラブルシューティング:http://openrtm.org/openrtm/ja/node/5273#trouble]] をご覧ください。

**** (G)Hint
//**** ヒント

The speed command of Kobuki is TimedVelocity 2D type, which is also shown above, but has the following data structure.
//Kobuki の速度指令は TimedVelocity2D という型で、上でも示しましたが、以下のようなデータ構造です。

 struct Velocity2D
 {
   double va; // angular velocity [rad/s]
   double vx; // translation speed (forward) [m/s]
   double vy; // translation speed (lateral direction) [m/s] 0 for the opposite two-wheel type
//double va; // 角速度 [rad/s]
//double vx; // 並進速度(前方) [m/s]
//double vy; // 並進速度(横方向) [m/s] 対向2輪型では0
 };
 struct TimedVelocity2D
 {
   Time tm;
   Velocity2D data;
 };

In the opposed two-wheeled mobile robot, it is considered that vy is always 0.0, for example,
//対向2輪型移動ロボットでは、vyは常に0.0であると考え、たとえば直進なら

 va = 0.0; vx = 0.2; vy = 0.0;

If you go backwards,
//となります。後進するなら、

 va = 0.0; vx = -0.2; vy = 0.0;

If it turns on the spot
//であり、その場で旋回するなら

 va = 0.0; vx = 0.0; vy = 1.0;

//となります。

#ref(timed_velocity_2d.png,center,80%)
CENTER: ''Coordinate system of mobile robot and TimedVelocity 2D''
//CENTER: ''移動ロボットの座標系と TimedVelocity2D''

If there is data to InPort, read the data and retrieve the bumper information. Bumper information is stored in a member of an array called .data of the data type TimedBoolSeq, and it can be seen that it is the 0th, 1st, 2nd element in the above table.
If any of these are true, it means that a bumper has detected a collision, so once it gets down, it turns. And I will move forward again.
If these movements are set to TimedVelocity 2D members and written to OutPort, speed command data will be transmitted to Kobuki.
The algorithm flow chart is shown below.
//InPort にデータが来ていたら、データを読み込みバンパ情報を取り出します。バンパ情報は、TimedBoolSeq というデータ型の .data という配列のメンバに格納されており、上の表で0,1,2番目の要素であることがわかります。
//これらのどれかが true になっていたらバンパで衝突を検知したということですから、いったん下がり、旋回します。そして、再び前進します。
//これらの動きを TimedVelocity2D のメンバーにそれぞれ設定して OutPort に writeすれば、速度指令データは Kobuki に伝達されます。
//アルゴリズムのフローチャートを下に示します。

#ref(kobuki_auto.png,center)
CENTER: ''Flowchart''
//CENTER: ''フローチャート''

It is ideal to control how much it goes down and goes down or turns or turns, but it is also possible to use the sleep function for the sake of simplicity.
You can use coil::sleep on Linux
//どのくらい下がるか・下がったか、あるいは旋回するか・したかを計測しながら制御するのが理想ですが、簡単のために sleep関数を使用することもできます。
//Linuxではcoil::sleep が使えます

 coil::sleep(coil::TimeValue(0.01); // Wait 10 ms

In Windows, coil::sleep has poor accuracy, so it is better to use the Sleep function.
Based on these hints, please create a control component that makes Kobuki move autonomously
//Windows では coil::sleep の精度が悪いので、Sleep関数を利用したほうがよいでしょう。
//これらのヒントを基に、Kobuki を自律移動させるような制御コンポーネントを作成してみてください

** (G)Answer
//** 解答

As an answer, the above TkJoyStick component and autonomous moving component are shown below.
//解答として、上記の TkJoyStick コンポーネントと自律移動コンポーネントを以下に示します。

- GUI joystick: &ref(TkJoyStick.zip);
- Kobuki autonomous control: &ref(KobukiAutoMove.zip);
//- GUI ジョイスティック: &ref(TkJoyStick.zip);
//- Kobuki 自律制御: &ref(KobukiAutoMove.zip);