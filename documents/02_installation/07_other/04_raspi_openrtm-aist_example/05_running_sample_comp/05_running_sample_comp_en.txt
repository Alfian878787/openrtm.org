// Title: Running sample components
//* GPIOを利用したサンプル

#contents

In the following example, using GPIO, you can create a component (DigitalIn-RTC, DigitalOut-RTC) that detects the ON/OFF of the switch and light up the LED and understand the use of GPIO which is the feature of Raspberry Pi I will deepen.
The source code of the sample component can be downloaded from the following.
//以下の例では、GPIO を用いて、スイッチの ON/OFF の検出と、LED の点灯を行うコンポーネント (DigitalIn-RTC、DigitalOut-RTC) を作成して Raspberry Pi の特徴である GPIO の利用について理解を深めます。
//サンプルコンポーネントのソースコードは以下からダウンロードできます。

- ''Sample component source:'' &ref (RaspberryPi_sample.zip);
//- ''サンプルコンポーネントソース:'' &ref(RaspberryPi_sample.zip);

** (G)GIOP of Raspberry Pi
//** Raspberry Pi の GIOP

Raspberry Pi has a GPIO terminal, which allows you to use various external devices.
//Raspberry Pi には GPIO端子があり、これを利用することで様々な外部デバイスを利用することができます。

The pin assignment of the GPIO that is attached to the Raspberry Pi main unit is shown below.
//Raspberry Pi 本体に付属している GPIO のピンアサインを以下に示します｡

#ref(raspberrypi_gpio_pinassign.png,center,nolink)
CENTER: ''Raspberry Pi GPIO pin assignment''
//CENTER:''Raspberry Pi GPIO のピンアサイン''

When using GPIO, pay attention to the position of each pin, especially if using 5V terminal, mistake in wiring may damage the Raspberry Pi main unit and SD card, so be careful enough please.
//GPIO を使用する場合には、各ピンの位置に注意してください｡特に5V 端子を使用する場合、配線を誤ると Raspberry Pi 本体および SD カードを破壊してしまう危険がありますので、十分に注意してください｡

** (G)Breadboard wiring example
//**ブレッドボード配線例

Create a circuit that lights the LED and a circuit that detects ON/OFF of the switch.
If you have a breadboard etc, you can easily build a circuit, but since there are few parts even if it is not, you can easily form a circuit by soldering lead wires etc.
Below is a list of necessary parts.
//LED を点灯させる回路と、スイッチの ON/OFF を検出する回路を作成します。
//ブレッドボード等があれば簡単に回路を組めますが、ない場合でも部品点数が少ないのでリード線をはんだ付けするなどすれば比較的容易に回路を組むことができるでしょう。
//以下に、必要な部品のリストを示します。

|>|CENTER:''Bill of Material''|
|>|CENTER:''LED circuit''|
|LED|1piece|
|Resistance |100Ω(brown black tea gold) - 330Ω(orange orange tea gold)|
|Lead wire|Somewhat|
|>|CENTER:''Switch LED circuit''|
|LED|1piece|
|Resistance|330Ω(Orange Orange Tea) - 1kΩ(Brown Black Red Gold)|
|Lead wire|Somewhat|
//|>|CENTER: ''部品表'' |
//|>|CENTER: ''LED回路'' |
//| LED | 1個 |
//| 抵抗 | 100Ω (茶黒茶金) ～330Ω (橙橙茶金) |
//|リード線 | 若干 |
//|>|CENTER: ''スイッチLED回路'' |
//| LED | 1個 |
//| 抵抗 | 330Ω (橙橙茶金) ～1kΩ (茶黒赤金) |
//|リード線 | 若干 |

If there is only one Raspberry Pi, connect the following LED and switch circuit to the same Raspberry Pi.
If there are two Raspberry Pi, it may be interesting to install LEDs and switches on each Raspberry Pi.
//Raspberry Pi が1台の場合は、以下の LEDとスイッチ回路を同じ Raspberry Pi に接続します。
//もし、Raspberry Pi が2台あるなら、それぞれの Raspberry Pi に LED とスイッチを取り付けると面白いかもしれません。

*** (G)Wiring example for DigitalIn-RTC
//*** DigitalIn-RTC 用配線例

DigitalIn-RTC is a component that outputs the bool value (true/false) input to the data port to the specified GPIO port. In order to observe the output value of the GPIO port, connect the LED and resistor to the ''Ground'' pin and ''GPIO 18'' pin and create a circuit as shown below.
//DigitalIn-RTC は、データポートに入力された bool 値 (true/false) を指定された GPIO ポートに出力するコンポーネントです。GPIO ポートの出力値を観測するために、''Ground''ピンと''GPIO 18''ピンに LED と抵抗を接続し下図のような回路を作成します。

#ref(gpio_led_circuit.png,center,80%)
CENTER:''LED Connection Circuit''
//CENTER:''LED 接続回路図''

This is the case when creating this circuit with breadboard.
//ブレッドボードでこの回路を作成する場合はこのようになります。

#ref(3_rp2.png,center,nolink)
CENTER: ''Example of LED circuit wiring with breadboard''
//CENTER:''ブレッドボードによる LED 回路配線例''

*** (G)Wiring example for DigitalOut-RTC
//*** DigitalOut-RTC 用配線例

DigitalOut-RTC is a component that outputs the bool value (true/false) input to the GPIO port from the data port.
In order to input the value to GPIO, connect a resistor and a switch to ''Ground'', ''3.3V Power'', ''GPIO 17'' and create a circuit as shown below.
//DigitalOut-RTC は、GPIO ポートに入力された bool 値 (true/false) をデータポートから出力するコンポーネントです｡
//GPIO に値を入力するために、''Ground'', ''3.3V Power'', ''GPIO 17''に抵抗とスイッチを接続して下図のような回路を作成します。

#ref(gpio_stiwch_circuit.png,center,80%)
CENTER: ''TACT Switch Connection Circuit''
//CENTER:''タクトスイッチ接続回路図''

This is the case when creating this circuit with breadboard.
//ブレッドボードでこの回路を作成する場合はこのようになります。

#ref(3_rp3.png,center,nolink)
CENTER: ''Example of switching circuit wiring with breadboard''
//CENTER:''ブレッドボードによりスイッチ回路配線例''

** (G)Compiling components
//** コンポーネントのコンパイル

Download the source code to Raspberry Pi from below and compile the DigitalIn-RTC/DigitalOut-RTC component.
//ソースコードを以下から Raspberry Pi にダウンロードして、DigitalIn-RTC/DigitalOut-RTC コンポーネントをコンパイルします。

- ''Sample component source:'' &ref(RaspberryPi_sample.zip);
//- ''サンプルコンポーネントソース:'' &ref(RaspberryPi_sample.zip);

*** (G)Compiling DigitalIn-RTC
//*** DigitalIn-RTC のコンパイル

 $ unzip RaspberryPi_sample.zip
 $ cd RaspberryPi_sample/DigitalInRPI/
 $ vi CMakeLists.txt

Now rewrite CMakeLists.txt and set it to suppress document generation.
//ここで、CMakeLists.txt を書き換えて、ドキュメントの生成を抑制するよう設定します。

 option(BUILD_DOCUMENTATION "Build the documentation" OFF)
  ↓
 option(BUILD_DOCUMENTATION "Build the documentation" ON)
 
 $ mkdir build
 $ cd build
 $ cmake ..
 -- The C compiler identification is GNU 4.6.3
 -- The CXX compiler identification is GNU 4.6.3
   : Omission
 -- Configuring done
 -- Generating done
 -- Build files have been written to: /home/pi/RaspberryPi_sample/DigitalInRPI/build

If OpenRTM-aist is correctly installed, configure will terminate without problems.
If an error occurs due to lack of OpenRTM or coil, please confirm that OpenRTM-aist (C++ version) is correctly installed (dpkg -l |grep openrtm etc.).
//OpenRTM-aist が正しくインストールされていれば、問題なく configure が終了します。
//もし、OpenRTM や coil が無いなどでエラーが出た場合、OpenRTM-aist (C++版) が正しくインストールされていることを確認 (dpkg -l |grep openrtm 等) してください。

 $ make
  : Omission
 Scanning dependencies of target DigitalInComp
 [ 66%] Building CXX object src/CMakeFiles/DigitalInComp.dir/DigitalInComp.cpp.o
 [100%] Building CXX object src/CMakeFiles/DigitalInComp.dir/DigitalIn.cpp.o
 Linking CXX executable DigitalInComp
 [100%] Built target DigitalInComp
 $

The compiled component DigitalInComp is under src.
//コンパイルされたコンポーネント DigitalInComp は src の下にあります。

 $ ls src/
 CMakeFiles  cmake_install.cmake  DigitalInComp  DigitalIn.so  Makefile

*** (G)Compiling DigitalOut-RTC
//*** DigitalOut-RTC のコンパイル

Compile like DigitalIn-RTC.
//DigitalIn-RTC と同様にコンパイルします。

 $ cd RaspberryPi_sample/DigitalOutRPI/
 $ mkdir build
 $ vi CMakeLists.txt

Now rewrite CMakeLists.txt and set it to suppress document generation.
//ここで、CMakeLists.txt を書き換えて、ドキュメントの生成を抑制するよう設定します。

 option(BUILD_DOCUMENTATION "Build the documentation" OFF)
  ↓
 option(BUILD_DOCUMENTATION "Build the documentation" ON)
 
 $ mkdir build
 $ cd build
 $ cmake ..
 -- The C compiler identification is GNU 4.6.3
 -- The CXX compiler identification is GNU 4.6.3
   : Omission
 -- Configuring done
 -- Generating done
 -- Build files have been written to: /home/pi/RaspberryPi_sample/DigitalOutRPI/build
Then make it.
//続いて make します。

 $ make
 -- OpenRTMConfig.cmake found.
 -- Configrued by configuration mode.
  : Omission
 Scanning dependencies of target DigitalOutComp
 [ 66%] Building CXX object src/CMakeFiles/DigitalOutComp.dir/DigitalOutComp.cpp.o
 [100%] Building CXX object src/CMakeFiles/DigitalOutComp.dir/DigitalOut.cpp.o
 Linking CXX executable DigitalOutComp
 [100%] Built target DigitalOutComp
 $

The compiled component DigitalOutComp is under src.
//コンパイルされたコンポーネント DigitalOutComp は src の下にあります。

 $ ls src/
 CMakeFiles  cmake_install.cmake  DigitalOutComp  DigitalOut.so  Makefile

** (G)Running components
//** コンポーネントの実行

Once each RTC has been successfully compiled, start up each RTC after launching NameServer.
//各RTC が正常にコンパイルできたら、NameServer を起動後、各RTC を起動します｡

 $ rtm-naming
 $ sudo  /home/pi/RaspberryPi_sample/DigitalOutRPI/build/src/DigitalOutComp &
 $ sudo  /home/pi/RaspberryPi_sample/DigitalInRPI/build/src/DigitalInComp &

&color(red){Since the sample component uses GPIO, it must be executed with root authority.}
&color(red){※サンプルコンポーネントは GPIO を利用するので root 権限で実行する必要があります｡}

Launch RTSystemEditor on PC and connect to NameServewr on Raspberry Pi.
After placing each RTC, connecting between the ports, activate.
//PC上で RTSystemEditor を起動し、Raspberry Pi上の NameServewr に接続します｡
//各RTC を配置し、ポート間の接続を行った後、活性化(Activate)します｡

#ref(3_rp4.png, 80%, center,nolink)
CENTER: ''Run sample RTC''
//CENTER:''サンプル RTC の実行''

When each RTC starts normally, the LED turns on/off according to the status of the takt switch.
//各RTC が正常に起動すると、タクトスイッチの状態に応じて、LED が点灯/消灯するようになります｡
