// Title: OpenRTM-aist(C++版)のCMakeによるビルド手順
#contents

** Windows + omniORB

以下から OpenRTM-aist のソースコードを入手してください。

- https://github.com/OpenRTM/OpenRTM-aist

以下からビルド済みの omniORB を入手してください。

- http://openrtm.org/pub/omniORB/win32/omniORB-4.2.3/

チェックアウトしたフォルダー(OpenRTM-aist)に移動して以下のコマンドを実行してください。


 mkdir build
 cd build
 cmake -DORB_ROOT=C:/workspace/omniORB-4.2.3-win64-vc141 -DCORBA=omniORB -G "Visual Studio 15 2017" -A x64 ..
 cmake --build . --config Release


|変数名|意味|設定できる値|
|CORBA|CORBA のライブラリー|omniORB|

** Windows + TAO
以下から TortoiseSVN をインストールしてください。

- https://tortoisesvn.net/
- https://ja.osdn.net/projects/tortoisesvn/

以下から OpenRTM-aist のソースコードを入手してください。

- https://github.com/OpenRTM/OpenRTM-aist

以下から ACE+TAO.zip をダウンロードしてください。

- http://download.dre.vanderbilt.edu

Visual Studio で ACE と TAO のビルドをします。

ACE+TAO.zip を展開したフォルダーの ''ace/config-win32.h'' を ''ace/config.h'' に変更してください。

ACE_vc12.sln (もしくは ACE_vc14.sln、ACE_vs2017.sln)を Visual Studio で開いてビルドしてください。
64bitの場合はソリューションプラットフォームがWin32となっている部分をx64に変更してください。

次に以下の環境変数を設定した状態でTAO_vc12.sln (もしくは TAO_vc14.sln、TAO_vs2017.sln)を Visual Studio で開いてビルドしてください。

|環境変数|値|
|ACE_ROOT|ACE_wrappersを展開したフォルダのパス|


チェックアウトしたフォルダー(OpenRTM-aist)に移動して以下のコマンドを実行してください。



 mkdir build
 cd build
 cmake -DORB_ROOT=C:/workspace/ACE_wrappers -DCORBA=TAO -G "Visual Studio 15 2017" -A x64 ..
 set PATH=%PATH%;C:\workspace\ACE_wrappers\lib;
 cmake --build . --config Release


** Windows 10 IoT + omniORB
omniORBのWindows 10 IoT用のビルド済みバイナリファイルは現在のところ配布していないため、自力でビルドする必要があります。
Cygwinのインストールが必要です。

- https://www.cygwin.com/


omniORBのソースコードを入手してください。

- https://sourceforge.net/projects/omniorb/files/omniORB/omniORB-4.2.2/


omniORB-4.2.2.tar.bz2を適当な場所に展開してください。

最初にARM+Windows用の修正パッチを適用します。
以下から修正パッチを入手してください。

- http://svn.openrtm.org/omniORB/trunk/windows/omniORB-4.2.2-windows-iot.patch

Cygwin上で以下のコマンドを実行してください。


 patch -p1 -d omniORB-4.2.2 < omniORB-4.2.2-windows-iot.patch



omniORB-4.2.2.tar.bz2を展開したフォルダの''mk/platforms/arm_win32_vs_14.mk''を編集します。
使用するVisual Studioのバージョンが違う場合は合ったものを選択してください。
以下のようにPythonのディレクトリを指定します。


 PYTHON = /cygdrive/c/Python27/python


次に''config/config.mk''を編集します。
以下のように対応したmkファイルを指定します。
Visual Studioのバージョンが違う場合は適宜対応してください。


 platform = arm_win32_vs_14



クロスコンパイルを行うため、idlコンパイラなどの実行ファイルは開発環境で動作可能なものを用意します。

以下からx86用にビルドした omniORB のバイナリを入手してください。

- http://openrtm.org/pub/omniORB/win32/omniORB-4.2.2/

zipファイルを展開したフォルダの''bin/x86_win32''の中身を、omniORB-4.2.2.tar.bz2を展開したフォルダの''bin/x86_win32''にコピーしてください。




omniORB-4.2.2.tar.bz2を展開したディレクトリに移動して、以下のコマンドを実行してください。

 set PATH=C:\cygwin64\bin;%PATH%;
 call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86_arm
 cd src
 make export


これで''bin/ARM_win32''に実行ファイルが、''lib/ARM_win32''にライブラリが生成されます。
vcvarsall.batについてはVisual Studioのバージョンにあったものを使用してください。
Visual Studio 2017の場合は''C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvarsall.bat''となります。



OpenRTM-aistのビルドは通常とほとんど同じです。
cmakeのオプションとして''Visual Studio 14 2015 ARM''というようにARM用のコンパイラを指定してください。



 mkdir build
 cd build
 cmake -DORB_ROOT=C:/workspace/omniORB-4.2.2 -DCORBA=omniORB -G "Visual Studio 14 2015" -A ARM ..
 cmake --build . --config Release


Visual StudioにARM用コンパイラがインストールされていないとビルドできません。
ARM用コンパイラをインストールしていない場合は、''Visual Studio Installer''を起動して''ARM用Visual Studio C++コンパイラとライブラリ'''をインストールしてください。


&br;
#br

#ref(arm1.png,50%, center)
&br;
#br

** Ubuntu + omniORB

 git clone https://github.com/OpenRTM/OpenRTM-aist
 cd OpenRTM-aist/
 mkdir build
 cd build/
 cmake -DCORBA=omniORB -DCMAKE_BUILD_TYPE=Release ..
 cmake --build . --config Release -- -j$(nproc)



|変数名|意味|設定できる値|
|CORBA|CORBA のライブラリー|omniORB|

** Ubuntu + TAO

まずは以下のコマンドでACE+TAOをビルド、インストールしてください。

 sudo apt-get install gperf
 export ACE_ROOT=${PWD}/ACE_wrappers/build/linux
 export TAO_ROOT=${ACE_ROOT}/TAO
 export LD_LIBRARY_PATH=$ACE_ROOT/ace:$ACE_ROOT/lib
 export INSTALL_PREFIX=~/ace_install
 wget http://download.dre.vanderbilt.edu/previous_versions/ACE+TAO-6.4.5.tar.gz
 tar xf ACE+TAO-6.4.5.tar.gz
 cd ACE_wrappers
 mkdir -p build/linux
 ./bin/create_ace_build build/linux
 echo '#include "ace/config-linux.h"' > build/linux/ace/config.h
 echo 'include $(ACE_ROOT)/include/makeinclude/platform_linux.GNU' > build/linux/include/makeinclude/platform_macros.GNU
 cd build/linux
 make
 make install
 cd TAO
 make
 make install

以下のコマンドでOpenRTM-aistをビルドしてください。

 git clone https://github.com/OpenRTM/OpenRTM-aist
 cd OpenRTM-aist/
 mkdir build
 cd build
 cmake -DCORBA=TAO -DCMAKE_BUILD_TYPE=Release ..
 cmake --build . --config Release -- -j$(nproc)

** VxWorks + omniORB
事前にWind River Workbenchのホームディレクトリを指定する必要があります。
Wind River Workbenchをインストールしたディレクトリを''WIND_HOME''という変数に設定してください。

 export WIND_HOME=/home/openrtm/WindRiver

OpenRTM-aistのビルドの前に、omniORBのビルドを行う必要があります。

*** omniORB
omniORBのソースコードを入手してください。

- http://omniorb.sourceforge.net/

omniORBのVxWorks対応パッチを入手してください。

- http://svn.openrtm.org/omniORB/trunk/vxworks/omniORB-4.2.2-vxworks.patch


以下のコマンドでビルドを実行します。

 wget https://jaist.dl.sourceforge.net/project/omniorb/omniORB/omniORB-4.2.2/omniORB-4.2.2.tar.bz2
 tar xf omniORB-4.2.2.tar.bz2
 wget http://svn.openrtm.org/omniORB/trunk/vxworks/omniORB-4.2.2-vxworks.patch
 patch -p1 -d omniORB-4.2.2 < omniORB-4.2.2-vxworks.patch
 cd omniORB-4.2.2
 mkdir build
 cd build
 ../configure
 make
 cd ..
 sed -i '1s/^/platform = ${VXWORKS_PLATFORM}\n/' config/config.mk
 cd src
 make export

ただし、VXWORKS_PLATFORMには動作環境に合ったものを入力するようにしてください。
|VXWORKS_PLATFORM|CPU|VxWorksのバージョン|実装方法|
|powerpc_vxWorks_kernel_6.6|PowerPC|6.6|カーネルモジュール|
|powerpc_vxWorks_RTP_6.6|PowerPC|6.6|RTP|
|powerpc_vxWorks_kernel_6.9|PowerPC|6.9|カーネルモジュール|
|powerpc_vxWorks_RTP_6.9|PowerPC|6.9|RTP|
|simlinux_vxWorks_kernel_6.6|Linux上のシミュレータ|6.6|カーネルモジュール|
|simpentium_vxWorks_RTP_6.6|Linux上のシミュレータ|6.6|RTP|
|simlinux_vxWorks_kernel_6.9|Linux上のシミュレータ|6.9|カーネルモジュール|
|simpentium_vxWorks_RTP_6.9|Linux上のシミュレータ|6.9|RTP|

*** OpenRTM-aist

以下のコマンドを入力してください。

 git clone https://github.com/OpenRTM/OpenRTM-aist
 cd OpenRTM-aist/
 mkdir build
 cd build/
 cmake -DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN_FILE} -DVX_VERSION=${VX_VERSION} -DORB_ROOT=${ORB_ROOT} -DOMNI_VERSION=42 -DCORBA=omniORB -DVX_CPU_FAMILY=${ARCH} ..
 make

ただし、TOOLCHAIN_FILE、VX_VERSION 、ORB_ROOT、ARCHには以下の設定をしてください。

|TOOLCHAIN_FILE|VxWorks 6.6(カーネルモジュール、PowerPC)の場合は''../Toolchain-vxworks6.6-Linux.cmake''、それ以外の場合は''../Toolchain-vxworks6.cmake''|
|VX_VERSION|''vxworks-6.6''か''vxworks-6.9''|
|ORB_ROOT|omniORBのディレクトリ(例：/home/openrtm/omniORB-4.2.2)|
|VX_CPU_FAMILY|''ppc''(PowerPC)、''simlinux''(カーネルモジュール、シミュレータ)、''simpentium''(RTP、シミュレータ)|

RTPの場合はcmakeコマンドに''-DRTP=ON''を追加する必要があります。

 cmake -DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN_FILE} -DVX_VERSION=${VX_VERSION} -DORB_ROOT=${ORB_ROOT} -DOMNI_VERSION=42 -DCORBA=omniORB -DVX_CPU_FAMILY=${ARCH} -DRTP=ON ..
 cmake --build . --config Release


** VxWorks + ORBexpress
※現在のところ対応環境はVxWorks 6.6、PowerPCのみです。

以下のコマンドを入力してください。


 git clone https://github.com/OpenRTM/OpenRTM-aist
 cd OpenRTM-aist/
 mkdir build
 cd build/
 cmake -DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN_FILE} -DORB_ROOT=${ORB_ROOT} -DCORBA=ORBexpress ..
 make

TOOLCHAIN_FILE、ORB_ROOTには以下の設定をしてください。

|TOOLCHAIN_FILE|カーネルモジュールの場合は''../Toolchain-vxworks6.6-Linux.cmake''、RTPの場合は''../Toolchain-vxworks6.cmake''|
|ORB_ROOT|ORBexpressのディレクトリ(例：/home/openrtm/OIS/ORBexpress/RT_2.8.4_PATCH_KC1)|



** QNX 6.5 + omniORB
VMWare上のQNX 6.5でビルドします。
以下のページからISOイメージを入手してください。

- http://www.qnx.com/download/group.html?programid=16780

*** pkgsrc
まずはパッケージ管理システムpkgsrcをインストールします。
以下のコマンドでソースコードを入手してください。

 svn checkout --username ユーザ名 --password パスワード http://community.qnx.com/svn/repos/pkgsrc/HEAD_650/pkgsrc

ユーザー名、パスワードはQNXのアカウントのメールアドレス、パスワードを設定してください。

次に以下のコマンドでインストールします。
コマンドはsuで実行してください。

 (cd pkgsrc/bootstrap && ./bootstrap)
 (cd pkgsrc/misc/figlet && ../../bootstrap/work/bin/bmake install)

環境変数PKG_PATHを設定しておいてください。

 export PKG_PATH=ftp://ftp.netbsd.org/pub/pkgsrc/packages/QNX/i386/6.5.0_head_20110826/All/

*** libuuid
まずはlibuuidのビルドをします。
libuuid-1.0.3.tar.gzをダウンロードしてQNXに転送してください。

- https://sourceforge.net/projects/libuuid/files/

ファイルを展開してください。

 tar xf libuuid-1.0.3.tar.gz


libuuidのビルドにはsys/syscall.h、bits/syscall.h、asm/unistd.h、asm/unistd_32.h(もしくはasm/unistd_64.h)が必要になります。
ファイルを入手してlibuuid-1.0.3の下にコピーしてください。

 libuuid-1.0.3
         |-sys
         |   |-syscall.h
         |-bits
         |   |-syscall.h
         |-asm
         |   |-unistd.h
         |   |-unistd_32.h(もしくはunistd_64.h)
         |-(省略)   

以下のコマンドでビルド、インストールしてください。

 cd libuuid-1.0.3
 ./configure
 make
 make install
 cd ..



*** omniORB
まずはomniORB-4.2.3.tar.bz2を入手してQNXに転送してください。

- https://sourceforge.net/projects/omniorb/files/omniORB/

ファイルを展開してください。

 tar xf omniORB-4.2.3.tar.bz2

以下のファイルについて変更が必要です。

- configure
- /beforeauto.mk.in

まずconfigureについては2箇所の変更が必要です。
以下の*-*-nto-qnx)の行を追加してください。

 case "$host" in
   *-*-linux-*)   plat_name="Linux";    plat_def="__linux__";    os_v="2";;
   *-*-nto-qnx)   plat_name="Linux";    plat_def="__linux__";    os_v="2";;

以下のx86-pc-*)の部分を追加してください。

 case "$host" in
   i?86-*)   proc_name="x86Processor";     proc_def="__x86__";;
   x86-pc-*) proc_name="x86Processor"; proc_def="__x86__";;

mk/beforeauto.mk.inは以下の部分を変更してください。

 #OMNITHREAD_LIB += -lpthread #削除
 OMNITHREAD_LIB += -lsocket #追加

以下のコマンドでビルドします。

 ./configure
 make
 make install
 cd ..


*** OpenRTM-aist
OpenRTM-aistのビルドにはcmake、pkg-config、Python 2.7が必要です。

 /usr/pkg/sbin/pkg_add -v pkg-config-0.25nb1
 /usr/pkg/sbin/pkg_add -v cmake-2.8.5
 /usr/pkg/sbin/pkg_add -v python27-2.7.2

環境変数PKG_CONFIG_PATHを設定してください。

 export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig/

OpenRTM-aistのソースコードを入手してQNXに転送してください。

OpenRTM-aistのディレクトリに移動して以下のコマンドを実行します。

 mkdir build
 cd build/
 ln -s /usr/pkg/bin/python2.7 ./python
 export PATH=$PWD:$PATH
 cmake -DCORBA=omniORB ..
 cmake --build . --config Release -- -j$(nproc)
 cmake --build . --target install


** QNX 7.0 + omniORB
Ubuntu上にQNX Software Development Platform 7.0をインストールしてビルドします。
まずはQNX Software Centerをインストールしてください。

-  http://www.qnx.com/download/group.html?programid=29178

 sudo apt-get install libgtk2.0-0:i386
 chmod a+x qnx-setup-201808201144-lin.run
 ./qnx-setup-201808201144-lin.run

QNX Software Centerを起動してAdd InstallationからQNX Software Development Platformをインストールしてください。

 /home/openrtm/qnx/qnxsoftwarecenter/qnxsoftwarecenter

#ref(qnx9.png,80%,center)


*** libuuid
まずはlibuuidのビルドをします。

 wget https://jaist.dl.sourceforge.net/project/libuuid/libuuid-1.0.3.tar.gz
 tar xf libuuid-1.0.3.tar.gz


libuuidのビルドにはsys/syscall.h、bits/syscall.h、asm/unistd.h、asm/unistd_32.h(もしくはasm/unistd_64.h)が必要になります。
ファイルを入手してlibuuid-1.0.3の下にコピーしてください。

 cd libuuid-1.0.3
 mkdir sys
 cp /usr/include/x86_64-linux-gnu/sys/syscall.h sys
 mkdir asm
 cp /usr/include/x86_64-linux-gnu/asm/unistd.h asm
 cp /usr/include/x86_64-linux-gnu/asm/unistd_64.h asm
 mkdir bits
 cp /usr/include/x86_64-linux-gnu/bits/syscall.h bits


QNXクロスコンパイル環境設定のためにスクリプトを実行します。

 source ~/qnx700/qnxsdp-env.sh

以下のコマンドでビルドします。
qnx700のパスは適宜変更してください。

 ./configure --prefix=/home/openrtm/qnx700/target/qnx7/usr/ CC="qcc -V5.4.0,gcc_ntox86_64_gpp" CXX="q++ -V5.4.0,gcc_ntox86_64_gpp" AR=ntox86_64-ar RANLIB=ntox86_64-ranlib --host=x86_64-unknown-linux-gnu
 make
 make install
 cd ..

*** omniORB
まずはomniORBのソースコードを入手してください。

 wget https://jaist.dl.sourceforge.net/project/omniorb/omniORB/omniORB-4.2.3/omniORB-4.2.3.tar.bz2
 tar xf omniORB-4.2.3.tar.bz2 
 cd omniORB-4.2.3


Ubuntu上でomniidlをビルドする必要があります。
qnxsdp-env.shを実行していない環境でomniORBのビルドを行いインストールしてください。

 ./configure
 make
 make install

QNXでビルドするために

 #OMNITHREAD_LIB += -lpthread
 OMNITHREAD_LIB += -lsocket

以下のコマンドでビルドしてください。

 make clean
 ./configure --prefix=/home/openrtm/qnx700/target/qnx7/usr/  CC="qcc -V5.4.0,gcc_ntox86_64_gpp" CXX="q++ -V5.4.0,gcc_ntox86_64_gpp" AR=ntox86_64-ar RANLIB=ntox86_64-ranlib --host=x86_64-unknown-linux-gnu
 make
 make install

*** OpenRTM-aist

omniORB、uuidをpkg-configで検出するために環境変数PKG_CONFIG_PATHを設定してください。

 export PKG_CONFIG_PATH=/home/openrtm/qnx700/target/qnx7/usr/lib/pkgconfig

以下のコマンドでビルドします。

 git clone https://github.com/OpenRTM/OpenRTM-aist
 cd OpenRTM-aist/
 mkdir build
 cd build
 cmake -DCORBA=omniORB -DCMAKE_TOOLCHAIN_FILE=../Toolchain-QNX7.cmake -DCMAKE_INSTALL_PREFIX=/home/openrtm/qnx700/target/qnx7/usr/ ..
 cmake --build . --config Release -- -j$(nproc)


*** VMWareイメージの入手
VMWare用のイメージを入手するためには、QNX Software Centerでファイルをダウンロードします。

#ref(qnx10.png,80%,center)

QNX Software Development Platform->Reference Images->QNX SDP 7.0 x86-64 virtual machine for VMWareをインストールしてください。

#ref(qnx.png,80%,center)

インストールしたQNX_SDP.vmxをVMwareで開くと仮想マシンが起動します。