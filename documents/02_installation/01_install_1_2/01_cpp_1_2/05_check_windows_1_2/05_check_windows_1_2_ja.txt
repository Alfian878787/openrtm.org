// Title: 動作確認(Windows編)
#contents

** サンプルコンポーネントの場所

インストールまたはビルドが正常に終了したら、付属のサンプルで動作テストをします。
サンプルは、64bit版の場合、通常は以下の場所にあります。

-C:\Program Files\OpenRTM-aist\1.2.1\Components\C++\Examples
-OpenRTM-aist\examples (ソースからビルドした場合)

以下の手順で、サンプルコンポーネントセットSimpleIOを使用して、OpenRTM-aistが正しくビルド/インストールされているかを確認します。



** サンプル (SimpleIO)を使用した確認

RTコンポーネントConsoleInComp、ConsoleOutCompからなるサンプルセットです。
ConsoleInCompはコンソールから入力された数値をOutPort から出力するコンポーネント、ConsoleOutCompはInPortに入力された数値をコンソールに表示するコンポーネントです。これらは最も Simple なI/O(入出力)を例示するためのサンプルです。
ConsoleInCompのOutPortからConsoleOutCompのInPortへ接続し、これらの2つのコンポーネントをアクティブ化(Activate)することで動作します。

以下は、msiインストーラーでOpenRTM-aistをインストールした環境で、スタートメニューから各種プログラムを起動する前提で説明します。

*** RT System Editor、ネームサーバー起動
以下の手順に従ってRT System Editor、ネームサーバーを起動してください。

- [[OpenRTP起動手順:/ja/node/6653]]

*** サンプルコンポーネントの起動
ネームサーバー起動後、適当なサンプルコンポーネントを起動します。

Windows 10の場合は右下の[ここに入力して検索]に''C++_Examples''と入力して、サンプルのフォルダーを見つけ、それを開きます。

#ref(rtm7.png,60%,center)
CENTER:''ネームサーバーの起動を確認''


#ref(rtm8.png,80%,center)
CENTER:''サンプルコンポーネントフォルダー''

ここでは、「ConsoleIn.bat」「ConsoleOut.bat」をそれぞれダブルクリックして2つのコンポーネントを起動します。

** Windows Defenderからの警告

サンプルコンポーネントを起動しようとすると、Windows Defenderのファイアウォールにより[Windows セキュリティの重要な警告]ダイアログが表示されることがあります。[プライベート ネットワーク(ホームネットワークや社内ネットワークなど)(R)]にチェックを入れ[パブリックネットワーク(空港、喫茶店など)(非推奨)(U)]のチェックをはずして[アクセスを許可する(A)]をクリックしてください。この画面はWindows 10(build 1903)以外だと別の画面が表示されることがありますし、設定によっては表示されないこともあります。表示された場合は同様の設定をしてダイアログを閉じてください。
ここでは、「ConsoleIn.bat」「ConsoleOut.bat」をそれぞれダブルクリックして2つのコンポーネントを起動します。起動後数秒で下図のような2つのコンソール画面が開きます。

**　サンプルコンポーネント起動後の画面

起動後数秒で下図のような2つのコンソール画面が開きます。


#ref(rtm9.png,60%,center)
CENTER:''ConsoleInコンポーネントとConsoleOutコンポーネント''

**** コンポーネントが起動しない場合

コンポーネントが起動しない場合、いくつかの原因が考えられます。

***** コンソール画面が開いてすぐに消える

環境変数''RTM_VC_VERSION''、''OMNI_ROOT''、''RTM_ROOT''が設定されていないとRTCの起動に失敗します。
msiインストーラーでインストールした場合はOSを再起動すると解決する場合があります。


また、rtc.confの設定に問題があり、起動できないケースがあります。上記の''C++_Example''を用いて検索したフォルダー下のVCxx(Visual Studio 2019使用時はVC14)にある[rtc.conf]を開いて設定を確認してください。
例えば、corba.endpoint/corba.endpointsなどの設定が現在実行中のPCホストのIPアドレスとミスマッチを起こしている場合などは、CORBAが異常終了します。

以下のような内容(最低限の設定)にrtc.confを書きなおして試してみてください。

 corba.nameservers: localhost


***** ランタイムエラーが出て終了する

ライブラリなどが適切にインストールされていなかったり、設定されていないなどの原因でラインタイムエラーが発生する場合があります。その場合は下記の方法を試してみてください。
-再起動してみる
-OpenRTM-aistをすべてアンインストールし、再度インストールすることで改善される場合があります。

**** RTSystem Editorでのエディタ画面への配置

RT System Editorのツリー表示内の[localhost]‘の横の[>]をクリックし、そして&ref(icon_db.png );アイコンの横の[>]をクリックすると、先ほど起動した2つのコンポーネントが登録されていることがわかります。

#ref(rtm10.png,60%,center)
CENTER:''ConsoleInコンポーネントとConsoleOutコンポーネント''

システムを編集するエディタ画面を開きます。上部の[Open New System Editor]ボタン&ref(icon_open_editor_ja.png,150%); をクリックすると、中央のペインにエディタ画面が開きます。

左側のネームサービスビューから&ref(icon-rtce.png,200%);のアイコンで表示されているコンポーネント(2つ)を中央のエディタ画面にドラッグアンドドロップします。

#ref(rtm11.png,80%,center)
CENTER: ''コンポーネントをエディタに配置''


**** 接続とアクティブ化

ConsoleIn0コンポーネントの右側にはデータが出力されるOutPort &ref(rtse_outport_icon.png, /ja/node/794); が、ConsoleOut0コンポーネントの左側にはデータが入力されるInPort &ref(rtse_inport_icon.png, /ja/node/794); が、それぞれ配置されています。

#ref(rtm13.png,80%,center)
CENTER: ''データポートの接続''

これら InPort/OutPort(まとめてデータポートと呼びます)を接続します。OutPortからInPort(またはInPortからOutPort)へドラッグランドドロップすると、図のようなダイアログが現れますので、デフォルト設定のまま[OK]ボタンをクリックします。

#ref(rtm12.png,80%,center)
CENTER: ''データポート接続ダイアログ''


2つのコンポーネントの間に接続線が現れます。次に、エディタ上部メニューの[All Activate]ボタン &ref(rtm14.png);をクリックし、これらのコンポーネントをアクティブ化します。
アクティブ化されると、コンポーネントが緑色に変化します。

#ref(rtm15.png,center)
CENTER: ''アクティブ化されたコンポーネント''




コンポーネントがアクティブ化されるとConsoleInコンポーネント側のコンソール上の表示が

 Please input number: 

というプロンプト表示に変わりますので、適当な数値(short int の範囲内:32767以下)を入力しEnterキーを押します。
すると、ConsoleOut側のコンソール画面では、入力した数値が表示されます。ConsoleInコンポーネントからConsoleOutコンポーネントへデータが転送されたことがわかります。

以上で、コンポーネントの基本動作の確認は終了です。


** 他のサンプル

インストーラーには、このほかにもいくつかのサンプルコンポーネントが付属しています。これらのコンポーネントも同様に、ダブルクリックで起動、そしてRTSystemEditorを用いてポート間を接続し、アクティブ化することで試すことができます。

付属しているコンポーネント起動用バッチファイルのリストと簡単な説明を以下に示します。

|LEFT:250|LEFT|c
|ConsoleIn.bat|LEFT:コンソールから入力された数値をOutPortから出力する&color(default){ConsoleInコンポーネント}; を起動します。ConsoleOutに接続して使用します。|
|ConsoleOut.bat|InPortに入力された数値をコンソールに表示する&color(default){ConsoleOutコンポーネント};  を起動します。ConsoleInに接続して使用します。|
|SeqIn.bat|ランダムな数値(Short、Long、Float、Doubleとそのシーケンス型)を出力する&color(default){SequenceInComponentコンポーネント};を起動します。SequenceOutComponentに接続して使用する。|
|SeqOut.bat|InPortに入力される数値(Short、Long、Float、Doubleとそのシーケンス型)を表示する&color(default){SequenceOutComponent};を起動します。SequenceInComponentに接続して使用します。|
|MyServiceProviderComp.bat|MyService型のサービスを提供する&color(default){MyServiceProviderコンポーネント}; を起動します。MyServiceConsumerに接続して使用します。|
|MyServiceConsumerComp.bat|MyService型のサービスを提供する&color(default){MyServiceConsumerコンポーネント}; を起動します。MyServiceProviderに接続して使用します。|
|ConfigSample.bat|Configuration機能の使用例のサンプル&color(default){ConfigSampleコンポーネント}; を起動します。RtcLinkからConfigurationを変更してConfigurationの挙動を理解するためのサンプルです。|
|Composite.bat|複合コンポーネント作成サンプル&color(default){PeriodicECSharedComponentコンポーネント}; を起動します。Sensor、Controller、Motorの3つサブ・コンポネントを複合しています。 ConsoleInなどのコンポーネント接続して使ってみると良いでしょう。|



&br;
