// Title: CCM
* CCM (CORBA Component Model)

CCM provides a server-side component model of CORBA and provides a framework for constructing component environment like EJB on CORBA environment.
//CCMはCORBAのサーバサイドのコンポーネントモデルを提供するとともに、CORBA環境上にEJBのようなコンポーネント環境を構築するためのフレームワークを提供する。

** Components
//** コンポーネント
There are various definitions of components, it is said that it is generally "unit of reusable software".
In M. Collins-Cope et al. Definition, those that satisfy the following four requirements are called components, and this definition seems to be widely used.
//コンポーネントの定義には様々あり、一般的に「再利用可能なソフトウェアの単位」であると言われている。
//M.Collins-Copeらにる定義では、以下の４つの要件を満たすものをコンポーネントと呼びこの定義が広く用いられているようである。

| Self-completion/self-descriptiveness | Independent function exists as standalone, declaratively the interface is defined. In addition, standard methods for operation and operation are defined, and the mechanism for this is clearly defined. |
| Dynamic functions can be added and changed | Properties and events etc can be set and changed from outside the component. Also, a standard method for that is given. |
| Interface transparency | Based on the interface definition, a linkage method at the binary level is given. |
| Support loose coupling with other components | Connected via a framework such as a container or an assembly environment without having a direct communication path with other components. |
//|自己完備性／自己記述性 | 独立した機能単体として存在し、 宣言的にインターフェースが定義されている。また、動作や操作に 標準的な方法が定められており、そのためのメカニズムが明確に定義されている。|
//|動的な機能追加、変更が可能 | コンポーネントの外部からプロパティやイベントなどの設定、変更ができる。また、そのための標準的な方法が与えられている。 |
//|インターフェースの透明性 | インターフェース定義に基づいて、バイナリレベルでの連携方法が与えられている。 |
//|他のコンポーネントとの疎結合の支援 | 他のコンポーネント との直接的な通信経路を持たず、コンテナやアセンブリ環境などのフレームワークを介して接続される。 |

"A New Distributed Environment in which CORBA Components Open" Junichi Suzuki, Dr. Dobbs Journal Japanese Edition April 1999, pp. 150-158.
//『 CORBA components が開く新しい分散環境 』 鈴木 純一／著, ドクター・ドブズ・ジャーナル日本語版 1999 年 4 月号, pp.150-158．

** Component model
//** コンポーネントモデル 
|LEFT:150|LEFT|c
| Facet | Indicates that the interface of the component is made public to the outside. The client can acquire the published interface by introspection and call the method of the interface. |
| Receptacle | Indicates that the interface of another component can be connected. Receptacle types include Simplex Receptacle that can connect one interface and Multiplex Receptacle that can connect multiple interfaces to the same Receptacle.|
| Event Source | Indicates to issue a specific event. As the type of event notification, there is an Emitter that can notify only one at the same time as Publisher which can make one-to-many notification. |
| Event Sink | Indicates to receive a specific event. |
| Attribute | Indicates the attributes of the component. It has the same meaning as the attribute of a normal CORBA object.|
//| Facet | Indicates that the interface of the component is made public to the outside. The client can acquire the published interface by introspection and call the method of the interface. |
//| Receptacle | Indicates that the interface of another component can be connected. As Receptacle types, there is Simplex Receptacle which can connect one interface and Multiplex Receptacle which can connect multiple interfaces to the same Receptacle.|
//| Event Source | Indicates to issue a specific event. As the type of event notification, there is an Emitter that can notify only one at the same time as Publisher which can make one-to-many notification. |
//| Event Sink | Indicates to receive a specific event. |
//| Attribute | Indicates the attributes of the component. It has the same meaning as the attribute of a normal CORBA object. |

** Added keywords for CIDL
//** CIDL のための追加されたキーワード 
- component
- consumes
- emits
- eventtype
- finder
- getraises
- home
- import 
- multiple
- primarykey
- provides
- publishes
- setraises
- typeid
- typeprefix
- uses

** XML file for Deployment and Configuration
//** Deployment と Configuration のためのXMLファイル

| Descriptor | extension |
| Component Package Descriptor: | .cpd |
| Component Implementation Descriptor: | .cid |
| Implementation Artifact Descriptor: | .iad |
| Component Interface Descriptor (CORBA Component Descriptor): | .ccd |
| Component Domain Descriptor | .cdd |
| Deployment Plan Descriptor (Component Deployment Plan): | .cdp |
| Top Level Package Descriptor | package.pcd |
| ZIP file containing all of above + binaries | .cpk |

** Component declaration
CCM components are declared according to the following syntax using component declarators based on extended IDL.
//** コンポーネントの宣言 
//CCM のコンポーネントは、拡張 IDL に基づき component 宣言子を用いて以下の構文に従って宣言される。

 component <component_name> [ : <base_name> ]
     [ supports <interface_name> [, <interface_name>] * ]
 {
      <attribute declaration> *;
      <port declaration> *;
 };  

<component_name> following the component describes the name of the component to be declared.
As an optional declaration, a component can inherit a single component (<base_name>).
It is also possible to have several IDL defined interfaces (<interface_name>) at the same time by support declarator, which are called supported interface.
You can declare component attributes (<attribute declaration>) and Ports (<port declaration>) in the body of the component.
//component に続く <component_name> は宣言するコンポーネントの名前を記述する。
//オプション的な宣言として、コンポーネントは一つのコンポーネント( <base_name> )を継承することがでる。
//また、support 宣言子により同時にいくつかの IDL で定義したインターフェース( <interface_name> )を持つこともでき、これらは supported interface と呼ばれる。
//コンポーネントの本体には、コンポーネントの属性( <attribute declaration> ) や Ports ( <port declaration> )を宣言することができる。

This declaration is equivalent to declaring as an interface equivalent interface equivalent to IDL 2 as follows.
//この宣言は IDL2 と等価なインターフェース equivalent interface として以下のように宣言するのと等価である。

 interface <component_name>
     : Components::CCMObject, [<base_name>, <interface_name>, <interface_name>] * ]
 {
 };  

Therefore, <base_name> is the component name and <interface_name> is distinguished as the interface name, but in the equivalent interface they are all interfaces, resulting in these inheritance.

For example, you can declare a HelloWorld component with a Hello interface as follows.
//したがって、<base_name> はコンポーネント名であり、<interface_name> はインターフェース名として区別されるが、equivalent interface においてこれらはすべて interface となり、これらの継承に帰着される。

//例えば、以下のように Hello インターフェースをもった HelloWorld コンポーネントを宣言することができます。 



** References
//** 参考文献 
//+ [[CORBA Component Model 入門 (第一回)>http://www.ogis-ri.co.jp/otc/hiroba/technical/CCM/step1/index.html]]
//+ [[CORBA Component Model 入門 (第ニ回)>http://www.ogis-ri.co.jp/otc/hiroba/technical/CCM/step2/index.html]]
+ [[『 CORBA Component Model Tutorial 』 OMG Document ccm/02-04-01>http://www.omg.org/cgi-bin/doc?ccm/2002-04-01]]
+ [[Lightweight CORBA Component Model ptc/04-06-10>http://www.omg.org/docs/ptc/04-06-10.pdf]]
