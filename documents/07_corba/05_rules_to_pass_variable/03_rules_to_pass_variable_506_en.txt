// Title: Variable passing rule
#contents
#clear
** Structure/Object reference
//* 構造体

In C++, the structure of CORBA is mapped to the structure "struct".
//CORBA の構造体は C++ において、構造体 "struct" にマッピングされる。
 // -*- IDL -*-
 struct Profile {
   short short_value;
   long  long_value;
 };

 // -*- C++ -*-
 struct Profile {
   CORBA::Short short_value;
   CORBA::Long  long_value;
 };

 class Profile_var {
   
 };

- Fixed length structure
//- 固定長の構造体

- Variable length structure
//- 可変長の構造体

If the structure contains variable length members (string, wstring, sequence, (struct with variable length members, union with variable length member), the structure is considered variable length data.
In this case, C ++ code different from the fixed length structure is generated, and handling in return value and out parameter is different.
//構造体に可変長のメンバー (string, wstring, sequence, (可変長メンバを持つ struct, 可変長メンバを持つ union) が含まれていると，構造体は可変長データとみなされます。
//この場合、固定長の構造体とは異なる C++ コードが生成され、戻り値やoutパラメータにおける扱いが異なります。

- _var type
The IDL compiler automatically generates C ++ structures and _ var type classes from the structure in IDL.
The _var type class behaves like a smart pointer, and when you use the _var class as a variable length structure, the memory allocated to variable length members is automatically managed.
//-- _var型
//IDL コンパイラは IDL における構造体から、C++ の構造体と _var 型のクラスを自動的に生成します。
//_var 型クラスはスマートポインタのように振る舞い、可変長の構造体として _var クラスを使用する場合、可変長のメンバーに割り当てられるメモリーは自動的に管理されます。 

-- If assignment is made from a variable of type _var (var1, for example) to another variable of type _var (var2), the ownership of the pointer is moved to var 2, then var 1 is initialized or assigned It can not be used until it is broken.
-- When the structure goes out of scope, all memory associated with the variable length member is automatically released. However, if the _var type variable already transferred ownership comes out of the scope, the original data will not be released. (We already transferred ownership.)
-- If the initialized or assigned structure is reinitialized or assigned again, the memory associated with the original data is automatically released.
-- If an object reference is assigned to a variable length member, a copy of that object reference is created. If a pointer is assigned to a variable length member, no copy is created.
//-- _var 型の変数(例えば var1)から他の_var型の変数(var2)に代入が行われた場合には、そのポインタの所有権が var2 に移り、その後 var1 は初期化もしくは代入が行われるまで、使用することはできません。
//-- 構造体がスコープの外に出ると，可変長のメンバーに関連付けられていたすべてのメモリは自動的に解放されます。 ただし、すでに所有権を他に譲渡している_var型変数がスコープから出る場合、元のデータに対しては開放は行われません。(所有権を既に譲渡しているので。)
//-- 初期化もしくは代入された構造体に対して，再び初期化または代入が行われた場合，元のデータに関連付けられていたメモリは自動的に解放されます。
//-- 可変長のメンバーにオブジェクトリファレンスが代入される場合は，必ずそのオブジェクトリファレンスのコピーが作成されます。可変長のメンバーにポインタが代入される場合，コピーは作成されません。

*** _ var type
**** Transformation constructor (T_ptr)
//***_var 型
//****変換コンストラクタ(T_ptr)

- Implementation example
//-実装例
  _CORBA_ObjRef_Var(T_ptr p) : pd_objref(p) {}

The ownership of object reference of type _ptr moves to type _ var, so there is no increase or decrease of reference count.
//The ownership of object reference of type _ptr moves to type _ var, so there is no increase or decrease of reference count.

 MyObject_ptr ptr = obj->get_myobject();
 // ptr must be released at the proper timing
 MyObject_var var(ptr);
 // Ownership moved to var, so you do not need to release ptr
 // The reference count is decremented when var is dismantled, such as going out of scope
 
**** Transformation constructor (const T_var&)
- Implementation example
//****変換コンストラクタ(const T_var&)
//-実装例
 Object_var(const T_var& p) : pd_ref(T::_duplicate(p.pd_ref)) {}

The ownership of the object reference of _var type of the assignment source is copied.
//代入元の_var型のオブジェクト参照の所有権はコピーされる。

 MyObject_var var0 = obj->get_myobject();
 // var 0 has ownership
 MyObject_var var1(var0);
 // Reference count is incremented and var 1 also owns ownership

**** Transformation constructor (const T_member)
- Implementation example
//****変換コンストラクタ(const T_member) 
//-実装例

**** in argument and in () function
It simply returns _ptr type pointer of object reference.
Movement of ownership does not occur.
//****in引数とin()関数
//単純にオブジェクト参照の_ptr型ポインタを返す。
//所有権の移動は起こらない。

- Implementation example
//-実装例
 T_ptr  in() const { return pd_objref; }

It is usually used to pass an object reference to the ''in'' argument of a function.
Functions given object references do not have ownership and should not be 'released' in the function.
After returning from the function, the _var type variable still holds ownership, and the object is ''released'' when the _var type variable is disassembled.
//通常、関数の''in''引数にオブジェクト参照を渡す際に使用する。
//オブジェクト参照を与えられた側の関数は、所有権を持たないため関数内で''release''してはいけない。
//関数から戻ってきたあと、_var型変数に依然として所有権が保持されており、_var型変数の解体時にオブジェクトは''release''される。

When defining a function that takes an object reference as an ''in'' argument, it is defined as an argument of type _ptr. Furthermore, within a function, just call the operation of the object, do not do ''release'' etc.
Also, if you want to save an object reference in a function somewhere (global variable, static variable, object member etc.), you need to duplicate the duplicate function to copy ownership.
//オブジェクト参照を''in''引数として受け取る関数を定義する場合は、_ptr型の引数として定義する。さらに、関数内では、そのオブジェクトのオペレーションを呼ぶだけで、''release''等は行ってはいけない。
//また、関数内でオブジェクト参照をどこか(グローバル変数、static 変数、オブジェクトのメンバー等)に保存したい場合は、所有権をコピーするため duplicate関数で複製する必要がある。

-Example of use
//-使用例
 void myfunc(MyObject_ptr obj)
 {
   obj->function();
   CORBA::release(obj); // ×Do not do this
   m_obj = obj; // ×I do not own ownership
   m_obj = MyObject::duplicate(obj); // ○Duplicate ownership
 }
 
 {// Another context
   MyObject_var obj(hoge->get_object());
   myfunc(obj.in()); // Transfer of ownership does not occur
 }
 // Since the scope has passed, the reference count is decremented

**** out argument and out () function
Returns the currently owned reference as ''release'' (decrement the reference count) and sets the reference pointer to nil and returns it.
That is, if an object reference is held before the '' out () '' function call, the ownership is abandoned and the reference is discarded.
//****out引数と out()関数 
//現在所有している参照を''release''(参照カウントをデクリメント)して、リファレンスのポインタをnilにセットして返す。
//すなわち、''out()''関数呼び出し以前にもしオブジェクト参照を保持している場合はその所有権を放棄し参照は破棄される。

- Implementation example
//-実装例
 T_ptr& out() {
    T_Helper::release(pd_objref);
    pd_objref = T_Helper::_nil();
    return pd_objref;
 }

It is usually used to pass an object reference to the ''out'' argument of a function. That is, after returning from the function, it is expected that a new object reference is held in this variable.
At this time, ownership of the object reference is assumed to be held in this variable.
On the function side passed the variable with ''out()'', it is necessary to generate or duplicate an object reference in some way and pass ownership to the argument.
//通常、関数の''out''引数にオブジェクト参照を渡す際に使用する。すなわち、関数から戻ってきたあと、この変数に新たにオブジェクト参照が保持されていることが期待される。
//このとき、オブジェクト参照の所有権はこの変数に保持されていると考える。
//''out()''で変数を渡された関数側では、何らかの形でオブジェクト参照を生成または複製して、引数に所有権を渡す必要がある。

When defining a function that takes an object reference as an ''out'' argument, it is defined as an argument of _ptr type reference. Within a function, an argument is always a nil object reference, and it is normally expected to substitute some object for ownership.
//オブジェクト参照を''out''引数として受け取る関数を定義する場合は、_ptr型参照の引数として定義する。関数内では、引数は必ずnilオブジェクト参照であり、かつ通常何らかのオブジェクトを所有権を与えて代入することが期待される。

-Example of use
//-使用例
 void myfunc(MyObject_ptr& obj)
 {
   assert(CORBA::is_nil(obj)); // Always a nil object
   obj->function(); // Because it is nil, I can not call operations
 
   // m_obj is a _var type member variable
   obj = m_obj; // ×You do not duplicate ownership.
   // After return, it may be freely released outside the function.
 
   obj = MyObject::duplicate(obj); // ○I own copies of ownership.
   // After return, even if it is released outside the function, the object reference is not broken.
   return;
 }
 
 {// Another context
   MyObject_var obj;
   obj = get_object(); // △Since it is used as an out variable, it is better not to insert anything before passing it
   myfunc(obj.out());
   // Object should have been assigned and returned
   assert(!CORBA::is_nil(obj));
   obj->function();
 }
 // Since the scope has passed, the reference count is decremented.
 
****inout()
Returns a pointer reference to the reference.

-Implementation
 T_ptr& inout()    { return pd_objref; }

It is usually used to pass an object reference to the '' inout '' argument of a function.
That is, within the function, it is expected that some object reference is included in the argument, and the ownership of the object shifts to the function side. Also, the function is expected to give some object reference to this argument and return it, giving arguments, ie ownership of the calling variable.
In the function, when setting an object reference newly as an argument, it is necessary to first generate '' release '' and then create or duplicate a new object reference and pass ownership to the argument.
//通常、関数の''inout''引数にオブジェクト参照を渡す際に使用する。
//すなわち、関数内では何らかのオブジェクト参照が引数に入っていることが期待され、オブジェクトの所有権は関数側に移る。また、関数は何らかのオブジェクト参照をこの引数に与えて返すことが期待され、引数すなわち呼び出し元の変数に所有権を与える。
//関数内では引数にオブジェクト参照を新たにセットする場合は、まず''release''してから新たなオブジェクト参照を生成または複製して引数に所有権を渡す必要がある。

Functions that take object references as '' inout '' arguments are not highly recommended from a design standpoint. If you need to define a function to take as an '' inout '' argument, define it as an argument to _ptr type reference.
//オブジェクト参照を''inout''引数として取る関数は、設計の観点からあまり推奨されない。もし、''inout''引数として取る関数を定義する必要がある場合は、_ptr型参照の引数として定義する。

-Example of use
//-使用例
 void myfunc(MyObject_ptr& obj)
 {
   if (!CORBA::is_nil(obj))
   {
     obj->function(); // If obj is not nil, you can call the operation.
   }
 
   CORBA::release(obj); // The responsibility to release is in this function
   /*
     * Within this function, only if there is a new object reference in obj,
     * By assigning to the _var variable immediately after receiving the argument,
     * Decrement the reference count automatically at the end of the function
     * You may use a technique.     
     * MyObject_var deleter = obj;
//    * この関数内で、obj に新たなオブジェクト参照がある場合に限り、
//    * 引数を受け取った直後に、_var変数に代入しておくことで、
//    * 関数終了時に自動的に参照カウントをデクリメント
//    * するテクニックを使用してもよい。
//    * MyObject_var deleter = obj;
    */
 
   // Make it MyObject_var m_obj
   obj = m_obj; // × I do not duplicate ownership
   // After return, it may be released outside the function.
   obj = MyObject::_duplicate(m_obj); // ○ obj was also given ownership of MyObject
   // After return, even if it is released outside the function, the object reference is not broken.
 }
 
 {// Another context
   MyObject_var obj;
   obj = get_object(); // obj has ownership
   myfunc(obj); // Released in function
   // The one pointed by obj may be interchanged.
 }
 // Since the scope has passed, the reference count is decremented.


****_retn()
Abandon ownership of the object reference currently held and return a pointer.
//現在持っているオブジェクト参照の所有権を放棄してポインタを返す。

 T_ptr _retn() {
    T_ptr tmp = pd_objref;
    pd_objref = T_Helper::_nil();
    return tmp;
 }

It is usually used when returning an object reference to the return value of a function.
Since ownership passes to the caller of the function, the caller is responsible for discarding object references. Therefore, it needs to be released on the caller side or received with the _var type variable.
Conversely, when returning an object reference by return value, since the reference always decrements the reference count by release on the caller side, it is necessary to duplicate the ownership by _duplicate () etc. within the function.
//通常、関数の戻り値にオブジェクト参照を返す場合に使用される。
//所有権は関数の呼び出し側に渡るので、呼び出し側ではオブジェクト参照を破棄する責任がある。したがって、呼び出し側で release するか、_var型変数で受ける必要がある。
//逆に、戻り値でオブジェクト参照を返す場合、呼び出し側では必ず release により参照カウントがデクリメントされるため、関数内では_duplicate()などで所有権を複製しておく必要がある。

-Example of use
//-使用例
 MyObject_ptr myfunc()
 {
   MyObject_var ret;
   ret = m_obj; // ×Ownership shifts to ret.
   // After return, it may be released outside the function.
 
   ret = MyObject::_duplicate(m_obj); // ○Reproduction of ownership
   // Even if release is called after returning, m_obj keeps ownership.
 
   return ret._retn();
 }
 
 { // Another context
   MyObject_var obj;
   obj = myfunc(); // Obtain ownership of the object
   obj->function();
 
   MyObject_ptr ptr;
   ptr = myfunc(); //Obtain ownership of the object
   ptr->function();
 
   CORBA::release(ptr); // Decrement reference count
  }
  // Since the scope has passed, the reference count is decremented

**** Rule summary
//****規則のまとめ
|LEFT:85|LEFT:85|LEFT:190|LEFT|c
| Function | type | release responsibility | in function |
| in | T_ptr | Caller | Operation call |
| out | T_ptr & | Caller side | _duplicate assignment |
| inout | T_ptr & | in: function, out: caller side | after release, _duplicate assignment |
| _retn | T_ptr | Caller side | _duplicate and return |
//|関数 | 型     |    release責任      | 関数内                    |
//|in   | T_ptr  | 呼出側              | オペレーション呼出        |
//|out  | T_ptr& | 呼出側              | _duplicate 代入           |
//|inout| T_ptr& | in:関数, out:呼出側 | release後, _duplicate代入 |
//|_retn| T_ptr  | 呼出側              | _duplicateしてreturn      |

*** Reference count with substitution of _var type, _ptr type
**** Assigning _var type to _ptr type
//*** _var型,_ptr型の代入でのリファレンスカウント
//**** _ptr型への_var型の代入

Assignment to a pointer.
//ポインタへの代入。

No replication, no release.
//複製なし、解放せず。

-Example of use
//-使用例

 { 
  MyObject_var var;
  var = myfunc(); // Obtain ownership of the object
 
  MyObject_ptr ptr
  ptr = MyObject::_duplicate(var); //Obtain ownership of object (Increment reference count)
 
  // ptr = var;
  // This can cause reference count error. After calling, ptr and var are the same object
  // but no reference count maintenance is done. var maintains possession of its target object
  / / You do. Also, ptr was the only pointer to the object or proxy it was previously pointing to
  //, a memory leak occurs.
 
  CORBA::release(ptr); // Decrement reference count
 }
 //As for var, the reference count is decremented because it passed the scope

**** _ptr type assignment to type _var
//**** _var型への_ptr型の代入

It is released () for the object held by _var,
It is not duplicate () for _ptr type objects passed as arguments.
//_var が保有しているオブジェクトに対して release() されるが、
//引数で渡された _ptr型のオブジェクトに対しては duplicate() されない。

No duplication, release.
//複製なし、解放あり。

- Implementation (omniORB)
//-実装(omniORB)

  inline T_var& operator= (T_ptr p) {
    T_Helper::release(pd_objref);
    pd_objref = p;
    return *this;
  }

-Example of use
//-使用例

 { 
  MyObject_ptr ptr;
  ptr = myfunc(); // Obtain ownership of the object
 
  MyObject_var obj;
  obj = MyObject::_duplicate(ptr); //Obtain ownership of object (Increment reference count)
 
  CORBA::release(ptr); // Decrement reference count
 }
 // With respect to obj, the reference count is decremented because it passed the scope

**** Assigning _var type to _var type
//**** _var型への_var型の代入

Release () is called on the object held by _var,
Also, duplicate () is called on the object passed in the argument.
//_var が保有しているオブジェクトに対して release() がコールされ、
//かつ、引数で渡されたオブジェクトに対しても duplicate() がコールされる。

There is duplication, release.
//複製あり、解放あり。

- Implementation (omniORB)
//-実装(omniORB)

  inline T_var& operator= (const T_var& p) {
    if( &p != this ) {
      T_Helper::duplicate(p.pd_objref);
      T_Helper::release(pd_objref);
      pd_objref = p.pd_objref;
    }
    return *this;
  }

-Example of use
//-使用例

 { 
  MyObject_var var1;
  var1 = myfunc(); // Obtain ownership of the object
 
  MyObject_var var2;
  var2 = var1; //Obtain ownership of object (reference count is automatically incremented)
 
  } // For var 1, var 2, the reference count is decremented since it has passed the scope

*** Reference count with _narrow ()
//*** _narrow()でのリファレンスカウント

In the process of _narrow () processing, when the call to _narrow () succeeds, the reference count of the target object is incremented, but if it fails it is not incremented.
//_narrow()処理の過程において、_narrow()の呼び出しが成功した場合、その対象オブジェクトのリファレンスカウントはインクリメントされるが、失敗した場合はインクリメントされない。

Decrement is not performed.
//デクリメントは行われない。

- Implementation (RTCSK.cc)
//-実装(RTCSK.cc)

 RTC::RTObject_ptr
 RTC::RTObject::_narrow(::CORBA::Object_ptr obj)
 {
   if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
   _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
   return e ? e : _nil();
 }

- Implementation (omniObjRef.cc)
//-実装(omniObjRef.cc)

 void*
 omniObjRef::_realNarrow(const char* repoId)
 {
  // Attempt to narrow the reference using static type info.
  void* target = _ptrToObjRef(repoId);
 
  if( target ) {
    if (!lid ||
	(lid && !lid->deactivated() && lid->servant() &&
	 lid->servant()->_ptrToInterface(repoId))) {
 
      omni::duplicateObjRef(this);
    }
    else {
      omniObjRef* objref;
      omniIOR*    ior;
 
      {
	ior = pd_ior->duplicateNoLock();
      }
 
      {
	objref = omni::createObjRef(repoId,ior,1,0);
      }
    }
  }
  else {
    if( _real_is_a(repoId) ) {
      omniObjRef* objref;
      omniIOR* ior;
 
      {
	ior = pd_ior->duplicateNoLock();
      }
 
      {
	objref = omni::createObjRef(repoId,ior,1,_identity());
      }
 
      }
    }
  }
  return target;
 }


*** Rules
**** Client side
//*** 規則 
//**** クライアント側
If the client receives an object reference from the call, the client must release it when that object reference is no longer needed.
//クライアントが呼び出しからオブジェクト参照を受信するならば、そのクライアントはそのオブジェクト参照が不要となったときにはそれを開放しなくてはならない。
//(引用：　『CORBA分散オブジェクト　Orbixを用いて』　P.98 オブジェクト参照のためのメモリ管理)

**** Server side
//**** サーバー側 
The ownership of the reference passed to the caller is abandoned (that is, its reference count is decremented by one, so it is normal to call the appropriate _duplicate () function before returning the reference)
//呼び出し側に渡す参照の所有権は放棄される(つまり、その参照カウントは一つデクリメントされる。したがって、通常は、参照を返す前に適当な_duplicate()関数を呼び出すことになる)
//(引用：　『CORBA分散オブジェクト　Orbixを用いて』　P.98 オブジェクト参照のためのメモリ管理)

//**** 参考文献
//- 『CORBA分散オブジェクト　Orbixを用いて』　著: ショーン・ベーカー　出版社: ピアソン・エデュケーション
