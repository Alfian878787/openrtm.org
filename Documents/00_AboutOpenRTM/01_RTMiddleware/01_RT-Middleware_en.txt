#contents
#clear

//** RTミドルウエア (RTM)
** RT-Middleware  (RTM)

//RTミドルウエア (RT-Middleware: RTM) とは、ロボット機能要素 (RT機能要素)のソフトウエアモジュールを複数組み合わせてロボットシステム (RTシステム)を構築する為のソフトウエアプラットフォームを指す一般名称です。
//OpenRTM-aist は RTミドルウエア実装の一つであり、''Open''-source and open architecture ''R''obot ''T''echnology ''M''iddleware implemented by ''AIST'' (産業技術総合研究所) の略称です。
RT Middleware (RT-Middleware: RTM) is a name that refers to a software platform for constructing a robot system (RT system) by combining multiple software modules of robot functional elements (RT function elements).
OpenRTM-aist is one of RT middleware implementations, It stands for '' Open '' - source and open architecture '' R''obot '' T''chnology '' M '' iddleware implemented by '' AIST '' ( National Institute of Advanced Industrial Science and Technology).

//RTシステムを構成するRT機能要素とは、あるまとまった機能を提供するロボット構成要素で、例えばサーボモーターやセンサー、カメラといったデバイス単位であったり、あるいはこうしたデバイスの組み合わせにより実現される移動台車、アームなども RT機能要素として捉える事ができるでしょう。
The RT function elements in the RT system are robot components - each one provides a certain function. For example, a component handle a device such as a servo motor, a sensor, a camera or th the like. Also, a combination of such devices like a mobile car or a robot arm can be implemented as an RT function element.

//また、ハードウエアに結びついているものだけでなく、制御アルゴリズム、画像処理アルゴリズムといった、ソフトウエアのみで構成されるものも RT機能要素と考えることができます。
//下図に示すように、モジュール化された RT機能要素を階層的に組み合わせることで、ロボットシステム構築を容易にするためのプラットフォームが RTミドルウエアです。
In addition to what is tied to hardware, RT function element can be tied only to software such as a control algorithm and an image processing algorithm.
RT Middleware is a platform for supporting easy construction of robot systems by combining hierarchically modularized RT function elements as shown below.

#ref(rtsystem_integration_en.png,50%,center)
//CENTER: ''RTミドルウエアによるRTシステムインテグレーション''
CENTER: ''RT system integration by RT middleware''


//** RT コンポーネント (RTC)
** RT Component (RTC)

//RTミドルウエアでは、RT機能要素をソフトウエアモジュール化したものを RTコンポーネント(RT-Component: RTC)と呼びます。RTコンポーネントには、他の RTコンポーネントとデータをやり取りしたり、通信したりする為のポートと呼ばれるインターフェースを使用します。
In RT middleware, the RT function element is made into a software module is called as "RT component (RT-Component: RTC)  RT component has an interface called "Port" for exchanging data and communicating with other RT components.

//図に RTC と RTM の関係を示します。上述したように、RTC はあるひとまとまりの機能をモジュール化したソフトウエアの断片であり、その実体は RTM 上で実行される共有オブジェクト (shared object)、DLL (dynamic link library) です。
//RTC開発者は、新たに開発した制御アルゴリズムのコードや既存のライブラリコード等(コアロジック・コードと呼ぶ)を、RTCBuilder等のツールによって自動生成されるRTCの雛型コード内に埋め込み、コンパイル(スクリプト言語では不要)することで、RTCを作成します。
The relationship between RTC and RTM is shown in the above figure. As mentioned in the above, RTC is a piece of software that is modularized to a set of functions into a unit, its entity is a shared object or DLL(Dynamic Link Library) executed on RTM.
The RTC developer embeds the code of user own control algorithm, the existing library code, etc. (called as "Core logic code") in the RTC template code automatically generated by the tool such as RTCBuilder, then it is compiled (in script language case, it is unnecessary) to create an RTC.


#ref(rtm_and_rtc_en.png,40%,center)
//CENTER: ''RTC(RTコンポーネント)とRTM(RTミドルウエア)''
CENTER: ''RTC(RTComponent) and RTM (RTMiddleware)''

//** モジュールの分割と統合
** Split and integrate modules

//RTシステムは、複数のコンポーネントのポートをつなぎ合わせ、それぞれのRTコンポーネント機能の集合体として構築されます。ここで例として対話・認識システムを考えてみます。
//対話・認識システムは、ユーザーの声や表情を観測・認識して、音声や身振り手振りなど用いてユーザーと対話する機能を持つシステムで、以下のサブコンポーネントから構成されているとします。
The RT system connects the ports of multiple components and is constructed as a collection of each RT component functions. For example, let's consider an interactive recognition system. 
The interactive recognition system is a system that observes and recognized the user's voice and face expression and then communicates with the user by using voice and the gesture. It was consists of the following subcomponents.

//- カメラコンポーネント
//- ステレオビジョンコンポーネント
//- 顔認識コンポーネント
//- マイクコンポーネント
//- 音声認識コンポーネント
//- 対話コンポーネント
//- 頭・腕コンポーネント
//- 音声合成コンポーネント 
- Camera component
- Stereo vision component
- Face recognition component
- Microphone component
- Speech recognition component
- interaction component
- Head/arm control components
- Speech synthesis component

#ref(rtcbased_hri_system_en.png,50%,center)
//CENTER: ''RTCより構成される対話・認識システムの例''
CENTER: ''Example of dialogue and recognition system consisting of RTC''

//上図のように、コンポーネントはそれぞれポートと呼ばれる他のコンポーネントと通信するインターフェースを持ち、データやコマンドのやり取りを行い、全体として一つのまとまった機能を実現します。
//コンポーネント化することで、コンポーネント単位での並行開発、再利用、交換や更新、分離等が可能になるため、複雑さの軽減、開発効率の向上やシステムの柔軟性・拡張性・安定性の向上が期待できます。
As shown in the above, each component has an interface that communicates with other components called "Port", and exchanges data and commands to realize one set of functions as a whole.
This component method will bring unit-based development which can enable unit by unit parallel development and better code reuse, exchange, update,separation,etc. As a result, we can expect the reduction of the complexity, better development efficiency, improvements to the flexibility, the expandability, the stability of the system. 

//** 開発の経緯
** History of development

//RTミドルウエア は、(独)新エネルギー・産業技術総合開発機構(NEDO)の21世紀ロボットチャレンジプログラム(2002～2004年度) のプロジェクトにおいて、そのコンセプトが提唱され、(独)産業技術総合研究所(産総研)、松下電工(現パナソニック電工株式会社)、(社)日本ロボット工業会により研究・開発・標準化が行われました。
RT Middleware concept was proposed in the 21st Century Robot Challenge Program (2002-2004 fiscal year) by the New Energy and Industrial Technology Development Organization (NEDO),And then the National Institute of Advanced Industrial Science and Technology Research, Matsushita Electric Works (now Panasonic Electric Works Co., Ltd.) and Japan Robot Industry Association did the study, the development, and the standardization.

//プロジェクトの成果として、RTミドルウエアの参照実装である OpenRTM-aist-0.2 およびそのインターフェース仕様が公開されました。その後、国際標準化団体 OMG (Object Management Group: http://www.omg.org ) において RTCインターフェース仕様の標準化が進められ、2008年4月にOMG公式標準仕様となりました。この標準に準拠した RTミドルウエア実装の一つが2010年1月に公開された OpenRTM-aist-1.0 です。
As a result of the project, OpenRTM - aist - 0.2 which is a reference implementation of RT middleware and its interface specification was released. After that, standardization of the RTC interface specification work was made and then it became to the official standard of specification of the International Standards Organization OMG (Object Management Group: http://www.omg.org) in April 2008. One of RT Middleware implementations conforming to this standard is OpenRTM - aist - 1.0 published in January 2010.

//** RTC OMG標準
** RTC OMG standard

//OpenRTM-aist の大きな特徴として、コンポーネントモデルとそのインターフェースが OMG という国際標準化団体で標準化されていることが挙げられます。
A major feature of OpenRTM-aist is that the component model and its interface are standardized by an international standardization organization called OMG.

//OMG は1989年に設立されたソフトウエア標準化団体であり、分散オブジェクトミドルウエア: CORBA (Common Object Request Broker Architecture)、ソフトウェアモデリング言語: UML (Unified Modeling Language) を始めとして、様々な分野のソフトウエア標準を策定・管理している組織として知られています。
OMG is a software standardization organization founded in 1989. OMG made and manage the various software standard like distributed object middleware: CORBA (Common Object Request Broker Architecture) and software modeling language: UML (Unified Modeling Language).

//RTCのインターフェース仕様も、CORBA 同様 OMG において、産総研と米国ミドルウエアベンダ RTI (Real-Time Innovations) により標準化され、RTC(Robotic Technology Component) Specification (http://www.omg.org/spec/RTC/1.0/ ) として2008年4月に公式リリースされました。
RTC interface specifications are also standardized by AIST and US middleware vendor RTI (Real-Time Innovations) in OMG as well as CORBA, and RTC (Robotic Technology Component) Specification (http://www.omg.org/spec/RTC/ 1.0 /) was officially released on April 2008.

//標準化のメリットとして、標準に基づき多くのベンダ、開発者が自由にミドルウエアを実装することができる点が挙げられます。現在、OMG RTC 仕様に準拠、または一部準拠するミドルウエアとして、表に示す7種類(OpenRTM-aist の3種類の言語を含む) が存在します。
One of the merits of standardization is that many vendors and developers can freely implement middleware based on the standards. Currently, there are seven types (including three languages of OpenRTM-aist) middleware are exist and they conforming to or partially conforming to the OMG RTC specification.

//CENTER: ''OMG RTC準拠のミドルウエア一覧''
//|LEFT:120|LEFT:150|LEFT:350|c
//| 名称 | ベンダー名 | 概要 |
//| OpenRTM-aist | 産総研 | C++、Python、Java の3種類 |
//| OpenRTM.NET | (株)セック | .NET による実装、OpenRTM-aistと互換性あり |
//| OPRoS Project | 韓国 ETRI | 独自ミドルウエア上の実装 |
//| PALRO(パルロ) | 富士ソフト株式会社 | 小型人型ロボットPARLO(パルロ)の制御ソフトウエアがC++言語レベルで互換 |
//| GostaiRTC | GOSTAI/Thales | OMG RTC Local PSMに準拠 |
CENTER: '' OMG RTC compliant middleware list ''
|LEFT:120|LEFT:150|LEFT:350|c
| Name | Vendor name | Overview |
| OpenRTM-aist | AIST | Three types of C ++, Python, Java |
| OpenRTM.NET | SEC | .NET implementation, compatible with OpenRTM-aist |
| OPRoS Project | Korea ETRI | Implementation on original middleware |
| PALRO (Palo) | Fuji Software Co., Ltd. | Compact humanoid robot PARLO (Palo) control software is compatible at C ++ language level |
| GostaiRTC | GOSTAI / Thales | OMG RTC Complies with Local PSM |

#br

//このうち、通信を介して互換性がある物は、OpenRTM-aist と OpenRTM.NET のみですが、他の実装とは内部モデルが同一であるため、ブリッジ等を作り連携させた際にも、全体としての整合性に矛盾が生じることは少なくなります。
//また、複数の組織による多様な実装が存在することで、用途に応じて適切な言語やライセンスを選択することも可能であり、ミドルウエアそのものの永続性も高くなります。
Among these, only compatible objects via network communication are OpenRTM-aist and OpenRTM.NET, but since the internal model is the same as other implementations, if you are using a bridge or similar technique to link them, you can expect better consistency. 
Also, since there are various implementations by multiple organizations, you can select the appropriate computer language and the license depends on the usage. Also, it may make the durability of the middleware better.
