#contents

//** RTコンポーネントフレームワーク
** (G)RT Component Framework

//RTコンポーネントを作成するためのフレームワークです。
(G)It is a framework for creating RT Components.

//ロボットシステムを構成する要素をモジュール化するとき、様々な粒度でのモジュール化が考えられます。たとえば、モーターやセンサーといった単機能のデバイス、移動ロボットやアームなど複合的なシステム、あるいは様々な処理を行うアルゴリズムといった単位が考えられ、それらの階層的な集積によりシステムが構築されます。RTミドルウエアでは、これらの RT機能要素の本質的なソフトウエア部分をコアロジックと呼びます。RTコンポーネントフレームワークは、コアロジックに共通のインターフェースという皮を被せて、これらのモジュールを統一的に扱うことができるようにするための仕組みです。
(G)When modularizing the elements making up the robot system, it is possible to modularize with various granularity. For example, units such as single-function devices such as motors and sensors, complex systems such as mobile robots and arms, and algorithms that perform various processes are considered, and the system is built up by hierarchical integration of them. In RT middleware, the essential software part of these RT function elements is called core logic. The RT Component Framework is a mechanism for covering the interface common to Core Logic as a common interface so that these modules can be handled uniformly.

#ref(RTCFrameWorkAndCoreLogic_en.png,40%,center)
//CENTER: ''RT RTコンポーネントフレームワークとコアロジック''
CENTER: ''RT Component Framework and Core Logic''

//上図のように、ステレオビジョンのアルゴリズムをコンポーネント化する例を考えると、アルゴリズムを実装したプログラムそのものはコアロジックに相当します。適切なポートを設定した RTコンポーネントフレームワークを用意してやり、ステレオビジョンアルゴリズムをこのフレームワークに実装してやることで、ステレオビジョンコンポーネントを作ることができます。このように、コンポーネントフレームワークに基づきコンポーネント開発者がコアロジックを実装し、システムに組み込むことができるようにしたモジュールを RTコンポーネントと呼びます。RTコンポーネントフレームワークは、共通インターフェースやその振る舞いをコンポーネント開発者や、コンポーネントを組合わせてシステムを構築するインテグレータから隠蔽します。こうすることによって、コンポーネント開発者はメインのロジックの実装に集中でき、インテグレータは実装の詳細を気にすることなくシステム全体の設計に集中することができます。
(G)Consider the example of componentizing the stereo vision algorithm as shown above, the program itself that implements the algorithm itself corresponds to the core logic. We can prepare a stereo vision component by preparing an RT component framework with appropriate ports and implementing the stereo vision algorithm in this framework. In this way, a module that enables component developers to implement core logic and incorporate them into the system based on the component framework is called an RT component. The RT component framework hides common interfaces and their behaviors from component developers and integrators who build systems by combining components. This allows component developers to concentrate on the implementation of the main logic and allows the integrator to concentrate on the design of the entire system without worrying about implementation details.

//** RTコンポーネントアーキテクチャ
** (G)RT Component architecture

//RTシステムでは、低レベルのセンサ処理やアクチュエータ制御から、高レベルの認識、判断、行動制御など、様々なレベルの処理を連携して行う必要があります。低レベルの制御プログラムには、速度やリアルタイム性の要求を満たす言語が求められる一方で、高レベルのプログラムには、抽象度や記述力の高い言語が求められます。また、現在のRTシステムは、複数の CPU で構成されるケースが増えており、並列制御やネットワークを介した連携機能も必要です。
(G)In the RT system, it is necessary to cooperate with various levels of processing such as high level recognition, judgment, behavior control, etc. from low level sensor processing and actuator control. Low-level control programs require languages that satisfy speed and real-time requirements, while high-level programs require abstract and descriptive languages. In addition, the number of cases where the current RT system is made up of multiple CPUs is increasing, and it is necessary to have parallel control and cooperation function via the network.

//これらの機能要素をモジュール化するため、RTコンポーネントは、様々な粒度でモジュール化が可能で、かつ、多様な言語、OS上で動作する、分散コンポーネント型のフレームワークを提供しています。
(G)In order to modularize these functional elements, the RT component provides a framework of distributed component type that can be modularized with various granularity and operate on various languages and OS.

//図に RTC の基本的なアーキテクチャを示します。RTC の主な機能としては以下のものがあります。
(G)The figure shows the basic architecture of RTC. The main functions of RTC are as follows.

#ref(RTCArchitecture_en.png,40%,center)
//CENTER: ''RTコンポーネントアーキテクチャ''
CENTER: '' RT Component architecture ''

//*** メタ情報取得
*** (G)Get meta information

//RTC はメタ情報 (RTC プロファイル) 取得のためのインターフェース (イントロスペクション機能) を持ちます。RTC プロファイルとは、コンポーネントの名前や所有しているポートのプロファイルなど、コンポーネントの特性を表わす一連の情報です。この機能は実行時の動的なシステム構成時に必要となります。
(G)RTC has an interface (introspection function) for obtaining meta information (RTC profile). An RTC profile is a set of information that describes the characteristics of a component, such as the name of the component or the profile of the port it owns. This function is necessary for dynamic system configuration at run time.

//> イントロスペクション: 日本語で内省と訳される、オブジェクトやコンポーネントのメタ情報を取得する仕組みのこと. 定義は一定していないが、Java におけるリフレクションと類似の機能. OMG RTC 仕様ではこの機能を introspection と定義している。
(G)> Introspection: A mechanism to acquire meta information of objects and components translated as introspection in Japanese.The definitions are not fixed, but functions similar to reflection in Java OMG RTC specification uses this function Is defined as introspection.

#ref(rtc_arch_introspection_en.png,40%,center)
//CENTER: ''メタ情報取得''
CENTER: '' Get meta information ''

//*** アクティビティ
*** (G)Activity

//コンポーネントの主たる機能を実行する部分。RTC の統一的管理のため、Inactive (OFF状態)、Active (ON状態)、Error (エラー状態)といった共通の状態遷移が決められています。RTC開発者は、主にそれぞれの状態やイベントに割り当てられた関数 (コールバック関数) に実現したい機能を実装することで RTC を作成します。
(G)The part that performs the main function of the component. Common state transitions such as Inactive (OFF state), Active (ON state), Error (Error state) are decided for unified management of RTC. An RTC developer creates an RTC by implementing the function which it wants to realize mainly in the function (callback function) assigned to each state and event.

#ref(rtc_arch_activity_en.png,40%,center)
//CENTER: ''アクティビティと実行コンテキスト''
CENTER: ''activity and execution context''

//*** 実行コンテキスト
*** (G)Execution Context

//アクティビティの関数は、実行コンテキスト (Execution Context: EC) と呼ばれるスレッドにより実行されます。ECは、RTC に対して動的にアタッチ・デタッチ可能で、一つの EC を複数の RTC にアタッチし、直列に同期的に実行させたり、リアルタイム実行可能な EC と入れ替えることで RTC の実行をリアルタイム化することも可能です。
(G)Activity functions are executed by a thread called Execution Context (EC). EC can attach and detach dynamically to RTC, attach one EC to multiple RTC, execute it synchronously in series, replace it with EC which can be executed in real time, real time RTC execution It is also possible to convert it.

//*** データポート
*** (G)Data port

//連続的なデータの送受信を行うためのデータ指向ポート。入力ポート (InPort) と出力ポート (OutPort) の2種類があり、同じデータ型同士なら、言語や OS が異なっていても、ネットワークを介して接続・通信することができます。
(G)A data directional port for transmitting and receiving continuous data. There are two types of input port (InPort) and output port (OutPort). Even if the same data types are used, even if the language and OS are different, you can connect and communicate via the network.

#ref(rtc_arch_dataport_en.png,40%,center)
//CENTER: ''データポート''
CENTER: '' Data port ''

//*** サービスポート
*** (G)Service port

//コマンドレベルの詳細な機能の提供・利用を行う、ユーザー定義のプロバイダ(提供(Provided)インターフェース)や、コンシューマー(要求 (Required) インターフェース)を持たせることができるポート (外部に機能を提供するインターフェースを Provided Interface、外部の機能を要求・利用するインターフェースを Required Interface と呼びます。)。データポート同様、言語、OS が異なっていてもインターフェース型が同じなら接続し関数を呼び出すことができます。
(G)A port that can have a user-defined provider (Provided interface) that provides and exploits command level detailed functions and a port that can have a consumer (Required interface) Provided Interface, an interface that requests and uses external functions is called Required Interface. Like the data port, even if the language and OS are different, you can connect and call the function if the interface type is the same.

#ref(rtc_arch_serviceport_en.png,40%,center)
//CENTER: ''データポート''
CENTER: ''Data port''

*** (G)Configuration

//ユーザー定義のパラメーターを、実行時に外部から変更するための機能。複数のパラメーターセットを持ち、それらを一斉に入れ替えることができます。パラメーターを予め変更可能にしておくことで、RTC を様々なシステムで再利用可能にします。
(G)A function to change user-defined parameters externally at runtime. It has multiple parameter sets and you can swap them all at once. By making the parameters changeable in advance, RTC can be reused in various systems.

#ref(rtc_arch_configuration_en.png,40%,center)
//CENTER: ''コンフィギュレーション''
CENTER: ''Configuration''

//一般に、RTシステムにおける低レベル部分では、サーボコントローラー等粒度が細かくデータ指向の密結合なサブシステムが主体であり、判断や振る舞いを決める高レベルの部分では、粒度の粗いサービス指向のサブシステムが主体となります。RTC では、こうした多様な粒度のモジュール化を共通のフレームワークで実現しているため、階層化フレームワークで問題となる、階層間の結合は問題となりません。
(G)Generally, in the low-level part of the RT system, the servo controller etc. are mainly composed of data-oriented and tightly coupled subsystems, and in the high level part which decides judgment and behavior, the coarse-grained service-oriented subsystem is mainly . Since RTC realizes such modularization with various granularity with a common framework, coupling between hierarchies, which becomes a problem in the hierarchical framework, is not a problem.

//異なる言語、および OS 上の RTC 間の透過的連携は、分散オブジェクトミドルウエアの標準仕様である CORBA (Common Object Request Broker Architectur) を利用することで実現されています。
(G)Transparency linkage between different languages and RTC on the OS is realized by using CORBA (Common Object Request Broker Architectur) which is the standard specification of distributed object middleware.