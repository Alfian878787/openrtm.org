// Title: _var_type, _ptr_type_en
#contents
**About _ptr_type, _var_type
When creating a template class, it is sometimes necessary to specify the object type, the _ptr type, and the _ var type.
//*_ptr_type, _var_type について
//template class を作成するときに、オブジェクトの型と、_ptr型、_var型がそれぞれ必要になる場合がある。

 interface Hello {
    void hello_world();
 };

If you define an interface such as Hello, Hello_ptr, Hello_var on the client side, since the _ptr, _ var type is not just a Hello pointer, declaration of a template class that uses all of them,
//といったインターフェースが定義されている場合、クライアント側では、Hello, Hello_ptr, Hello_var を使用することになるが、_ptr, _var 型は単なるHelloのポインタではないので、これらを全て使うテンプレートクラスの宣言などは、

 template <class Hello, class Hello_ptr, class Hello_var)
 class HelloHelper
 {
   :
 } 

You have to write like.
However, in fact, in omniORB etc., _ptr type and _ var type are typedef in _ Hello class, _ptr_type, _ var_type, respectively, and this is used.
A part of the code of the stub generated by omniORB,
//等のように書かなければならない。
//しかし、実際には、omniORBなどでは Hello クラス内で　_ptr型,_var型をそれぞれ、_ptr_type, _var_type にtypedefしており、これを利用している。
//omniORB で生成したスタブのコードの一部、

 typedef _objref_hello* hello_ptr; // _ptr is a typedef to objref_hello *
 typedef _CORBA_ObjRef_Var<_objref_hello, hello_Helper> hello_var; // _var type
 class hello {
 public:
   // Declarations for this interface type.
   typedef hello_ptr _ptr_type; // hello_ptr は typename hello::_ptr_type
   typedef hello_var _var_type; // hello_var は typename hello::_var_type

This is defined.
Therefore, the above template is multiplied as follows,
//このように定義されている。
//従って、上記のtemplateは以下のようにかける、

 template<class ObjectType,
          class ObjectTypePtr = typename ObjectType::_ptr_type,
          class ObjectTypeVar = typename ObjectType::_var_type>
 class HogeHelper
 {
    :
 } 

However, as far as CORBA's specification is concerned, it seems that _ptr_type and _var_type are not defined as standards, so this method is not a portable way.
At least with omniORB 4 it seems to work reliably, but in other implementations, I do not know how it is defined.
If the definitions are different, you can use it if you give _prr type or _ var type to the second and third arguments of template respectively. . .
//ただし、CORBAの仕様を見る限りでは _ptr_type や _var_type が標準として定められているわけではなさそうなので、この方法はポータブルな方法ではない。
//少なくとも omniORB4 でのみは確実に動作しそうだが、ほかの実装では、どのように定義されているかわからない。
//定義が異なる場合は、templateの第2引数、第3引数にそれぞれ_ptr型や、_var型を与えれば使えるが。。。

** How to define in other ORB
*** omniORB 4
As described above, _ptr_type and _var_type can be used.
//*他のORBでの定義の仕方
//**omniORB4
//上記のように、_ptr_type, _var_type が使える。

***TAO
In TAO, the same method can be used.
Below is a snippet of TAO's stub.
//TAO でも、同様の方法が使える。
//以下は、TAOのスタブの一部抜粋。

 class  Hello
    : public virtual CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Hello>;
    typedef Hello_ptr _ptr_type;
    typedef Hello_var _var_type;


***MICO
Similarly for MICO, since _ptr_type and _var_type are typedefed, the same method can be used.
//MICOも同様に _ptr_type, _var_type が typedef されているので、同様のほう方法が使える。

 class Hello : 
   virtual public CORBA::Object
 {
   public:
     virtual ~Hello();
     #ifdef HAVE_TYPEDEF_OVERLOAD
     typedef Hello_ptr _ptr_type;
     typedef Hello_var _var_type;
     #endif

However, although HAVE_TYPEDEF_OVERLOAD seems to need to be defined, it seems that there is no problem because it seems that you can access _ptr_type, _var_type by default.
//ただし、HAVE_TYPEDEF_OVERLOAD が define されている必要があるようだが、デフォルトでは _ptr_type, _var_type にアクセスできるようなので、問題ないようだ。

***ORBacus 
Since there is no development environment at hand, I searched by google CodeSearch,
//手元に開発環境が無いので、google CodeSearch で探したところ、

 class Codec : virtual public CORBA::Object
 {
     Codec(const Codec&);
 public:
     Codec() { }
     typedef Codec_ptr _ptr_type;
     typedef Codec_var _var_type;

There was such a code, so the situation seems to be the same.
//このようなコードがあったので、状況は同じものと思われる。


***ORBit2 

 class BindingIterator : public virtual CORBA::Object
 {
 public:
   typedef ::CosNaming::BindingIterator_ptr _ptr_type;
   typedef ::CosNaming::BindingIterator_var _var_type;

I found such a code. with google CodeSearch.
It seems to be a stub of CosNaming's BindingIterator, but _ptr_type, _var_type is
It is defined.
//このようなコードを見つけた。google CodeSearch で。
//CosNaming の BindingIterator のスタブだと思われるが、_ptr_type, _var_type が
//定義されている。
