#contents(4)
OpenRTM-aist(C++版、Python版、Java版)に関するトラブルシューティングをまとめました。

#clear

**OpenRTM-aist(共通)
***OS共通
****コンポーネントは起動しているはずなのにゾンビオブジェクトとして表示される。
: |コンポーネントは起動しており、ネームサーバにも登録されているのに、RTSystemEditorのネームサービスビュー上ではゾンビオブジェクトとして表示されており、システムエディタにドラッグアンドドロップしても何も表示されない。
::[原因]コンポーネントを起動したホストに到達できない | RTSystemEditorが動作しているPCからコンポーネントを起動したホストに何らかの理由で到達できていない可能性があります。~
まず、RTSystemEditorが動作しているPCからコンポーネントを起動したホストに対してpingが通るか確認してください。~
例えば、以下の3台のホストA,B,Cがあるとします。
:::hostA: コンポーネントが動いているホスト
:::hostB: ネームサーバが動いているホスト
:::hostC: RTSystemEditorが動いているホスト
:: |これらのホストのネットワークが以下のような構成になっており、
:::[hostA]-(ネットワークI)-[hostB]-(ネットワークI)-[hostC]
:: |かつhostBが''ネットワークI''と''ネットワークII''間を適切にルーティングするように設定されていなければ、hostCからhostAへは到達できません。~
こういった場合は、hostBを適切に設定してhostCからhostAへ到達できるようにする必要があります。
::[原因]コンポーネントを起動したホストでファイヤウォールが有効になっている |コンポーネントが動作しているホストでファイヤウォールが動作している場合、RTSystemEditorとコンポーネントが通信できずにこうした現象が発生する場合があります。~
ファイヤウォールの設定を見直すかOFFにするなどして、外部からコンポーネントに通信できるようにしてください。
#br
***Windows
****インストーラ実行中に「…特権が不足しています。」などと表示されて、インストールが続行できない &aname(tokkenn);
: |Administrator特権を持つユーザーとしてログオンし、インストール作業を行ってください。
#br
****コンポーネントがネームサービスに登録されない。
: |ネームサーバ、コンポーネントを起動後、RTSystemEditorなどでネームサーバに接続し、コンポーネントが登録されていない場合があります。~
このような場合は、~
まずは、ログレベルを最高にするためrtc.confに~
 logger.log_level:PARANOID
: |を設定し、コンポーネントを起動してみてください。~
コンポーネントのログに~
 naming_svc NameServer connection succeeded: corba/ホスト名:ポート番号
: |というメッセージ無ければ、ネームサーバへの登録に失敗しています。~
このような場合、以下の原因が考えられます。
::rtc.conf の corba.nameservers が正しく設定されていない|コンポーネントが読み込むrtc.confが正しく設定されているかどうか確認してください。利用しようとするネームサーバを openrtm.aist.go.jp というホスト名と仮定すると、以下の行がrtc.confに含まれていなければなりません。~
 corba.nameservers: openrtm.aist.go.jp
:: |また、ネームサーバをポート番号を指定して起動した場合には、ポート番号も指定する必要があります。ネームサーバ起動時に指定したポート番号が1234番の場合、以下のように設定する必要があります。~
 corba.nameservers: openrtm.aist.go.jp:1234
:: |ポート番号が指定されない場合、デフォルトポート番号2809が使用されます。これはomniORBのネームサーバ(omniNames)のデフォルトポート番号です。もし、omniORB以外のネームサーバを使用する場合は注意してください。
::コンポーネント起動したホストからネームサーバを起動したホストへネットワーク接続ができない|コンポーネントを起動したホストからネームサーバを起動したホストへネットワーク接続が出来るか確認してください。~
まずは、pingが通るかどうか確認します。もし通らなければネットワークの設定を見直してください。~
pingが通っても、ファイヤウォールなどで接続が禁止されている可能性があります。まず、ネームサーバを起動したホスト側のファイヤウォールの設定を見直してください。一番簡単な方法は、ファイヤウォールをOFFにすることです。方法は各OSやファイヤウォールの設定方法を参照してください。
::ネットワークインターフェースが2つ以上ある|ホストにネットワークインターフェースが2つ以上ある場合、CORBAにどちらのインターフェースを使用するか教えてやる必要があります。~
これは、ネームサーバ側、コンポーネント側両者ともに考慮しなければなりません。~
今仮にそれぞれのホストが2つずつインターフェースを持っているとして、各インターフェースのアドレスが以下のように設定されていると仮定します(maskは255.255.255.0と仮定)。
::: ネームサーバhost: eth0:192.168.0.1, eth1:192.168.100.1
::: コンポーネントhost: eth0:192.168.0.2, eth1:192.168.11.96
:: |この場合、ネームサーバhostとコンポーネントhostは 192.168.0 のネットワークで接続されているはずです。~
従って、
::: ネームサーバには eth0:192.168.0.1
::: コンポーネントには eth0:192.168.0.2
:: |のインターフェースを使うように教えてあげる必要があります。~
ネームサーバ側では、ネームサーバを起動する際に OMNIORB_USEHOSTNAME という環境変数を設定する必要があります。~
 (csh系)
 > setenv OMNIORB_USEHOSTNAME 192.168.0.1
 (bash系)
 > export OMNIORB_USEHOSTNAME=192.168.0.1
 > rtm-naming もしくは omniNames でネームサーバを起動
:: |直接、rtm-naming (UNIX系) もしくは rtm-naming.bat (Windows) に書き込んでも良いでしょう。~
一方、コンポーネント側はrtc.confにcorba.endpointの設定を記述することで、使用するインターフェースを指定することが出来ます。~
 corba.endpoint: インターフェースIPアドレス:ポート番号
 corba:endpoint: 192.168.0.2:       (ポート番号を指定しない場合)
 corba:endpoint: 192.168.0.2:1234   (ポート番号を指定する場合)
:: |ポート番号は特に指定しなくても構いませんが、IPアドレスの後の'':(コロン)''を忘れずに付けてください。
#br

**OpenRTM-aist(C++版)
***Windows
**** アプリケーションエラー「アプリケーションを正しく初期化できませんでした。…」 &aname(errorinit);
: |ネームサーバ起動しようとして、rtm-naming.batを実行すると、上記のようなエラーが出る場合があります。このエラーは起動環境上にVC++ライブラリのランタイムコンポーネントがないために起こります。VC++関連の開発環境（Microsoft Visual Studio 、Visual C++  Expressなど）をインストールしていない環境ではOpenRTM-aist(C++版)を動作させることはできませんので、必ずVC++関連の開発環境をインストールしてください。~
OpenRTM-aist(C++版)には、VC8（VS2005）ベースのものと、VC9（VS2008）ベースのものがあります。OpenRTM-aist-X.X.X-jp_vc8.msi（X.X.Xはバージョンです。)などのVC8ベースのインストーラを使用した場合は[[Microsoft Visual C++ 2005 SP1 再頒布可能パッケージ (x86) >http://www.microsoft.com/downloads/details.aspx?FamilyID=200b2fd9-ae1a-4a14-984d-389c36f85647&DisplayLang=ja]]を、OpenRTM-aist-X.X.X-jp_vc9.msi（X.X.Xはバージョンです。)などのVC9ベースのインストーラを使用した場合は[[Microsoft Visual C++ 2008 再頒布可能パッケージ (x86) >http://www.microsoft.com/downloads/details.aspx?displaylang=ja&FamilyID=9b2da534-3e03-4391-8a4d-074b9f2bc1bf]]をインストールしてください。
#br
**** 「このアプリケーションの構成が正しくないため、アプリケーションを開始できませんでした。…」 &aname(errorapplication);
: |サンプルのRTコンポーネントなどを起動しようとして、xxxComp.exeを実行すると、上記のようなエラーが出る場合があります。このエラーは起動環境上にVC++ライブラリのランタイムコンポーネントがないために起こります。VC++関連の開発環境（Microsoft Visual Studio,Visual C++ Expressなど）をインストールしていない環境ではOpenRTM-aist(C++版)を動作させることはできませんので、必ずVC++関連の開発環境をインストールしてください。~
OpenRTM-aist(C++版)には、VC8（VS2005）ベースのものと、VC9（VS2008）ベースのものがあります。OpenRTM-aist-X.X.X-jp_vc8.msi（X.X.Xはバージョンです。)などのVC8ベースのインストーラを使用した場合は[[Microsoft Visual C++ 2005 SP1 再頒布可能パッケージ (x86) >http://www.microsoft.com/downloads/details.aspx?FamilyID=200b2fd9-ae1a-4a14-984d-389c36f85647&DisplayLang=ja]]を、OpenRTM-aist-X.X.X-jp_vc9.msi（X.X.Xはバージョンです。)などのVC9ベースのインストーラを使用した場合は[[Microsoft Visual C++ 2008 再頒布可能パッケージ (x86) >http://www.microsoft.com/downloads/details.aspx?displaylang=ja&FamilyID=9b2da534-3e03-4391-8a4d-074b9f2bc1bf]]をインストールしてください。
#br
****Visual C++ 2005 Express Editionでビルド時に「'windows.h'が見つからない」というエラー
: |Visual C++ 2005 Express Editionでビルド時に次のようなエラーが出る場合があります。~
 >c:\program files\omniorb\include\omnithread\nt.h(35) : fatal error C1083: include ファイルを開けません。'windows.h': No such file or directory
: |これは''１．Microsoft Platform SDKがインストールがされていない、''あるいは''２．インクルードファイルパス・ライブラリパスの設定不備''が原因と考えられます。
:: １．Microsoft Platform SDKがインストールがされていない
:::対応方法：|Microsoft Platform SDKをインストールする。その際は、[[こちら:/ja/node/640#2005SDKattention]]を参考にしてください。あるいは、次の''２．''にしたがってください。
:: ２．インクルードファイルパス・ライブラリパスの設定不備
:::対応方法：|インストールをする順序などの関係で、Visual C++ 2005 Express Editionのインストールディレクトリとは違う場所にMicrosoft Platform SDKがインストールされてしまうなどの事情で、Visual C++ 2005 Express Edition のコンパイラがMicrosoft Platform SDKのインクルードファイルやライブラリをたぐれなくなっている場合があります。この場合は、インクルードファイルサーチパスやライブラリサーチパスにMicrosoft Platform SDKのインストールディレクトリを追加することで問題を解決できます。
::::''インクルードファイルサーチパスの追加方法''|Visual C++ 2005 Express Editionのメニューバー→「ツール」→「オプション」を選択し、「オプション」ウィンドウを開きます。左のツリービューから「プロジェクトおよびソリューション」→「VC++ディレクトリ」を選択します。~
右上のプルダウンメニュー「ディレクトリを表示するプロジェクト」を「インクルード　ファイル」として、Microsoft Platform SDKのインクルードファイルのディレクトリ（例えば、「C:\Program Files\Microsoft Platform SDK\Include」）をインクルードファイルのサーチパスに追加します。
::::''ライブラリファイルサーチパスの追加方法''|同様にして、「オプション」の左のツリービュー「VC++ディレクトリ」を選択した状態で、右上のプルダウンメニュー「ディレクトリを表示するプロジェクト」を「ライブラリ　ファイル」として、Microsoft Platform SDKのライブラリファイルのディレクトリ（例えば、「C:\Program Files\Microsoft Platform SDK\Lib」）をライブラリファイルのサーチパスに追加します。
:::なお、サーチパスの具体的な追加方法などはVisual C++ 2005 Express Editionのヘルプ等を参照してください。
#br
****rtm-namingの実行でエラー発生 
: |症状: rtm-naming.batを実行するとアプリケーションエラーが発生する。~
VC++関係のライブラリがインストールされていない可能性が考えられます。
:: VC++関係のライブラリがインストールされていない|Visual Studio 2005等のアプリケーションがインストールされていない場合は、ここ[[Visual Studio 2005 Express Edition:http://www.microsoft.com/japan/msdn/vstudio/express/]]から"Visual C++ 2005 Express Edition"のインストールを行って下さい。
#br
****rtm-namingが実行できない
: |症状：rtm-naming.batを実行しても黒い窓（コマンドプロンプト画面）が一瞬開いて閉じてしまう。
::[原因]omniORBがインストールされていない|rtm-naming.bat内では通常omniORBのネームサーバ''omniNames.exe''を実行します。~
omniORBがインストールされていないと''omniNames.exe''もインストールされないので、ネームサーバを実行できません。~
ダウンロードページからomniORBをダウンロードしインストールしてください。
::[原因]logディレクトリのパス中に2バイト文字が含まれている |rtm-naming.bat内では通常omniORBのネームサーバ''omniNames.exe''を以下のように実行します。~
 omniNames.exe -start 2809 -logdir %TEMP%
:: |通常環境変数 %TEMP% はユーザのテンポラリディレクトリ~
 C:\Documents and Settings\ユーザ名\Local Settings\Temp
:: |を指します。ここで、''ユーザ名''が日本語の場合、omniNamesがログファイルを正しく作成できないため、実行できずに終了します。~
対応策としては、以下の3つが考えられます。
:::日本語のユーザ名を使用しない|日本語を使用しないユーザを新たに作り、その環境で実行する。
:::rtm-naming.batを書き換える|''C:\Program Files\OpenRTM-aist\[バージョン番号]\bin''の下にあるrtm-naming.batの中の以下の部分 ~
 %cosnames% -start %port% -logdir %TEMP%\ 
::: |を~
 %cosnames% -start %port% -logdir [パスに日本語を含まないログディレクトリ]
::: |のように書き換えます。~
''パスに日本語を含まないログディレクトリ''は自分に書き込みの権限があるディレクトリで、安全な場所にしてください。たとえば、C:\tmp など。
:::Java版のorbdを使用する|OpenRTM-aistのJava版とJDKをインストールすると、スタートメニューのJava版のexamplesの中に''start-orbd.vbs''が現れます。これは、JDKに付属するCORBAネームサーバを起動するスクリプトです。~
このネームサーバには、omniNamesのような日本語のパスの問題は存在しないので、これを使用することでユーザ名が日本語でも、ネームサーバを起動できます。
#br
***Unix
****パッケージの自動インストールでダウンロードエラーが出る。 
: |OpenRTM-aistに付属する自動インストーラは、パッケージの有無とバージョンを確認し、適当なパッケージがインストールされていない場合に各パッケージのダウンロードサイトからダウンロード及び加工するものです。このため、自動インストーラでインストールする場合には、コンピュータを必ずインターネットに接続してください。~
ネットワーク接続が正常でもダウンロードエラーが出る場合、回線の混雑等でウンロードに失敗した場合と、ダウンロードサイト側でファイルの場所や名前が変わった可能性が考えられます。前者の場合は時間帯等をずらして再度自動インストーラを実行してみてください。また後者の場合には、該当するパッケージを探してから個々にダウンロードして手動インストールするか、自動インストーラのダウンロード元アドレスを修正してから改めて起動してください。~
なお、ダウンロードサイト側の変更があった場合、変更情報を当方までご連絡いただければ幸いですので、ご協力をお願いします。
#br
****configureを実行したがエラーが出て終了する。
: |configureのエラーの大半は、必要なパッケージが見つからないときに出ます。エラーが出た場合には、必要なパッケージがインストールされているか、autoconfが見つけられるディレクトリにヘッダ，ライブラリがインストールされているかを確認してください。
#br
****makeを実行してもビルドが完了しない。またはmakeの実行エラーが出る。 
: |パッケージのインストールまたはOpenRTM-aist（C++）のビルドが不完全な可能性があります。もう一度パッケージの自動インストーラを起動して、パッケージのインストールからやり直してください。パッケージのインストール中の処理画面に何らかのエラーメッセージが出てきた場合、該当するパッケージだけを手動でインストールするなどしてからconfigureを実行してください。configureを実行してエラーメッセージが出ないことを確認してから、再度makeを実行してビルドを完了させてください。
#br
**** OpenRTM-aistのインストールに失敗する &aname(openrtminstfault);
: |古いバージョンのOpenRTM-aistが完全にアンインストールされていない場合、新しいバージョンのインストールができません。古いバージョンを一度アンインストールしてから、再度インストール作業をします。
::Vine・Fedora・ubuntu・debian共通：| pkg_install_XXXX.sh を利用してアンインストールする。~
 >su
 #pkg_install_XXXX.sh -u
:: |アンインストールの許可を求められるので、''y'' を入力しながら完了させます。
: |あるいは次の手順に従います。
::Vine：|apt-getコマンドでアンインストールする。次の手順でアンインストールを行ってください。~
 >su
 #apt-get remove OpenRTM-aist-example
 #apt-get remove OpenRTM-aist-dev
 #apt-get remove OpenRTM-aist-doc
 #apt-get remove OpenRTM-aist
::Fedora：|yumコマンドでアンインストールする。次の手順でアンインストールを行ってください。~
 >su
 #yum remove OpenRTM-aist-example
 #yum remove OpenRTM-aist-dev
 #yum remove OpenRTM-aist-doc
 #yum remove OpenRTM-aist
::ubuntu/debian：|apt-getコマンドでアンインストールする。次の手順でアンインストールを行ってください。~
 >su
 #apt-get remove OpenRTM-aist-example
 #apt-get remove OpenRTM-aist-dev
 #apt-get remove OpenRTM-aist-doc
 #apt-get remove OpenRTM-aist
#br
**** apt-get などを使用してインストール作業を行うときに CD を要求される &aname(notusecd);
: |Ubuntu、Debian などのディストリビューションで、apt-get や pkg_install_ubuntu.sh, pkg_install_debian.sh を使用してインストール作業をしていると、次のように CD を求められることがあります。
:: メディア変更:~
 　　'Ubuntu 7.10 _Gutsy Gibbon_ Japanese Remix - Release i386 (20071018)'
:: |とラベルの付いたディスクをドライブ '/cdrom/' に入れて enter を押してください。~
もちろん、CD を用意すればよいことなのですが、諸事情により用意できない場合の対処方法を記述します。~
この場合はとりあえず、''C-c''(Ctrl+c) を入力してインストール作業を中断し、以下の手順でインストール作業をやり直してください。
:::1.''/etc/apt/sources.list'' の編集をする|''/etc/apt/sources.list'' の冒頭部分に~
 deb cdrom:[Ubuntu 7.10 _Gutsy Gibbon_ Japanese Remix - Release i386 (20071018)]/ gutsy main restricted
::: |あるいは~
 deb cdrom:[Debian GNU/Linux 4.0 r3 _Etch_ - Official i386 NETINST Binary-1 20080218-14:15]/ etch contrib main
::: |というような行がありますので、該当する行頭に ''#'' 文字を挿入し、コメントアウトしてください。~
 #deb cdrom:[Ubuntu 7.10 _Gutsy Gibbon_ Japanese Remix - Release i386 (20071018)]/ gutsy main restricted
::: |又は、~
 #deb cdrom:[Debian GNU/Linux 4.0 r3 _Etch_ - Official i386 NETINST Binary-1 20080218-14:15]/ etch contrib main
:::2.インストール作業をやり直す|先ほど中断したインストール作業を始めからやり直してください。
#br
****サンプルプログラムのSimpleIOを実行するrun.shが実行できない
: |run.shに実行ビットが立っていない可能性があります。下記のように実行ビットを立てて実行するか、直接シェルに渡して実行してください。~
 > ls -al run.sh
 -rw-r--r--  1 n-ando  n-ando  1146  4 27 15:12 run.sh
 > chmod 755 run.sh
 > ./run.sh
 もしくは
 > sh run.sh
#br
****サンプルプログラムSimpleIOを起動したが、正常に動かない。 
:|SimpleIOの実行スクリプトrun.shでは、ターミナルウィンドウをkterm，xterm，gnome-terminalのいずれかに仮定しております。このため、これ以外のターミナルウィンドウを使用している場合は、run.shを適宜書き換えてから実行してください。
#br
**OpenRTM-aist(Python版)
***Windows
**** rtm-naming.pyを実行したら、omniNamesが"usage:"を表示して終了してしまう  &aname(pythonusage);
: |症状 ~
rtm-naming.pyを"C:\Documents and Settings\Hoge\My Documents"等ディレクトリ名に空白が入っているディレクトリから実行した場合、omniNamesは"usage:"を表示して終了してしまいます。
::対処方法|これは、rtm-naming.pyのバグによるものです。上記の症状がでた場合、下記のどちらかの方法で対処して下さい。
:::対処法その1|C:\の直下(または、パス名に空白が入っていない場所)に"RTMNaming"等適当なフォルダを作成しrtm-naming.pyを実行してください。
:::対処法その2|C:\Python<version>\Lib\site-packages\OpenRTM\rtm-namingのrtm-naming.pyの48行目を下記のように編集してください。~
 rtm-naming.py 48行目
  cmd = "omniNames -start "+str(port)+" -logdir \""+str(currdir)+"\" &"
#br

&aname(pythonexe);

**** python.exeが起動しない 
: |環境変数PathにPythonインストールフォルダを追加しておいて下さい(C:\Python26など)。
#br

&aname(python);

**** Cygwinをインストールしている環境ではpython.exeが複数存在する場合がある 
: |Cygwinをインストールしている環境では、Cygwin上にもpython.exeが存在する場合があります。その場合は、通例Cygwin上のpython.exeへのサーチパスが優先されるよう設定されるため、環境変数Pathを適切に設定しているのにもかかわらず、今回導入したはずのPythonとは違うバージョンの（すなわちCygwin上の）python.exeが起動してしまう場合があります。この場合、Pythonのバージョンの違いによる不具合が発生してしまいます。この問題は非常に原因が特定しづらいのが特徴です。このようにCygwinなどをインストールしている環境でOpenRTM-aist Python版を使う場合は、該当バージョンのpythonインストールフォルダからpython.exeが起動していることを確認してください。
::確認方法の例：|python -Vでバージョンを調べる、（Cygwinのある環境では）which pythonでどのpython.exeが実行されているかを確認する...など
::この障害が発見された場合の対処：|Pythonインストールフォルダ(C:\Python26など)を''システム環境変数Path''（*ユーザー環境変数Pathではなく）の''先頭に追加''することで解決できます。
#br

 &aname(MSVCerror);
****「MSVCP71.dll が見つからなかったため、…」というエラーで終了する
: |WINDOWS\system32フォルダ内にmsvcp71.dllがないために発生するエラーです。msvcp71.dllを[[こちら >http://www.vector.co.jp/soft/win95/util/se435079.html]]から入手してください。
#br
**** 「Can't open file: ./rtc.conf」などと表示される。&aname(rtc.conf);
: |RTコンポーネントの起動フォルダ（あるいはサーチパス上）にrtc.confが見つからないため、起動できない状態です。この場合、次のように表示されます。~
 Can't open file: ./rtc.conf
 Can't open file: /etc/rtc.conf
 Can't open file: /etc/rtc/rtc.conf
 Can't open file: /usr/local/etc/rtc.conf
 Can't open file: /usr/local/etc/rtc/rtc.conf
: |これはrtc.confを捜すサーチパスがデフォルトの状態であり、上記の順番で探したものの見つからなかったためにこの表示がなされます。これを避けるためには、たとえば~
 corba.nameservers: localhost
 naming.formats: %n.rtc
: |という内容のファイルrtc.confを作成し、上記サーチパス上（通例はカレント＝コンポーネントと同じフォルダ）に配置します。
#br
****コンポーネントがネームサービスに登録されない
: |rtc.confの改行コードがCRLFになっている可能性が考えられます。~
以下のコマンドにてrtc.confの確認を行い、CRLFという文字列が表示された場合、新たにrtc.confの作成を行って下さい。~
 $ file rtc.conf
#br
**OpenRTM-aist(Java版)
***OS共通
****Java版コンポーネントでデータ転送に時間がかかる
: |Java版のRTコンポーネントとC++版など他の言語のコンポーネントとの間で、特に大きなデータ（100kB以上でみられることが多い。）を送受信する場合に、極端に速度が低下する場合があります。これはJavaのCORBA側の問題であることが知られており、タイムアウトを適切に設定することにより回避することができます。~
Java版のRTCが読み込むrtc.confに以下のように記述することで、JavaのCORBAのタイムアウトを設定します。~
 corba.args: -ORBTCPReadTimeouts 1:60000:300:1
: |Java (JDK1.5以降) ではデフォルトで、''100:3000:300:20'' となっていますが、これを ''1:60000:300:1'' に変更するという意味です。各項目は左から、
:: CORBAデータをreadするときに、0byteであったときにRead Thread が休止させられる時間(ms)
:: CORBAデータのread時にRead Threadが待たされる累積最大時間 (ms)
:: GIOPのヘッダーをreadするときのタイムアウト(ms)
:: CORBAデータをreadするときに、Read Threadが休止させられたときに、次回の休止の時間を増加する割合(%)
: |という意味になっています。したがって、''1:60000:300:1'' は
:: readして0byteのとき、Read Thread を 1ms休止する
:: Read Thread が待つ最大累積時間は 6000ms
:: GIOPのヘッダをreadするときのタイムアウト時間は 300ms
:: Read Thread の休止時間は1%づつ増加させる
: |という意味になります。~
大きなデータの場合、1回のreadでデータが読み切れないので、通常何回かreadを行います。~
次のデータはすぐには来ませんので、readは読み込みバイト数を0byteとして戻りますが、通常1ms以内には次のデータはやってきます。デフォルトの設定だとRead Threadが100ms待たされますが、そんなに長時間待つ必要はなく1ms程度待てば、すぐに次のデータを読み込むことができます。~
デフォルト設定の場合、100ms待って、さらにもう一度読み込みreadが0を返すので、さらに100ms+20%の120ms待ちます。データが大きすぎれば、これを12回繰り返すと最大累積時間の3000msに達してしまうので、タイムアウトしてしまいますし、データが小さくても、データの分割数×100msの時間がかかってしまうので、非常に遅くなります。~
JavaのCORBAではデータを100kBで分割するので、これを超えるデータをやり取りする際には、上記の設定をrtc.confにて行っておいたほうがよいでしょう。
#br
***Windows
**** 「java -version」がインストールしたJDKのバージョンと異なる。 &aname(JDKver);
: |すでにJDKよりも新しいバージョンのJRE（Java Runtime Environment）がインストールされている場合は、JDKをインストールしても「java -version」がJREのままになることがあります。この場合のインストールの確認方法を説明します。
:: 「プログラムの追加と削除」での確認方法|Windowsのコントロールパネルから「プログラムの追加と削除」を呼び出し、JDK5がインストールされていることを確認してください。

#ref(add_or_delete_ja.png,80%,center)
CENTER:''JDK5を「プログラムの追加と削除」で確認''
: | 
:: マイコンピュータからの確認方法|JDKをデフォルトでインストールした場合には、通常~
 C:\Program Files\Java\jdk1.6.0_21
:: |というようなパスにインストールされるので、マイコンピュータで直接そのフォルダの存在を確認します。

#ref(confirm_Java_ja.png,80%,center)
CENTER:''マイコンピュータからJDK5を確認''
#br

***Unix
****FedoraCoreでJavaをインストールする際の対応 &aname(javafedora);
: |OSがFedoraCoreの場合、yumにてjavaをインストールするとGCJ(The GNU Compiler for Java )がインストールされてしまい、そのGCJを使用するといくつかの不具合が生じる事があります。~
不具合が発生した場合は、まず、Sun MicrosystemsのJavaが使用されているかの確認をしてください。
:: 参考：|[[JDKインストールのためのヒント:/ja/node/661#nstjavaunixfedora]]
:: |[[UNIX系環境で簡易にSunのJavaをEclipseに適用する方法:/ja/node/248#rtclinksunjava]]


