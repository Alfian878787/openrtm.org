// Title: Create msi with CPack (Windows)
#contents(4)

** (G)Introduction
//** はじめに

Build msi installer in Visual Studio and create it. &br;
//msi インストーラーは Visual Studio でビルドして作成します。&br;

** (G)Steps for creating without including doxygen document
By default, document build is not generated because it is OFF.
//** doxygen ドキュメントを含めない場合の作成手順
//※デフォルトでは、ドキュメントビルドは OFF になっているため生成されません。

Right-click "PACKAGE" from the solution explorer of Visual Studio, select "Build" and execute.
//Visual Studio のソリューション エクスプローラーから「PACKAGE」を右クリックして「ビルド」を選択し実行します。
&br;
#ref(doxygenoff 1-1.png,center)
&br;

** (G)Steps for creating doxygen documents
Change the following line of CMakeLists.txt immediately under the project folder from OFF to ON. &br;
In case of C++ RTC, it is around 86th row, and in Python RTC it is around 77th line.
//** doxygen ドキュメントを含める場合の作成手順
//プロジェクトフォルダー直下にある CMakeLists.txt の下記の行を、OFF → ON に書き換えます。&br;
//C++ RTC の場合は 86行目あたり、Python RTC の場合は 77行目あたりです。

 option (BUILD_DOCUMENTATION "Build the documentation" ON) * Rewrite OFF in this line to ON. (Default is OFF)
// option(BUILD_DOCUMENTATION "Build the documentation" ON) ※この行の OFF を ON に書き換えます。(デフォルトは OFF)

+ Right-click "doc" from Solution Explorer of Visual Studio, select "Build" and execute. &br;
//+ Visual Studio のソリューション エクスプローラーから「doc」を右クリックして「ビルド」を選択し実行します。&br;
&br;
#ref(doxygenon 1-1.png,center)
&br;
+ After building with "doc", right click on "PACKAGE" and select "Build". &br;
//+「doc」でビルド完了後、「PACKAGE」を右クリックして、「ビルド」を選択します。&br;
&br;
#ref(doxygenon 1-2.png,center)
&br;

【Notes】
- Make sure "BUILD_DOCUMENTATION" is checked in CMake's configure.
- Build "doc" first, then build "PACKAGE". Build "PACKAGE" without building "doc" will result in an error.
//【注意事項】
//- CMake の configure で「BUILD_DOCUMENTATION」にチェックが入っているのを確認すること。
//- 先に「doc」のビルドをしてから、「PACKAGE」のビルドを行うこと。「doc」のビルドをせずに「PACKAGE」のビルドを行うとエラーになります 。

** (G)msi installer storage location, filename
If it succeeds, it is saved in [build] of the project directory. &br;
The file name is "RTC project name + RTC version number_OpenRTM-aist version number_architecture". &br;&br;
(Example) Flip100_rtm120_win64.msi &br;
(*) The architecture is [win32] or [win64]. &br;
　  The version number is a format without the dot, [1.0.0] is [100].
//** msi インストーラーの保存場所、ファイル名
//正常に作成できた場合は、プロジェクトディレクトリーの [build] 内に保存されます。 &br;
//ファイル名は、「RTCプロジェクト名＋RTCのバージョン番号_OpenRTM-aist のバージョン番号_アーキテクチャ」となります。&br;&br;
//(例) Flip100_rtm120_win64.msi&br;
//※アーキテクチャは、[win32] または [win64] となります。&br;
//　バージョン番号は、ドットを省いた形式で、[1.0.0] は [100] となります。

** (G)Installing/Uninstalling msi
*** (G)Installation
+ Double click on the created msi installer. &br;
//** msi のインストール・アンインストール
//*** インストール
//+ 作成した msi インストーラーをダブルクリックします。&br;
&br;
+ Click the [Next] button. &br;
//+ [次へ] をクリックします。&br;
&br;
#ref(msi_install 1-1.png,center)
&br;
+ Check [I agree to the license agreement] and click [Next]. &br;
//+ [使用許諾契約書に同意します] にチェックを入れ、[次へ] をクリックします。&br;
&br;
#ref(msi_install 2-1.png,center)
&br;
+ Click the [Next] button. &br;
The default installation path is as follows. &br;
//+ [次へ] をクリックします。&br;
//デフォルトのインストールパスは以下になります。&br;
(Example) C:\Program Files\OpenRTM-aist\1.1.0\Components\c++\ImageProcessing\&br;
ImageProcessing is the name specified in RTCBuilder's "module category"
//※ImageProcessing は、RTCBuilderの「モジュールカテゴリ」で指定した名前&br;
&br;
#ref(msi_install 3-1.png,center)
&br;
+ Click [Install] to start the installation. &br;
//+ [インストール] をクリックすると、インストールが開始されます。&br;
&br;
#ref(msi_install 4-1.png,center)
&br;
#ref(msi_install 4-2.png,center)
&br;
+ Click [Finish] and exit the installer. After installation, it is registered in the start menu. &br;
//+ [完了] をクリックし、インストーラーを終了します。インストール後、スタートメニューに登録されます。&br;
&br;
#ref(msi_install 5-1.png,center)
&br;

*** (G)GUID setting for upgrade
When upgrading, you need to set the GUID to check the already installed version.
Since GUID is not set by default, a new GUID is assigned every time PACKAGE is built in Visual Studio.
By setting the GUID in advance, it is possible to judge whether it is upgrade or new installation. &br;
The procedure for setting the GUID is as follows. &br;&br;
+ Right-click "PACKAGE" from Solution Explorer in Visual Studio, select "Build" and execute. &br;
//*** アップグレードの GUID 設定
//アップグレードをするときに、すでにインストールされているバージョンを確認するため GUID を設定する必要があります。
//GUID は、デフォルトで設定されていないため、Visual Studio で PACKAGE をビルドをする度に新しい GUID が割り当てられてしまいます。
//事前に GUID を設定しておくことで、アップグレードなのか、新規インストールなのかを判断することができます。&br;
//以下に、GUID の設定手順を示します。&br;&br;
//+ Visual Studio のソリューション エクスプローラーから「PACKAGE」を右クリックし、「ビルド」を選択し実行します。&br;
&br;
#ref(msi_upgrade 1-1.png,center)
&br;
+ When the build is completed, the GUID is displayed on the following output screen, so select it and copy it. &br;
//+ ビルドが完了すると、以下の出力画面に GUID が表示されるので、選択してコピーします。&br;
&br;
#ref(msi_upgrade 2-1.png,center)
&br;
+ Expand "ALL_BILD" from Solution Explorer and click CMakeLists.txt. &br;
//+ ソリューション エクスプローラーから「ALL_BILD」を展開し、CMakeLists.txt をクリックします。&br;
&br;
#ref(msi_upgrade 3-1.png,center)
&br;
+ Paste the GUID you copied in step 2 as shown below, overwrite and save CMakeLists.txt. &br;
//+ 手順２でコピーした GUID を以下の画面のように貼り付け、CMakeLists.txt を上書き保存します。&br;
&br;
#ref(msi_upgrade 4-1.png,center)
&br;
+ Again, right-click "PACKAGE" from Solution Explorer, select "Build" and execute. &br;
//+   再度、ソリューション エクスプローラーから「PACKAGE」を右クリックし、「ビルド」を選択し実行します。&br;
&br;
#ref(msi_upgrade 5-1.png,center)
&br;

[Supplement] &br;
In addition to the above, you can also create a new GUID to create a GUID. &br;
Select [Tools] > [Create GUID] from the Visual Studio menu to display the "Create GUID" dialog. &br;
//[補足]&br;
//GUID の作成には上記のほかに、GUID を新規に作成する方法もあります。&br;
//Visual Studio のメニューから [ツール] > [GUID の作成] を選択し、「GUID の作成」ダイアログを表示させます。&br;
&br;
+ In [GUID format], select [4. Registry format ...]. &br;
+ Click the [New GUID] button. &br;
+ Click the [Copy] button. &br;
+ Click the [End] button to close the dialog. &br;
//+ [GUID 形式] で、[4. レジストリ形式・・・] を選択します。&br;
//+ [新規 GUID] ボタンをクリックします。&br;
//+ [コピー] ボタンをクリックします。&br;
//+ [終了] ボタンをクリックして、ダイアログを閉じます。&br;
&br;
#ref(msi_upgrade 6-1.png,center)
&br;
+ Paste it into CMakeLists.txt and overwrite it as shown in the screen below. *paste only numerals. &br;
//+ 以下の画面のように、CMakeLists.txt に貼り付けて、上書き保存します。※数字のみを貼り付けます。&br;
&br;
#ref(msi_upgrade 4-1.png,center)
&br;

*** (G)Uninstall
Below is the uninstall procedure.
**** (G)How to delete from the control panel
+ Open [Control Panel] and click [Uninstall a program]. &br;
//*** アンインストール
//以下、アンインストール手順です。
//**** コントロールパネルから削除する方法
//+ [コントロールパネル] を開き、[プログラムのアンインストール] をクリックします。&br;
&br;
#ref(msi_uninstall 0-1.png,center)
&br;
+ Select the installed package name and click [Uninstall]. &br;
//+ インストールしたパッケージ名を選択し、[アンインストール] をクリックします。&br;
&br;
#ref(msi_uninstall 0-2.png,center)
&br;
+ Uninstallation is completed if the display disappears from the control panel list. &br;&br;
//+ コントロールパネルの一覧から表示が消えていればアンインストール完了です。&br;&br;

**** (G)How to delete from the installer
+ Double click on the created msi installer. &br;&br;
+ Click [Delete]. &br;
//**** インストーラーから削除する方法
//+ 作成した msi インストーラーをダブルクリックします。&br;&br;
//+ [削除] をクリックします。&br;
&br;
#ref(msi_uninstall 1-1.png,center)
&br;
+ Click [Delete]. &br;
//+ [削除]をクリックします。&br;
&br;
#ref(msi_uninstall 2-1.png,center)
&br;
#ref(msi_uninstall 2-2.png,center)
&br;
+ Click [Finish] and exit the installer. &br;
//+ [完了] をクリックし、インストーラーを終了します。&br;
&br;
#ref(msi_uninstall 3-1.png,center)
&br;

** (G)IDL compilation process of Python RTC with service port
Python RTC with service port performs IDL compilation at package installation.
Since this operation is realized by idlcompile.bat, delete.bat in the project folder when IDL compilation is executed, it is necessary to note that if these files are deleted, they will not function. &br;
By uninstalling from the control panel, files created after IDL compilation are also deleted.
//** サービスポートを持つ Python RTC の IDLコンパイル処理
//サービスポートを持つ Python RTC は、パッケージインストール時に IDL コンパイルを実行します。
//IDL コンパイル実行時にプロジェクトフォルダー内にある idlcompile.bat、delete.bat でこの動作を実現させているため、これらのファイルを削除してしまうと機能しなくなってしまうので注意が必要です。 &br;
//コントロールパネルからアンインストールすることで、IDL コンパイル実行後に生成したファイルも削除されます。

Below is a list of files installed by msi installer. ★ A file is generated by IDL compilation.
//以下、msi インストーラーによりインストールされるファイル一覧です。★マークが IDL コンパイルで生成されるファイルです。

 tree /f installation directory\OpenRTM-aist\1.1.0\Components\Python\Category\FlipGUI
 C:\installation directory\OpenRTM-aist\1.1.0\Components\Python\Category\FlipGUI
// tree /f インストールディレクトリー\OpenRTM-aist\1.2.0\Components\Python\Category\FlipGUI
// C:\インストールディレクトリー\OpenRTM-aist\1.2.0\Components\Python\Category\FlipGUI
 │  BasicDataType_idl.py ★
 │  CalibrationService_idl.py ★
 │  delete.bat
 │  ExtendedDataTypes_idl.py ★
 │  idlcompile.bat
 │  InterfaceDataTypes_idl.py ★
 │  RTC.xml
 │  rtutil.py
 │  setup.py
 │  flipgui.py
 │  FlipGUIComp.py
 │
 ├─idl
 │   BasicDataType.idl
 │   CalibrationService.idl
 │   CMakeLists.txt
 │   ExtendedDataTypes.idl
 │   InterfaceDataTypes.idl
 │
 ├─ImageCalibService ★
 │   __init__.py ★
 │
 ├─ImageCalibService__POA ★
 │   __init__.py ★
 │
 ├─RTC ★
 │   __init__.py ★
 │
 └─RTC__POA ★
       __init__.py ★