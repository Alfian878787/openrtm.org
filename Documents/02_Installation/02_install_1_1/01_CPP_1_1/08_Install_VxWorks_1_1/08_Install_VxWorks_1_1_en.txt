// Title Install on VxWorks
#contents



** (G)VxWorks
VxWorks is a real-time OS for embedded systems developed by Wind River. It is the most popular OS in large-scale commercial real-time OS, and it is used in relatively large equipment.
It can operate on various CPU such as x86, PowerPC, SH - 4, ARM, MIPS, SPARC etc. It conforms to DO - 178B standard and IEC 61508 standard, and it is used in a wide range of fields such as aerospace and space.
//VxWorksはウインドリバー社が開発している組込みシステム向けリアルタイムOSです。
//規模の大きな商用リアルタイムOSで最も普及しているOSであり、比較的大型の機器で使用されています。
//x86、PowerPC、SH-4、ARM、MIPS、SPARC等の様々なCPU上で動作可能です。
//DO-178B規格とIEC61508規格に準拠しており、航空・宇宙等の幅広い分野で使われています。

** (G)Wind River Workbench
Wind River Workbench is an integrated development environment that executes VxWorks compilation, debugging, etc. by GUI.
//Wind River WorkbenchはVxWorksのコンパイル、デバッグ等をGUIで実行する統合開発環境です。



This page explains the procedure for introducing OpenRTM-aist (C++ version) to VxWorks.
//このページではVxWorksにOpenRTM-aist(C++版)を導入する手順を説明します。

** (G)Environment
//** 環境構築
The host PC is supposed to be Ubuntu 14.04 (or 16.04). We plan to deal with Windows in the future.
//ホストPCはUbuntu 14.04(もしくは16.04)を想定しています。
//Windowsには今後対応する予定です。

Install the following software on the host PC.
//ホストPCに以下のソフトウェアをインストールしてください。


- Wind River Workbench
-- https://www.windriver.com/japan/

Please purchase from Wind River and install it.
//ウインドリバー社から購入してインストールしてください。

Since Workbench operates in 32 bit environment, please install i386 version libc6 package for 64 bit Ubuntu.
//Workbenchは32bit環境で動作するため、64bitのUbuntuの場合はi386版libc6パッケージをインストールしてください。

 sudo apt-get install libc6:i386 libncurses5:i386 libstdc++6:i386

- tclsh
- cmake
- subversion

Please install with the following command.
//以下のコマンドでインストールしてください。

 sudo apt-get install tclsh cmake subversion



- ORBexpress
-- http://www.soft-service.co.jp/product/orb/

It is necessary only when using ORBexpress.
//ORBexpressを使用する場合のみ必要です。

** (G)Build
//** ビルド

Build is executed by command line operation.
From Workbench, right click on Project Explore and launch the command line shell from '' Open Development Shell ''.
//ビルドはコマンドラインの操作により実行します。
//Workbenchから、Project Exploreを右クリックして''Open Development Shell''からコマンドラインシェルを起動してください。

#br

#ref(command-line.png, left)

#br

To build on normal Ubuntu terminal, please set environment variables by the following procedure.
If you use the command line shell launched in Workbench, you have already set environment variables, so please proceed to the next step.
//通常のUbuntuのターミナル上でビルドする場合は、以下の手順で環境変数を設定してください。
//Workbenchで起動したコマンドラインシェルを用いる場合は環境変数は設定済みのため、次の手順に進んでください。

*** (G)Setting environment variables
Please set the following environment variables.
//*** 環境変数の設定
//以下の環境変数を設定してください。

| Variable name | Example |
//|変数名|例|
|WIND_HOME|/home/openrtm/WindRiver|
|WIND_USR|${WIND_HOME}/vxworks-6.9/target/usr|
|WRVX_COMPBASE|${WIND_HOME}/components|
|WIND_BASE|${WIND_HOME}/vxworks-6.9|
|WIND_HOST_TYPE|x86-linux2|
|WIND_GNU_BASE|${WIND_HOME}/gnu/4.3.3-vxworks-6.9/${WIND_HOST_TYPE}|
|WIND_FOUNDATION_PATH|${WIND_HOME}/workbench-3.3/foundation|



Please change WIND_HOME appropriately according to the directory where Workbench is installed.
//WIND_HOMEはWorkbenchをインストールしたディレクトリにより適宜変更してください。


 export WIND_HOME=/home/openrtm/WindRiver
 export WIND_USR=${WIND_HOME}/vxworks-6.9/target/usr
 export WRVX_COMPBASE=${WIND_HOME}/components
 export WIND_BASE=${WIND_HOME}/vxworks-6.9
 export WIND_HOST_TYPE=x86-linux2
 export WIND_GNU_BASE=${WIND_HOME}/gnu/4.3.3-vxworks-6.9/${WIND_HOST_TYPE}
 export WIND_FOUNDATION_PATH=${WIND_HOME}/workbench-3.3/foundation

Please set the shared library path to execute the compiler.
//コンパイラの実行のために共有ライブラリパスの設定を行ってください。

 export LD_LIBRARY_PATH=${WIND_HOME}/lmapi-5.0/x86-linux2/lib:${WIND_FOUNDATION_PATH}/${WIND_HOST_TYPE}/lib:${LD_LIBRARY_PATH}


*** (G)Build omniORB
//*** omniORBのビルド

When omniORB is used, it is necessary to build omniORB source code. If omniORB is not used, proceed to the next step.
//omniORBを使用する場合は、omniORBのソースコードのビルドが必要になります。
//omniORBを使用しない場合は、次の手順に進んでください。

**** (G)Get source code
Please obtain omniORB source code with the following command.
//**** ソースコード入手
//以下のコマンドでomniORBのソースコードを入手してください。

 wget https://jaist.dl.sourceforge.net/project/omniorb/omniORB/omniORB-4.2.2/omniORB-4.2.2.tar.bz2
 tar xf omniORB-4.2.2.tar.bz2

**** (G)Correction patch application
Apply fix patch for VxWorks 6.6, 6.9.
//**** 修正パッチ適用
//VxWorks 6.6、6.9対応の修正パッチを適用します。

 wget http://svn.openrtm.org/omniORB/trunk/vxworks/omniORB-4.2.2-vxworks.patch
 patch -p1 -d omniORB-4.2.2 < omniORB-4.2.2-vxworks.patch

**** (G)Build IDL compiler etc.
The IDL compiler etc must operate on Ubuntu.
Please build omniORB for Ubuntu by the following procedure.
//**** IDLコンパイラなどのビルド
//IDLコンパイラなどはUbuntu上で動作する必要があります。
//以下の手順でUbuntu用にomniORBをビルドしてください。

 cd omniORB-4.2.2
 mkdir build
 cd build
 ../configure
 make
 cd ..

**** (G)Cross compiling
Build omniORB for VxWorks.
//**** クロスコンパイル
//VxWorks用にomniORBをビルドします。

 sed -i '1s/^/platform = ${VXWORKS_PLATFORM}\n/' config/config.mk
 cd src
 make export

However, please be sure to enter VXWORKS_PLATFORM according to your operating environment.
//ただし、VXWORKS_PLATFORMには動作環境に合ったものを入力するようにしてください。

| VXWORKS_PLATFORM | CPU | VxWorks version | Implementation method |
| powerpc_vxWorks_kernel_6.6 | PowerPC | 6.6 | Kernel module |
| powerpc_vxWorks_RTP_6.6 | PowerPC | 6.6 | RTP |
| powerpc_vxWorks_kernel_6.9 | PowerPC | 6.9 | kernel module |
| powerpc_vxWorks_RTP_6.9 | PowerPC | 6.9 | RTP |
| simlinux_vxWorks_kernel_6.6 | simulator on Linux | 6.6 | kernel module |
| simpentium_vxWorks_RTP_6.6 | Simulator on Linux | 6.6 | RTP |
| simlinux_vxWorks_kernel_6.9 | simulator on Linux | 6.9 | kernel module |
| simpentium_vxWorks_RTP_6.9 | Simulator on Linux | 6.9 | RTP |

//|VXWORKS_PLATFORM|CPU|VxWorksのバージョン|実装方法|
//|powerpc_vxWorks_kernel_6.6|PowerPC|6.6|カーネルモジュール|
//|powerpc_vxWorks_RTP_6.6|PowerPC|6.6|RTP|
//|powerpc_vxWorks_kernel_6.9|PowerPC|6.9|カーネルモジュール|
//|powerpc_vxWorks_RTP_6.9|PowerPC|6.9|RTP|
//|simlinux_vxWorks_kernel_6.6|Linux上のシミュレータ|6.6|カーネルモジュール|
//|simpentium_vxWorks_RTP_6.6|Linux上のシミュレータ|6.6|RTP|
//|simlinux_vxWorks_kernel_6.9|Linux上のシミュレータ|6.9|カーネルモジュール|
//|simpentium_vxWorks_RTP_6.9|Linux上のシミュレータ|6.9|RTP|

In the case of building a kernel module, name servers etc. are not generated. When starting name servers with VxWorks, please also build RTP.
//※カーネルモジュールのビルドの場合にはネームサーバー等は生成しません。VxWorksでネームサーバーを起動する場合はRTPのビルドも行ってください。

*** (G)Build OpenRTM-aist
//*** OpenRTM-aistのビルド

**** (G)Obtain source code
Please obtain the source code with the following command.
//**** ソースコードの入手
//以下のコマンドでソースコードを入手してください。

 svn co http://svn.openrtm.org/OpenRTM-aist/trunk/OpenRTM-aist/

**** (G)Compilation
Start compiling with the following command.
//**** コンパイル
//以下のコマンドでコンパイルを開始します。

 cd OpenRTM-aist/
 python convert_character_code.py ./ vxworks euc_jp
 mkdir src/lib/coil/common/coil
 cp src/lib/coil/common/*.* src/lib/coil/common/coil/
 cp build/yat.py utils/rtm-skelwrapper/
 mkdir build_vxworks
 cd build_vxworks/
 cmake -DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN_FILE} -DVX_VERSION=${VX_VERSION} -DORB_ROOT=${ORB_ROOT} -DOMNI_VERSION=${OMNI_VERSION} -DCORBA=${CORBA} -DVX_CPU_FAMILY=${ARCH} ..
 make

Please specify the following for CMake options.
//CMakeのオプションには以下を指定してください。

| TOoolCHAIN_FILE | '../Toolchain-vxworks6.6-Linux.cmake' 'for VxWorks 6.6 (kernel module, PowerPC),' '../ Toolchain-vxworks6.cmake' '|
| VX_VERSION | '' vxworks - 6.6 '' or '' vxworks - 6.9 '' |
| ORB_ROOT | omniORB directory (eg /home/openrtm/omniORB-4.2.2) |
| VX_CPU_FAMILY | '' ppc '' (PowerPC), '' simlinux '' (kernel module, simulator), '' simpentium '' (RTP, simulator) |
| OMNI_VERSION | omniORB version (40, 41, 42), unnecessary if omniORB is not used |
| CORBA | omniORB or ORBexpress |
//|TOOLCHAIN_FILE|VxWorks 6.6(カーネルモジュール、PowerPC)の場合は''../Toolchain-vxworks6.6-Linux.cmake''、それ以外の場合は''../Toolchain-vxworks6.cmake''|
//|VX_VERSION|''vxworks-6.6''か''vxworks-6.9''|
//|ORB_ROOT|omniORBのディレクトリ(例：/home/openrtm/omniORB-4.2.2)|
//|VX_CPU_FAMILY|''ppc''(PowerPC)、''simlinux''(カーネルモジュール、シミュレータ)、''simpentium''(RTP、シミュレータ)|
//|OMNI_VERSION|omniORBのバージョン(40、41、42)、omniORBを使用しない場合は不要|
//|CORBA|omniORB、もしくはORBexpress|

For RTP, you need to add ''-DRTP = ON'' to the cmake command.
//※RTPの場合はcmakeコマンドに''-DRTP=ON''を追加する必要があります。

** (G)Operation check
//** 動作確認

When the build is completed, please confirm the operation by the following procedure.
//ビルドが完了したら以下の手順で動作確認を行ってください。
