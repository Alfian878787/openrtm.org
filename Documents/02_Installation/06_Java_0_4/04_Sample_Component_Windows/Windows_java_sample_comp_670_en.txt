#contents
&aname(javasample);
** About samples of OpenRTM-aist-Java-0.4
In this chapter, we will explain samples included in OpenRTM-aist-0.4 Java.
When you execute each sample component, before you launch it, please start up a name service by running start-orbd.bat.
We assume that RtcLink is installed. For more details on the installation of RtcLink, please refer to [[installaion for RtcLink:/en/node/723]].

**SimpleIO 
This sample shows how to use DataInPort and DataOutPort. Run ConsoleIn.bat and ConsoleOut.bat, then each sample component starts. Once you connect ports, the input numeric values of ConsoleIn are displayed in ConsoleOut screen. In stead of using RtcLink, you can connect between ports by running Connector.bat.

#br

#ref(java_simpleio0.png,center,70%)
CENTER:''Example to run SimpleIO(RtcLink connection)''
#br
#br

#ref(java_simpleio1_ja.png,nolink,center)
CENTER:''Example to run SimpleIO(ConsoleIn)''
#br
#br

#ref(java_simpleio2_ja.png,nolink,center)
CENTER:''Example to run SimpleIO(ConsoleOut)''
#br

**SeqIO 
The sample shows how to use DataInPort and DataOutPort. Execute SeqIn.bat and SeqOut.bat, then each sample component starts and a GUI screen is displayed.
Both SeqIn and SeqOut have the following type of DataPort:
TimedShort, TimedLong, TimedFloat, TimedDouble
TimedShortSeq, TimedLongSeq, TimedFloatSeq and TimedDoubleSeq.
Outputs of each port are determined by a random number, and once you connect ports, output values of SeqOut and input values of SeqIn are displayed in the GUI screen, respectively. (You may use RtcLink to connect between Ports.)

#br

#ref(java_seqio0.png,center,70%)
CENTER:''Example to run SeqIO(RtcLink connection)''
#br
#br

#ref(java_seqio1.png,nolink,center)
CENTER:''Example to run SeqIO(SeqIn)''
#br
#br

#ref(java_seqio2.png,nolink,center)
CENTER:''Example to run SeqIO(SeqOut)''
#br

**SimpleService 
This sample shows how to use ServicePort. The service is defined using the following IDL.

 typedef sequence<string> EchoList;
 typedef sequence<float> ValueList;
 
 interface MyService
 {
   string echo(in string msg);
   EchoList get_echo_history();
   void set_value(in float value);
   float get_value();
   ValueList get_value_history();
 };

Startup MyServiceConsumer.bat and MyServiceProvider.bat, then each sample component starts.
Activate the component of Consumer, then command list is displayed so please try each command. (Please use RtcLink to connect between Ports.)

#br

#ref(java_simplesvc0.png,center,70%)
CENTER:''Example to run SimpleService(RtcLink connection)''
#br

#ref(java_simplesvc1_ja.png,nolink,center)
CENTER:''Example to run SimpleService(MyServiceConsumer)''
#br
#br

#ref(java_simplesvc2_ja.png,nolink,center)
CENTER:''Example to run SimpleService(MyServiceProvider)''
#br

**ConfigSample 
This sample shows how to use configuration set for RT-Components. Once you launch ConfigSample.bat, its sample component starts up. 
Once the component launches successfully, its configuration set has been set up on ahead. You may confirm the configuration by RtcLink.

#br
Note: If an error "Specified path cannot be found." occurs, modify the value of "example.ConfigSample.config_file" in rtc.conf file under RTMExamples/ConfigSample directory.
-Rewrite the path to:

.\\RTMExamples\\ConfigSample\\configsample.conf

(Any characters between folder names are represented by '\' and not '\\'.)

-Or rewrite it to the full path of "configsample.conf". In this case, you need to specify '\\' as a folder separator, as well.

#br

#ref(java_configsample0.png,center,70%)
CENTER:''Example to run ConfigSample''
#br

**ExtTrigger 
This is a sample for ExecutionContext to perform responding to inputs (events) from externals of RT-Components. Startup each sample component by running ExtConsoleIn.bat and ExtConsoleOut.bat. Once both components start, please connect ports of them by running ExtConnector.bat.

#br

#ref(java_exttrigsample0.png,nolink,center)
CENTER:''Example to run ExtTrigger(ConsoleIn)''
#br
#br

#ref(java_exttrigsample1.png,nolink,center)
CENTER:''Example to run ExtTrigger(ConsoleOut)''
#br
#br

#ref(java_exttrigsample2.png,nolink,center)
CENTER:''Example to run ExtTrigger(ConnectorComp)''
#br

Once ports are connected successfully, a menu to select which component performs its operation, in the console running ExtConnector, will be shown. Each component performs its operation by one cycle, according the value you input in this console.

**GUIIn
This is a sample of RT-Component which has the GUI screen. This sample component starts up by running GUIIn.bat.

#br

#ref(java_guiin0.png,nolink,center)
CENTER:''Example to run GUIIn(GUIIn)''
#br
#br

#ref(java_guiin1.png,center,70%)
CENTER:''Example to run GUIIn(RtcLink connection)''
#br

The relationship between each GUI element and the Port is as follow. 
:Slider(Upper)| TimedLong type DataOutPort
:Text box(Middle)| TimedString  type DataOutPort
:Spinner (Lower)| TimedDouble type DataOutPort

Each port sends its input data, when you connect correspondent Ports and enable its check box next to its GUI element. (You may use RtcLink for connection between Ports, Use other examples such as SeqIn to confirm its output data.)

**LogView
This is a sample of a RT-Component, which works as a plug-in of the integrated development environment, Eclipse.
This component has two TimedDouble type DataInPort, and display its input values one by one as a graph on the screen.

#br

#ref(java_logview0.png,center,70%)
CENTER:''Example to run LogView''
#br

***Installation and Launch
Just copy "jp.go.aist.rtm.logview_1.0.0.jar" under LogView directory to the plugins directory under Eclipse installation directory, to finish installation.(See [[RtcLink Installation Manual:/en/node/723]] or other documents, about how to install Eclipse.)

Once a name service starts, launch Eclipse. (When Eclipse starts up or its screen is opened, components are registered, so you need to start a name service before it.)

Create rtc.conf for LogView, and put it in an appropriate directory. In the next configuration, it refers a name server which resides in the same host as Eclipse starts up, and registers names of components just under the root context.

 corba.nameservers: localhost
 naming.formats: %n.rtc

Once Eclipse starts, select [Window]-[Preferences] from its top menu, and select "LogView" in its "Preferences" dialog when the dialog is shown.
#br

#ref(java_logview0-1.png,nolink,center)
CENTER:''Configuration of LogView(Menu Selection)''
#br
As above figure, set up each configuration item appropriately in the LogView Preference dialog. 

:''Configuration File Path''| Specify the location of rtc.conf you created before
:''Redraw Period''|Specify a cycle to draw graphs

When you finish setting, select [Window]-[Show View]-[Other] from the top menu, and choose "Other"-"LogView" in the "Show View" dialog.
LogView components will be shown on the name service view.

#br

#ref(java_logview1.png,nolink,center)
CENTER:''Displaying LogView(Menu Selection)''
#br
#br

#ref(java_logview2.png,nolink,center)
CENTER:''Displaying LogView(View Selection)''
#br

***Confirmation of Operation and Configuration 
We provide SinCosOut component as a component to verify operations of LogView components. SinCosOut component has two TimedDouble type DataOutPorts which output sin wave and cos wave respectively.You can launch it by running SinCosOut.bat, so please try it with LogView components.
For LogView components, you can set up the maximum value, the minimum value, and intervals of scale in Y axis, and its cycle to redraw graphs. Enter a set up value in a text box at right side of the screen, and press [Apply] button to change the configuration.

#br

#ref(java_logview3.png,nolink,center)
CENTER:''Configutation of LogView''
#br

