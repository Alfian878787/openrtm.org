#contents
** OpenRTM-aist-Java-0.4のサンプルについて &aname(samplecomponent); 

　本章では，OpenRTM-aist-Java-0.4に付属のサンプルについて説明します。
サンプルを試用する場合は，各サンプル・コンポーネントを起動する前にstart-orbd.shを実行してネーム・サービスを起動しておいてください。start-orbd.shを実行するには、ターミナルを起動し、カレントを｢examples｣ディレクトリに移してから、次のようにして起動します。
 $ ./start-orbd.sh
なお、本章ではRtcLinkがインストールされた環境であることを想定し、説明しています。RtcLinkのインストールについての詳細は、[[RtcLinkインストール>RtcLink・RtcTemplateのインストール]]
を参照してください（一部のサンプルはRtcLinkがなくても動作します）。
#br
''※'' すでにRtcLinkをインストールされている方へ

　新しいOpenRTM-aist-Java-0.4ではRtcLink 0.4.0は使えなくなりました。すでに、Eclipse上にRtcLinkプラグインをインストールしている方は、OpenRTM-aist-Java-0.4を使う場合は、必ずRtcLinkも0.4.1に差し替えてください。

参考：

　→ [[''FAQ:'' Q. RtcLink上でRTCのポートが表示されない（Java版） >RtcLink.#RtcLinkport]]
***SimpleIO
　DataInPort、DataOutPortの使用方法を示したサンプルです．ConsoleIn.shとConsoleOut.shを実行することでサンプルコンポーネントが起動します．Port間を接続すると，ConsoleIn側で入力した数字が，ConsoleOut側に表示されます．Port間はRtcLinkを用いる他に，Connector.shを実行することで接続することができます．

#br

#ref(java_simpleio0.png,center,70%)
CENTER:''SimpleIO実行例(RtcLink接続画面)''
#br
#br

#ref(UnixJavaConsoleIn.png,nolink,center)
CENTER:''SimpleIO実行例(ConsoleIn)''
#br
#br

#ref(UnixJavaCosoleOut.png,nolink,center)
CENTER:''SimpleIO実行例(ConsoleOut)''
#br

****使い方
　SimpleIOのサンプルは、ConsoleInで入力された数字をデータポートからConsoleOutへ送って、ConsoleOut側にも同じ数字を表示させるサンプルです。
ConsoleInの画面から数字を入力してください。そうするとConsoleOutで入力した数字が出力されます。
#br
- 方法１:Connector.shを使う方法（※この場合、RtcLinkは不要）
-- ConsoleInとConsoleOutの両コンポーネントを起動します。
-- Connector.shを実行します。
-- ConsoleInの画面に「Please input number:」とプロンプトされるので、数字を入力します。
-- ConsoleOutの画面にその数字が表示されます。
#br

- 方法２:RtcLinkを使う方法
-- [[RtcLinkを起動 >RtcLink#startRtcLink]]し、[[SystemEditor を開き>RtcLink操作画面#systemediter]]ます。→RtcLinkの使用方法の詳細については[[RtcLink >RtcLink]]を参照
-- ConsoleInとConsoleOutの両コンポーネントを起動します。
-- RtcLinkのNameServiceViewに両コンポーネントが現れるので、それらをSystemEditor上にドラッグする。
-- 両コンポーネントのポートを結ぶ。（上図SimpleIO実行例を参照）
-- どちらかのコンポーネントを右クリックし、「All Activate」を選択。
-- ConsoleInの画面に「Please input number:」とプロンプトされるので、数字を入力します。
-- ConsoleOutの画面にその数字が表示されます。

#br
#br

***SeqIO 
　DataInPort，DataOutPortの使用方法を示したサンプルです．SeqIn.shとSeqOut.shを実行することでサンプルコンポーネントが起動し，GUI画面が表示されます．
SeqIn，SeqOutともに以下の型のDataPortを持っています．
TimedShort、TimedLong、TimedFLoat、TimedDouble、
TimedShortSeq、TimedLongSeq、TimedFLoatSeq、TimedDoubleSeq
各Portの出力は乱数で決定しており，各Port間を接続するとSeqOut側の出力値，SeqIn側の入力値がそれぞれのGUI画面に表示されます．(Port間の接続にはRtcLinkをご利用ください．)

#br

#ref(java_seqio0.png,center,70%)
CENTER:''SeqIO実行例(RtcLink接続画面)''
#br
#br

#ref(java_seqio1.png,nolink,center)
CENTER:''SeqIO実行例(SeqIn)''
#br
#br

#ref(java_seqio2.png,nolink,center)
CENTER:''SeqIO実行例(SeqOut)''
#br

****使い方
　SeqIOのサンプルは、SeqOutから連続して出力される数値データをデータポートからSeqInへ送り、GUI上に表示させるサンプルです。
SeqOutとSeqInの対応するポートをRtcLink上で接続してください。両コンポーネントをアクティベートするとSeqOutだけでなくSeqInのGUI上の数値も連続的に変化し、データポートの入出力が観察できます。
#br

- 手順
-- [[RtcLinkを起動 >RtcLink#startRtcLink]]し、[[SystemEditor を開き>RtcLink操作画面#systemediter]]ます。→RtcLinkの使用方法の詳細については[[RtcLink >RtcLink]]を参照
-- SeqOutとSeqInの両コンポーネントを起動します。
-- RtcLinkのNameServiceViewに両コンポーネントが現れるので、それらをSystemEditor上にドラッグする。
-- 両コンポーネントの対応ポートを結ぶ。（上図SeqIO実行例を参照）
-- どちらかのコンポーネントを右クリックし、「All Activate」を選択。

#br

***SimpleService
　ServicePortの使用方法を示したサンプルです．以下に示すIDLを使用してサービスを定義しています．

 typedef sequence<string> EchoList;
 typedef sequence<float> ValueList;
 
 interface MyService
 {
   string echo(in string msg);
   EchoList get_echo_history();
   void set_value(in float value);
   float get_value();
   ValueList get_value_history();
 };

MyServiceConsumer.shとMyServiceProvider.shを実行することでサンプル・コンポーネントが起動します．
Consumer側コンポーネントをActivateすると，コンソールに利用可能なコマンドリストが表示されますので，各コマンドをお試しください．(Port間の接続にはRtcLinkをご利用ください．)

#br

#ref(java_simplesvc0.png,center,70%)
CENTER:''SimpleService実行例(RtcLink接続画面)''
#br

#ref(UnixJavaMyServiceConsumer.png,nolink,center)
CENTER:''SimpleService実行例(MyServiceConsumer)''
#br
#br

#ref(UnixJavaMyServiceProvider.png,nolink,center)
CENTER:''SimpleService実行例(MyServiceProvider)''
#br
#br

****使い方
　SimpleServiceは、MyServiceConsumerからコマンドを送り、MyServiceProviderでそれを処理させるというサンプルです（※正確には、コマンドの解釈はConsumer側であり、Provider側の関数を呼び出す形で実装されている）。
MyServiceConsumerとMyServiceProviderの対応するポートをRtcLink上で接続してください。両コンポーネントをアクティベートする（ActivateするのはConsumer側コンポーネントだけでもよい）とConsumer側プロンプトにコマンド一覧が表示されるので、適宜コマンドを入力してください。Provider側の応答がプロンプト上で観察できます。
#br

- 手順
-- [[RtcLinkを起動 >RtcLink#startRtcLink]]し、[[SystemEditor を開き>RtcLink操作画面#systemediter]]ます。→RtcLinkの使用方法の詳細については[[RtcLink >RtcLink]]を参照
-- MyServiceConsumerとMyServiceProviderの両コンポーネントを起動します。
-- RtcLinkのNameServiceViewに両コンポーネントが現れるので、それらをSystemEditor上にドラッグする。
-- 両コンポーネントの対応ポートを結ぶ。（上図SimpleService実行例を参照）
-- どちらかのコンポーネントを右クリックし、「All Activate」を選択。（この場合は、Consumer側コンポーネントをActivateするだけでも動作します。）
-- Consumer側プロンプトにコマンドを入力。
#br
- コマンド
-- echo <message>：任意の<message>をエコー
-- set_value <value>：任意の<value>をProvider側にセット
-- get_value：現在Provider側にセットされている値を取得して表示
-- get_echo_history：今までのエコーメッセージの履歴をProvider側から取得
-- get_value_history：今までにセットしてきた値の履歴をProvider側から取得

#br
#br

***ConfigSample
　RTコンポーネントのコンフィギュレーションセットの使用方法を示したサンプルです．ConfigSample.sh　を実行することでサンプル・コンポーネントが起動します．
コンポーネントが正常に起動されると，コンフィギュレーション・セットが予め設定された状態となっております．RtcLinkを利用してコンフィギュレーション・セットを確認してみてください．

#br

#ref(java_configsample0.png,center,70%)
CENTER:''ConfigSample実行例''
#br
#br

****使い方
　RtcLinkのConfigrationViewで選択・設定したConfigrationSetに従ったデータセットをプロンプト上に表示し、絶えず表示更新をし続けます。
#br

- 手順
-- [[RtcLinkを起動 >RtcLink#startRtcLink]]し、[[SystemEditor を開き>RtcLink操作画面#systemediter]]ます。→RtcLinkの使用方法の詳細については[[RtcLink >RtcLink]]を参照
-- ConfigSampleコンポーネントを起動します。
-- RtcLinkのNameServiceViewにこのコンポーネントが現れるので、SystemEditor上にドラッグする。

#br
- 操作
-- RtcLinkのConfigrationViewから適当なConfigrationSet（default、mode0、mode1）を選ぶ。
-- 必要があれば、valueを変更する。
-- 「Apply」ボタンを押す。

#br
#br

''※'' RtcLink上のConfigurationViewでmode0を選択した場合、本来「日本語テスト」と表記される部分が文字化けしてしまうことがあります。この場合、examples/RTMExamples/ConfigSampleにあるrtc.confを次のように編集してください。
 rtc.confの最終行
 example.ConfigSample.config_file: ./RTMExamples/ConfigSample/configsample.conf
 となっている部分を次のように加筆・修正する
 example.ConfigSample.config_file: ./RTMExamples/ConfigSample/configsample.conf.euc

ConfigSampleの設定ファイルconfigsample.confにはこの他に文字コードに対応させるために、configsample.conf.sjisとconfigsample.conf.eucとが用意されています。

#br
#br
**ExtTrigger
　RTコンポーネント外部からの入力(イベント)により処理を実行するExecutionContextのサンプルです．ExtConsoleIn.shとExtConsoleOut.shを実行することでサンプル・コンポーネントが起動します．両コンポーネントを起動後，ExtConnector.shを実行して両コンポーネントのPort間を接続してください．

#br

#ref(UnixJavaExtConsoleIn.png,nolink,center)
CENTER:''ExtTrigger実行例(ExtConsoleIn)''
#br
#br

#ref(UnixJavaExtConsoleOut.png,nolink,center)
CENTER:''ExtTrigger実行例(ExtConsoleOut)''
#br
#br

#ref(UnixJavaExtConnector.png,nolink,center)
CENTER:''ExtTrigger実行例(ExtConnector)''
#br

Port間の接続が成功すると，ExtConnectorを実行したコンソールにどのコンポーネントの処理を進めるか選択するメニューが表示されます．各コンポーネントはこのコンソールに入力された値に応じて処理１周期づつ進めていきます．

#br
#br
**GUIIn
　GUI画面を持ったRTコンポーネントのサンプルです．GUIIn.sh を実行することでサンプル・コンポーネントが起動します．

#br

#ref(java_guiin0.png,nolink,center)
CENTER:''GUIIn実行例(GUIIn)''
#br
#br

#ref(java_guiin1.png,center,70%)
CENTER:''GUIIn実行例(RtcLink接続画面)''
#br

各GUI要素とPort間の関係は以下のとおりです．
:スライダ（上）| TimedLong型DataOutPort
:テキスト・ボックス（中）| TimedString型DataOutPort
:スピナ（下）| TimedDouble型DataOutPort

各Portは該当するPort間を接続後，GUI要素横のチェックボックスをONにすることで，入力データを送信します．（Port間の接続にはRtcLinkをご利用ください．出力データの確認にはSeqInなどの他サンプルをご利用ください．）
#br

****使い方
　GUIInコンポーネントのGUI画面でチェックを入れたコントロール（スライダ、スピナ）を操作すると、その値の変化にしたがってSeqInのGUI画面上の値も変化します。
#br

- 手順
-- [[RtcLinkを起動 >RtcLink#startRtcLink]]し、[[SystemEditor を開き>RtcLink操作画面#systemediter]]ます。→RtcLinkの使用方法の詳細については[[RtcLink >RtcLink]]を参照
-- GUIInとSeqInの両コンポーネントを起動します。
-- RtcLinkのNameServiceViewにこれらのコンポーネントが現れるので、二つともSystemEditor上にドラッグする。
-- 両コンポーネントの対応ポートを結ぶ。（上図GUIIn実行例を参照）
-- どちらかのコンポーネントを右クリックし、「All Activate」を選択

