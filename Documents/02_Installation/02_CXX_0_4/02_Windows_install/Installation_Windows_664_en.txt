#contents
//*Installing OpenRTM-aist in a Windows environment 

** Prerequisites
The following packages are necessary when installing OpenRTM-aist-0.4.0.

+The ADAPTIVE Communication Environment (ACE) 5.4 or later
+omniORB-4.0.7
+Python2.4
+OpenCV 1.0 (It is necessary when the USB camera sample is executed.)

The ACE as well as omniORB installers included header and library (LIB.DLL) for Windows are available in the [[download pages>Download/C++#l9d268fb]] and the following URLs.
Also, OpenCV installer can be download; from the Download; page of the following link of sourceforge.

- [[ACE win32 installer >http://www.openrtm.org/pub/Windows/ace/ACE-5.5_vc8.msi]]
- [[omniORB win32 installer >http://www.openrtm.org/pub/Windows/omniORB/omniORB-4.0.7_vc8.msi]]
- [[Python 2.4.2 win32 installer>http://www.python.jp/pub/ftp.python.org/python/2.4.2/python-2.4.2.msi]]
- [[OpenCV win32 installer(sourceforge)>http://downloads.sourceforge.net/opencvlibrary/OpenCV_1.0.exe?modtime=1161287502&big_mirror=1]]

Please note that if you install ACE, omniORB or OpenCV using other installers not shown above, the environment variables that are necessary for building OpenRTM-aist or customized components;, are not set.
We recommend that you install them using shown above installers.

&br;
** Installing ACE 
Download; ACE installer (ACE.msi) from [[ACE win32 installer >http://www.openrtm.org/pub/Windows/ace/ACE-5.5_vc8.msi]] link shown above.
Open the ACE.msi to start the installation process automatically.
To install ACE, follow the instructions directly given by the installer.

This installer does the following:
-The default directory (install_dir) is C:\Program Files.
-Copy headers and LIB etc to (install_dir)\ACE_wrappers
-Copy ACE.DLL and ACEd.DLL to the Windows system directory (Usually C:\Windows\system32).
-Set (install_dir)\ACE_wrappers to the environment variable ACE_ROOT.

&br;
**Installing omniORB
Download; omniORB installer (omniORB.msi) from [[omniORB win32 installer >http://www.openrtm.org/pub/Windows/omniORB/omniORB-4.0.7_vc8.msi]] link shown above.
Open the omniORB.msi to start the installation process automatically.
To install omniORB, follow the instructions directly given by the installer.

This installer does the following:
-The default directory (install_dir) is C:\Program Files.
-Copy the source codes, headers, scripts and libraries to (install_dir)\omniORB.
-Copy omniORBxxx.DLL(xxx is version number) to the Windows system directory (Usually C:\Windows\system32).
-Set (install_dir)\omniORB to the environment variable OMNI_ROOT.
&br;

Please restart your computer to activate the changes, since the environment variable is not notified to the application.
(Note: Go [My Computer]-[Property]-[The environment variable] and then select any environment variable and click [Edit] and the edit dialog is displayed. Once click [OK] without making further changes, the change of the environment variables is notified to the shell. The changed environment variable becomes effective in the application which executed from that shell. If you don't know well, restarting might be good.)

&br;
** Installing Python
Python is needed for omniidl (IDL compiler of omniORB) and other tools of OpenRTM-aist. 
Download; from [[Python 2.4.2 win32 installer>http://www.python.jp/pub/ftp.python.org/python/2.4.2/python-2.4.2.msi]] link shown above and start the installer.
The wizard sometimes gives you several options, but you can choose default to install.

&br;
**Installing OpenCV 
Download; OpenCV installer (OpenCV_1.0.exe) from [[OpenCV win32 installer(sourceforge)>http://downloads.sourceforge.net/opencvlibrary/OpenCV_1.0.exe?modtime=1161287502&big_mirror=1]] link shown above.
Run OpenCV_1.0.exe to start the installation process automatically.
To install OpenCV, follow the instructions directly given by the installer.

&br;
**Installing OpenRTM-aist 
Download; [[OpenRTM-aist installer >http://www.openrtm.org/pub/Windows/OpenRTM-aist/cxx/OpenRTM-aist-0.4.1_en.msi]] for Windows  (Note: This link leads to OpenRTM-aist0.4.1).
Open the OpenRTM-aist-0.4.0.msi to start the installation process automatically.
To install OpenRTM-aist, follow the instructions directly given by the installer.


This installer does the following:

-The default directory (install_dir) is C:\Program Files.
-Copy sources, headers, scripts and LIB etc to (install_dir)\OpenRTM-aist
-Copy RTMxxx.DLL (xxx is version number) to the Windows system directory (Usually C:\Windows\system32).
-Set (install_dir)\OpenRTM-aist to the environment variable RTM_ROOT.
-Register the sample programs to the program directory
-Register links of class reference to the program directory
&br;

We recommend that %RTM_ROOT%\bin and %RTM_ROOT%\utils\rtc-template are registered in the Path environment variable when using it on Windows.
&br;
**Running Sample Programs 
The sample programs registered in the program menu are set to use CORBA name server of localhost by default. Therefore, you first have to start CORBA name server.

Start [OpenRTM-aist]-[exmple]-[NameService.bat] in the program menu.
#br

#ref(NameServer_on_Windows.png,nolink,center)
CENTER:''Launching  CORBA name server''
#br

Once the name server starts, you start an appropriate sample component;. You test it by starting RtcLink and connecting between each appropriate one. 
(Refer to OpenRTM-aist-0.4.0 Java sample provided how to use each sample.)

The sample components; have the following functions:

|ConsoleInComp.exe|Outputs the input numeric values of the console to its OutPort. Used by connecting to ConsoleOutComp.exe.|
|ConsoleOutComp.exe|Displays the numeric values that you input to its InPort in the console. Used by connecting to ConsoleInComp.exe.|
|SequenceInComp.exe|Outputs the random numeric values (Short, Long, Float, Double, and its sequence type). Used by connecting to SequenceOutComp.exe.|
|SequenceOutComp.exe|Displays the numeric values (Short, Long, Float, Double, and its sequence type) that are input to its InPort. Used by connecting to SequenceInComp.exe.|
|MyServiceProviderComp.exe|Provides service of MyService type. Used by connecting to MyServiceConsumerComp.exe.|
|MyServiceConsumerComp.exe|Consumes service of MyService type. Used by connecting to MyServiceProviderComp.exe.|
|ConfigSampleComp.exe|Configuration sample. Sample to know behavior of the Configuration when modifying configurations with RtcLink.|
|USBCameraAcquireComp.exe|Acquires images from USB camera and output to its OutPort. Used by connecting to USBCameraMonitor.exe.|
|USBCameraMonitor.exe|Displays images input to InPort on the screen. Used by connecting to USBCameraAquireComp.exe.|

&br;

**Running Component Template Generator (rtc-template.py) 

We will generate a simple component using the component; template generator (rtc-template.py). You can make any folder to generate components; (any folder will do).

&br;Note: We assume that the path of rtc-template.py has been already registered in the environment variable PATH.
&br;Note: "rtc-template.py" is available under (install_dir)\OpenRTM-aist\utils\rtc-template.
&br;Note: Please check that the python interpreter is starting from the Python installation folder, since there might be multiple python.exe in the environment where Cygwin etc are installed.

&br;

&br;Let's first take a look at the help.

 > rtc-template.py --help
 
 Usage: rtc-template [OPTIONS]
 
 Options:
 
     [-h]                                  Print short help.
     [--help]                              Print details help.
     [--backend[=backend] or -b]           Specify template code  generator.
     [--module-name[=name]]                Your module name.
     [--module-desc[=description]]         Module description.
     [--module-version[=version]]          Module version.
     [--module-vendor[=vendor]]            Module vendor.
     [--module-category[=category]]        Module category.
     [--module-comp-type[=component_type]] Component type.
     [--module-act-type[=activity_type]]   Component's activity type.
     [--module-max-inst[=max_instance]]    Number of maximum instance.
     [--module-lang[=language]]            Language.
     [--config[=ParamName:Type:Default]]   Configuration variable.
     [--inport[=PortName:Type]]            InPort's name and type.
     [--outport[=PortName:Type]]           OutPort's name and type
     [--service[=PortName:Name:Type]]      Service Provider Port
     [--service-idl[=IDL_file]]            IDL file name for service
     [--consumer[=PortName:Name:Type]]     Service Consumer Port
     [--consumer-idl[=IDL_file]]           IDL file name for consumer
     [--idl-include=[path]]                Search path for IDL compile
        :
      trans:
        :
 Example:
     rtc-template -bcxx \
     --module-name=Sample --module-desc='Sample component' \
     --module-version=0.1 --module-vendor=AIST --module-category=Generic \
     --module-comp-type=DataFlowComponent --module-act-type=SPORADIC \
     --module-max-inst=10  \
     --config=int_param0:int:0 --config=int_param1:int:1 \
     --config=double_param0:double:3.14 --config=double_param1:double:9.99 \
     --config="str_param0:std::string:hoge" \
     --config="str_param1:std::string:foo" \
     --inport=Ref:TimedFloat --inport=Sens:TimedFloat \
     --outport=Ctrl:TimedDouble --outport=Monitor:TimedShort \
     --service=MySvcPort:myservice0:MyService \
     --consumer=YourSvcPort:yourservice0:YourService \
     --service-idl=MyService.idl --consumer-idl=YourService.idl

The skeleton of a component; will be generated by passing its specifications as arguments to rtc-template. In this sample, we try the ''Example:'' provided at the end of the help section except service port options.

&br;Note: When rtc-template is run in the Windows environment, &color(red){the option related with the service port cannot be used};.
&br;Note: If you want to use the service port by the component; of Windows edition.
Please build the component; by the compiler on Windows after executing rtc-template in a UNIX environment.

&br;

You can input the command from the command prompt, however, in this sample, we make the following batch file (gen.bat) in the folder of our choice. 
&br;

&br;

-batch file (gen.bat)

 @echo off
 
 rtc-template.py -bcxx^
  --module-name=Sample --module-desc="Sample component"^
  --module-version=0.1 --module-vendor=AIST --module-category=Generic^
  --module-comp-type=DataFlowComponent --module-act-type=SPORADIC^
  --module-max-inst=10^
  --config=int_param0:int:0 --config=int_param1:int:1^
  --config=double_param0:double:3.14 --config=double_param1:double:9.99^
  --config="str_param0:std::string:hoge"^
  --config="str_param1:std::string:foo"^
  --inport=Ref:TimedFloat --inport=Sens:TimedFloat^
  --outport=Ctrl:TimedDouble --outport=Monitor:TimedShort
 
 pause

When the batch file is executed, the DOS window with the following messages is opened, and the C++ code of the component; and the project file for VC++ are generated.

   File "Sample.h" was generated.
   File "Sample.cpp" was generated.
   File "SampleComp.cpp" was gaenerated.
   File "Makefile.Sample" was generated.
   File "OpenRTM-aist.vsprops" was generated.
   File "Sample.vcproj" was generated.
   File "README.Sample" was generated.
 Please push any key to continue.


Here, when we double-click Sample.vcproj, the development environment such as Visual Studio is started.
The executable component; (Sample.exe) is created by building the project.


