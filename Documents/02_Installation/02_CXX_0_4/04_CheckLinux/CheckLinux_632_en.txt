#contents
**Testing the Sample Programs 
Once the installation completed, you can test it on the sample application example/SimpleIO.

// > cd examples/SimpleIO/
// > run.sh

//At first, 2 kterm windows will appear, then after a few seconds, another one will appear.
//You must wait until the third window appears. You can then type numbers in the window called ConsoleIn. 
//These numbers should fit in a short int structure. 
//The numbers typed in will simultaneously be displayed in the console called ConsoleOut, along with the time (the format //for the time is sec:nsec). 
//Reaching this stage indicates that the build and installation of the libRTC.so library was successful.

**Testing the Component Template
Next, we will test the component template generator by writing a simple component. We will use the rtc-template template generator. After making the directory where we will generate the component (any directory will do), we will generate and compile the component.

 > cd 
 > mkdir SampleComponent
 > cd SampleComponent

Let's first look at the help provided by rtc-template.

 > rtm-template --help
 
 Usage: rtc-template [OPTIONS]
 
 Options:
 
     [-h]                                  Print short help.
     [--help]                              Print details help.
     [--backend[=backend] or -b]           Specify template code  generator.
     [--module-name[=name]]                Your module name.
     [--module-desc[=description]]         Module description.
     [--module-version[=version]]          Module version.
     [--module-vendor[=vendor]]            Module vendor.
     [--module-category[=category]]        Module category.
     [--module-comp-type[=component_type]] Component type.
     [--module-act-type[=activity_type]]   Component's activity type.
     [--module-max-inst[=max_instance]]    Number of maximum instance.
     [--module-lang[=language]]            Language.
     [--config[=ParamName:Type:Default]]   Configuration variable.
     [--inport[=PortName:Type]]            InPort's name and type.
     [--outport[=PortName:Type]]           OutPort's name and type
     [--service[=PortName:Name:Type]]      Service Provider Port
     [--service-idl[=IDL_file]]            IDL file name for service
     [--consumer[=PortName:Name:Type]]     Service Consumer Port
     [--consumer-idl[=IDL_file]]           IDL file name for consumer
     [--idl-include=[path]]                Search path for IDL compile
        :
       trans:
        :
 Example:
     rtc-template -bcxx \
     --module-name=Sample --module-desc='Sample component' \
     --module-version=0.1 --module-vendor=AIST --module-category=Generic \
     --module-comp-type=DataFlowComponent --module-act-type=SPORADIC \
     --module-max-inst=10  \
     --config=int_param0:int:0 --config=int_param1:int:1 \
     --config=double_param0:double:3.14 --config=double_param1:double:9.99 \
     --config="str_param0:std::string:hoge" \
     --config="str_param1:std::string:foo" \
     --inport=Ref:TimedFloat --inport=Sens:TimedFloat \
     --outport=Ctrl:TimedDouble --outport=Monitor:TimedShort \
     --service=MySvcPort:myservice0:MyService \
     --consumer=YourSvcPort:yourservice0:YourService \
     --service-idl=MyService.idl --consumer-idl=YourService.idl

We will generate the skeleton of a component by passing its specifications as arguments to rtc-template. Here, we will try the ''Example:'' provided at the end of the help section.

In the ''Example'', two IDL files need to be put in the current directory, since the options are set to use MyService as a service provider and YourService as a service consumer.
Here, we will create a very simple IDL file as follow.

-MyService.idl
 interface MyService 
 {
   void echo();
 };

-YourService.idl
 interface YourService
 {
    void echo();
 };

After putting these files, we copy and paste "Example" as the input commands.

 > rtm-template -bcxx \
     --module-name=Sample --module-desc='Sample component' \
     --module-version=0.1 --module-vendor=AIST --module-category=Generic \
     --module-comp-type=DataFlowComponent --module-act-type=SPORADIC \
     --module-max-inst=10  \
     --config=int_param0:int:0 --config=int_param1:int:1 \
     --config=double_param0:double:3.14 --config=double_param1:double:9.99 \
     --config="str_param0:std::string:hoge" \
     --config="str_param1:std::string:foo" \
     --inport=Ref:TimedFloat --inport=Sens:TimedFloat \
     --outport=Ctrl:TimedDouble --outport=Monitor:TimedShort \
     --service=MySvcPort:myservice0:MyService \
     --consumer=YourSvcPort:yourservice0:YourService \
     --service-idl=MyService.idl --consumer-idl=YourService.idl
   File "MyServiceSVC_impl.h" was generated.
   File "MyServiceSVC_impl.cpp" was generated.
   File "Sample.h" was generated.
   File "Sample.cpp" was generated.
   File "SampleComp.cpp" was generated.
   File "Makefile.Sample" was generated.
   File "README.Sample" was generated.
 > ls
 Makefile.Sample         MyServiceSVC_impl.h     Sample.h
 MyService.idl           README.Sample           SampleComp.cpp
 MyServiceSVC_impl.cpp   Sample.cpp              YourService.idl


Here, C++ source files, the implementation source files of service and the Makefile.Sample have then be generated. 
You can make like this:

 > make -f Makefile.Sample
 or also
 > mv Makefile.Sample Makefile
 > make

Let's now run the make command;

 > make -f Makefile.Sample
      :
     trans:
      :
 c++ -o SampleComp Sample.o MyServiceSkel.o      YourServiceStub.o
  MyServiceSVC_impl.o SampleComp.o `rtm-config --libs`
 > ls
 Makefile.Sample         MyServiceSkel.o         SampleComp.o
 MyService.hh            MyServiceStub.cpp       YourService.hh
 MyService.idl           MyServiceStub.h         YourService.idl
 MyServiceDynSK.cc       README.Sample           YourServiceDynSK.cc
 MyServiceSK.cc          Sample.cpp              YourServiceSK.cc
 MyServiceSVC_impl.cpp   Sample.h                YourServiceSkel.cpp
 MyServiceSVC_impl.h     Sample.o                YourServiceSkel.h
 MyServiceSVC_impl.o     Sample.so*              YourServiceStub.cpp
 MyServiceSkel.cpp       SampleComp*             YourServiceStub.h
 MyServiceSkel.h         SampleComp.cpp          YourServiceStub.o

Both the loadable module version (Sample.so) and the executable version (SampleComp) of the component were built. 
Let's try to run the executable version of the component. A configuration file (usually named rtc.conf) must be provided when executing a component. 
Here, we will create a very simple one in the current directory.

-rtc.conf
 corba.nameservers: Name Server's name : Port number
 naming.formats: %n.rtc
 logger.log_level: PARANOID

In this example, we will set the hostname to rtm.or.jp and the port number to default.

-rtc.conf
 corba.nameservers: rtm.or.jp
 naming.formats: %n.rtc
 logger.log_level: PARANOID

Next, we start the CORBA Naming Service. 
The CORBA Naming Service can be started by inputting the following command :

 > rtm-naming [Port number]

The port number passed as argument should be the same as the one specified in rtc.conf. 
If the port number is not specified, default will be used.

 > rtm-naming
 Starting omniORB omniNames: rtm:2809
 n-ando@rtm:/tmp/SampleComponent> 
 Fri Apr 27 03:53:09 2007:
 
 Starting omniNames for the first time.
 Wrote initial log file.
 Read log file successfully.
 Root context is IOR:010000002b00000049444c3a6f6d672e6f72672f436f734e616d696e672f4e616d696e67436f6e746578744578743a312e300000010000000000000060000000010102000e0000003135302e32392e39362e31363900611e0b0000004e616d6553657276696365000200000000000000080000000100000000545441010000001c00000001000000010001000100000001000105090101000100000009010100
 Checkpointing Phase 1: Prepare.
 Checkpointing Phase 2: Commit.
 Checkpointing completed.

Next, we will start the component.

 > SampleComp -f rtc.conf
 or
 > SampleComp (Read rtc.conf in the current directory by default)

The component can be started.
OpenRTM-aist is properly installed, if the component with the following specifications is shown on RTSystemEditor.:
The manual for RTSystemEditor is [[here:/en/node/694]]
- 2 InPorts
- 2 OutPorts
- 2 Service ports
- 6 Configurations

For more details on developing components, please refer to the manual.



