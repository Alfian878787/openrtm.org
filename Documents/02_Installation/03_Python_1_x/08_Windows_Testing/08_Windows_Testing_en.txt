//**Testing the Sample Programs 

Once the installation completed, you can test it using the sample that is installed at the same time.

If you install using packages, the sample source is installed under the directory %PYTHONPATH%\OpenRTM\examples\.
(Substitute '%PYTHONPATH%' to the path of the environment variable PYTHONPATH set by [[Setting Environment Variables>#b548f92e]] .)

Open [My Computer] and move to <%PYTHONPATH% or the extracted OpenRTM-aist-Python folder>\OpenRTM\examples\SimpleIO and then double-click run.py.

At first, 3 windows will appear, then after a few seconds, another one will appear.
You must wait until the fourth window appears. You can then type a number in the window displayed as "Please input number:". 
It should fit in a long int structure. The number typed in will simultaneously be displayed in the console ConsoleOut, along with the time (the format for the time is sec:nsec). 
Reaching this stage indicates that the installation of the OpenRTM-aist-Python was successful.


&color(red){Note1: In the sample of run.py, since the path of python.exe assumes to have already been set, you should add the environment variable Path to the path of the Python installed folder in advance. (C:\Python24 etc)};

&color(red){Note2: In the environment where Cygwin etc is installed, since there may be serveral versions of  python.exe, please check that python.exe is running in the installed folder of Python. };

&color(red){Example: Check version using python -V , or print which python.exe is executed with "which python", etc (in the environment where Cygwin is installed)};

**Testing the Component Template 

Next, we will test the component template generator by writing a simple component. We will use the template generator (rtc-template.py). After making the directory where we will generate the component (any path or any directory will do), we will generate and compile the component.

Open the command prompt and move to the folder which was created.

 > cd C:\Documents and Settings\<user name>\SampleComponent

Let's first look at the help.

 > C:\Python24\Lib\site-packages\OpenRTM\rtc-template\rtc-template.py --help
 
 Usage: rtc-template [OPTIONS]
 
 Options:
 
     [-h]                                  Print short help.
     [--help]                              Print details help.
     [--backend[=backend] or -b]           Specify template code  generator.
     [--module-name[=name]]                Your module name.
     [--module-desc[=description]]         Module description.
     [--module-version[=version]]          Module version.
     [--module-vendor[=vendor]]            Module vendor.
     [--module-category[=category]]        Module category.
     [--module-comp-type[=component_type]] Component type.
     [--module-act-type[=activity_type]]   Component's activity type.
     [--module-max-inst[=max_instance]]    Number of maximum instance.
     [--module-lang[=language]]            Language.
     [--config[=ParamName:Type:Default]]   Configuration variable.
     [--inport[=PortName:Type]]            InPort's name and type.
     [--outport[=PortName:Type]]           OutPort's name and type
     [--service[=PortName:Name:Type]]      Service Provider Port
     [--service-idl[=IDL_file]]            IDL file name for service
     [--consumer[=PortName:Name:Type]]     Service Consumer Port
     [--consumer-idl[=IDL_file]]           IDL file name for consumer
     [--idl-include=[path]]                Search path for IDL compile
        :
       trans:
        :
 Example:
     rtc-template -bcxx \
     --module-name=Sample --module-desc='Sample component' \
     --module-version=0.1 --module-vendor=AIST --module-category=Generic \
     --module-comp-type=DataFlowComponent --module-act-type=SPORADIC \
     --module-max-inst=10  \
     --config=int_param0:int:0 --config=int_param1:int:1 \
     --config=double_param0:double:3.14 --config=double_param1:double:9.99 \
     --config="str_param0:std::string:hoge" \
     --config="str_param1:std::string:foo" \
     --inport=Ref:TimedFloat --inport=Sens:TimedFloat \
     --outport=Ctrl:TimedDouble --outport=Monitor:TimedShort \
     --service=MySvcPort:myservice0:MyService \
     --consumer=YourSvcPort:yourservice0:YourService \
     --service-idl=MyService.idl --consumer-idl=YourService.idl

&color(red){Note: If OpenRTM-aist for C++ has already been installed, the rtc-template for C++ is possible to be used. When the Python template is generated, since the rtc-template.py for Python is necessary to be used, specify the rtc-template.py with its full path like execution example above.};

The skeleton of the component will be generated by passing the settings of the component we want to build as arguments to rtc-template. Here, we will try the ''Example:'' provided at the end of the help section.

In the ''Example'', the IDL files need to be put in the current directory, since the options are set to use MyService as a service provider and YourService as a service consumer.
Here, we will create very simple IDL files as follow.

-MyService.idl
 interface MyService 
 {
   void echo();
 };

-YourService.idl
 interface YourService
 {
    void echo();
 };

After putting these files, we copy and paste "Example" as the input commands.

 > python C:\Python24\Lib\site-packages\OpenRTM\rtc-template\rtc-template.py -bpython^
     --module-name=Sample --module-desc="Sample component"^
     --module-version=0.1 --module-vendor=AIST --module-category=Generic^
     --module-comp-type=DataFlowComponent --module-act-type=SPORADIC^
     --module-max-inst=10^
     --config=int_param0:int:0 --config=int_param1:int:1^
     --config=double_param0:double:3.14 --config=double_param1:double:9.99^
     --config="str_param0:std::string:hoge"^
     --config="str_param1:std::string:foo"^
     --inport=Ref:TimedFloat --inport=Sens:TimedFloat^
     --outport=Ctrl:TimedDouble --outport=Monitor:TimedShort^
     --service=MySvcPort:myservice0:MyService^
     --consumer=YourSvcPort:yourservice0:YourService^
     --service-idl=MyService.idl --consumer-idl=YourService.idl
  File "MyService_idl_example.py" was generated.
  File "Sample.py" was generated.
  File "README.Sample" was generated.


Note: Since sample displayed by --help is for generating C++ codes, when you generate the source code for Python, please substitute &color(RED){"-bcxx" to "-bpython"};.

Note: If you execute rtc-template.py on Windows environment, you should enclose in double quotation (") such as "Sample component" etc. If you enclose in single quotation ('), the options can't be recognized correctly. In addition, the line continuous symbol needs to be edit form (\) to (^).

 
 > dir
 MyService.idl     MyService_idl_example.py  Sample.py        YourService_idl.py  _GlobalIDL__POA/
 MyService_idl.py  README.Sample             YourService.idl  _GlobalIDL/

As above described, both Python code and service implementation code have been generated.

Here, the executable version of the component (Sample.py) has created.

Note: We recommend to make and use the following batch file, because it is tedious to enter these commands whenever rtc-template.py runs.

 python C:\Python24\Lib\site-packages\OpenRTM\rtc-template\rtc-template.py -bpython^
 	--module-name=Sample --module-desc="Sample component"^
 	--module-version=0.1 --module-vendor=AIST --module-category=Generic^
 	--module-comp-type=DataFlowComponent --module-act-type=SPORADIC^
 	--module-max-inst=10^
 	--config=int_param0:int:0 --config=int_param1:int:1^
 	--config=double_param0:double:3.14 --config=double_param1:double:9.99^
 	--config="str_param0:std::string:hoge"^
 	--config="str_param1:std::string:foo"^
 	--inport=Ref:TimedFloat --inport=Sens:TimedFloat^
 	--outport=Ctrl:TimedDouble --outport=Monitor:TimedShort^
 	--service=MySvcPort:myservice0:MyService^
 	--consumer=YourSvcPort:yourservice0:YourService^
 	--service-idl=MyService.idl --consumer-idl=YourService.idl

Let's try to run the executable version of the component. 
A configuration file (usually named rtc.conf) must be provided when executing a component. 
Here, we will create a very simple one in the current directory.

-rtc.conf
 corba.nameservers:  Name Server's name : Port number
 naming.formats: %n.rtc
 logger.log_level: PARANOID

In this example, we will set the hostname to localhost and the port number to default.

-rtc.conf
 corba.nameservers: localhost
 naming.formats: %n.rtc
 logger.log_level: PARANOID

Next, we start the CORBA Naming Service. Open another command prompt:
 type;
 > python %PYTHONPATH%\OpenRTM\rtm-naming\rtm-naming.py [port number]
 or 
 move the current directory to '%PYTHONPATH%\OpenRTM\rtm-naming' and then type;
 >python rtm-naming.py 
 or 
 double-click rtm-naming.py under %PYTHONPATH%\OpenRTM\rtm-naming\


The CORBA Naming Service will be started. Please start it by specifying port number in rtc.conf.If the port number is not specified, its default will be used.

 > python %PYTHONPATH%\OpenRTM\rtm-naming\rtm-naming.py
 Starting omniORB omniNames:  localhost : 2809
 
 Starting omniNames for the first time.
 Wrote initial log file.
 Read log file successfully.
 Root context is IOR:010000002b00000049444c3a6f6d672e6f72672f436f734e616d696e672f4e616d696e67436f6e746578744578743a312e300000010000000000000060000000010102000e0000003135302e32392e39362e31363700f90a0b0000004e616d6553657276696365000200000000000000080000000100000000545441010000001c00000001000000010001000100000001000105090101000100000009010100
 Checkpointing Phase 1: Prepare.
 Checkpointing Phase 2: Commit.
 Checkpointing completed.


Next, we will start the component.

 > python Sample.py -f rtc.conf ;
 or
 > python Sample.py (Read rtc.conf in the current directory by default) ;
 or
 Double-click Sample.py ;

The component can be started.
OpenRTM-aist-Python-0.4.1 is properly installed, if the component with the following specifications is shown on RtcLink:
- 2 InPorts
- 2 OutPorts
- 2 Service ports
- 6 Configurations

For more details on developing components, please refer to the manual.


----
-[[Install(Python, Windows):/node/908]]
-[[Installing OpenRTM-aist in a Windows environment:/node/909]]
-Testing the Sample Programs
-[[Building OpenRTM-aist on Windows system:/node/911]]
-[[Notice:/node/912]]