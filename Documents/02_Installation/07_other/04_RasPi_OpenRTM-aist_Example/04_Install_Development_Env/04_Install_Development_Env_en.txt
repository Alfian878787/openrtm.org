// Title: Installation of development environment
// * 開発環境のインストール
#contents

By installing the development environment on Raspberry Pi, it is possible to develop by self-compiling on Raspberry Pi. (On embedded Linux boards of this size, development by cross compiling is usually usual.)
//Raspberry Pi に開発環境をインストールすれば、Raspberry Pi上でのセルフコンパイルによる開発が可能です。(このサイズの組込み Linux ボードでは、通常クロスコンパイルによる開発が普通です。)

Therefore, you can compile and execute the RT component code generated by RTC Builder on PC on Raspberry Pi.
Unfortunately it seems difficult to install Eclipse and use it at practical speed.
//従って、PC上の RTCBuilder で生成した RTコンポーネントのコードを、Raspberry Pi上でコンパイル、実行することができます。
//残念ながら Eclipse をインストールして実用的な速度で使用することは難しいようです。

In this section we will install the necessary packages to develop RT components.
//この節では RTコンポーネントを開発するために必要なパッケージをインストールしていきます。

//------------------------------------------------------------
** (G)Installing OpenRTM-aist
//** OpenRTM-aist のインストール
//------------------------------------------------------------
OpenRTM-aist can be installed using apt-get.
First, modify sources.list.
//OpenRTM-aist は、apt-get を使用してインストールすることが可能です。
//まず sources.list を修正します。

 $ sudo vi /etc/apt/sources.list

Add the following line to source list.
//sourcelist に以下の１行を加えてください。

 deb http://openrtm.org/pub/Linux/raspbian/ wheezy main

Next, install according to the following procedure.
//次に、以下の手順でインストールを行います。

 # apt-get update
 # apt-get -y --force-yes install gcc g++ make uuid-dev
 # apt-get -y --force-yes install libomniorb4-dev omniidl omniorb-nameserver
 # apt-get -y --force-yes install openrtm-aist openrtm-aist-dev openrtm-aist-example
 # apt-get -y --force-yes install openrtm-aist-python openrtm-aist-python-example

*** (G)Running sample components
//*** サンプルコンポーネントの実行

After installing OpenRTM-aist, start the sample component and check whether OpenRTM-aist was installed correctly.
//OpenRTM-aist のインストール後、サンプルコンポーネントを起動してOpenRTM-aist が正しくインストールされたかどうか確認します。

As shown below, execute the name server and ConsoleOut component on the PC side with the name server and ConsoleIn component, Raspberry Pi side.
By default, the component connects to the localhost name server, so you can use it to easily access the component without setting up a specific name server in rtc.conf.
In the RTSystemEditor on the PC, connect to the PC's name server and the name server on Raspberry Pi and connect the ConsoleIn component and the ConsoleOut component.
//下図のように、PC側でネームサーバと ConsoleIn コンポーネント、Raspberry Pi側でネームサーバと ConsoleOut コンポーネントを実行します。
//コンポーネントはデフォルトで localhost のネームサーバに接続しますので、これを利用して rtc.conf に特定のネームサーバを設定することなく簡単にコンポーネントにアクセスします。
//PC上の RTSystemEditor で、PC のネームサーバと Raspberry Pi上のネームサーバに接続し、ConsoleIn コンポーネントと ConsoleOut コンポーネントを接続します。

#ref(sample_component_test.png,center)
CENTER: ''Run sample''
//CENTER: ''サンプルの実行''

**** (G)Running ConsoleOut on Raspberry Pi
//**** Raspberry Pi上で ConsoleOut の実行

After connecting to Raspberry Pi with TeraTerm etc., start the component.
Launch ConsoleOut after starting the naming service.
//Raspberry Pi に TeraTerm などで接続後、コンポーネントを起動します。
//ネーミングサービスを起動してから ConsoleOut を起動します。

 $ rtm-naming
 $ /usr/share/OpenRTM-x.y/examples/ConsoleOutComp
 or
 $ python /usr/share/OpenRTM-x.y/examples/python/SimpleIO/ConsoleOutComp.py

When installing omniorb-nameserver above, omniORB naming service is started automatically at system startup.
However, depending on the startup timing of the name service and startup timing of the network interface, it may not be able to access the name server correctly from the outside.
In that case, you may be able to deal with the problem by restarting the name server with the rtm-naming command.
//上の omniorb-nameserver のインストール時に、システム起動時に自動的に omniORB のネームサービスが起動するようになっています。
//しかし、ネームサービスの起動タイミングとネットワークインターフェースの起動タイミングによっては、外部からネームサーバに正しくアクセスできない場合があります。
//その場合は、rtm-naming コマンドによりネームサーバを再起動することで、問題に対処できる場合があります。

**** (G)Running ConsoleIn on the PC side
//**** PC側での ConsoleIn の実行

First, start the name server.
In Windows, start from "Start Naming Service" under "OpenRTM-aist x.y" > "C++" > "tools" from the start menu.
Also, start RTSystemEditor.
//まず、ネームサーバを起動します。
//Windows の場合、スタートメニューから 「OpenRTM-aist x.y」→「C++」→「tools」の下の''Start Naming Service'' から起動します。
//ついでに、RTSystemEditor も起動しておきます。

#ref(namingservice_on_windows.png,center,80%)
CENTER: ''Start naming service''
//CENTER: ''ネーミングサービスの起動''

Next, start ConsoleIn.
Click "ConsoleOut" under "OpenRTM-aist x.y" > "C++" > "examples" to start the ConsoleOut component.
//続いて、ConsoleIn を起動します。
//「OpenRTM-aist x.y」→「C++」→「examples」の下の ConsoleOut をクリックして ConsoleOut コンポーネントを起動します。

**** (G)Connection by RTSystemEditor
//**** RTSystemEditor により接続

Click the outlet icon in NameService View on the left side of RTSystemEditor and connect to the name server.
First, connect to the name server of the local host. Enter localhost in the connection dialog.
//RTSystemEditor の左側の NameService View のコンセントアイコンをクリックし、ネームサーバに接続します。
//まず、自ホストのネームサーバに接続します。接続ダイアログに localhost と入力します。

#ref(connect_ns_localhost.png,center,80%)
CENTER: ''Connect to name server (localhost)''
//CENTER: ''ネームサーバへの接続(localhost)''

Next, connect to the name server of Raspberry Pi. Click on the connection icon of NameService View again and enter the host name of Raspberry Pi+.local in the dialog.
//次に、Raspberry Pi のネームサーバへ接続します。再度 NameService View の接続アイコンをクリックし、Raspberry Pi のホスト名+.localををダイアログに入力します。

#ref(connect_ns_myhost.png,center,80%)
CENTER: ''Connect to name server (Raspberry Pi)''
//CENTER: ''ネームサーバへの接続(Raspberry Pi)''

The name service view shows the status of the two name servers and you should see two components, ConsoleIn0 and ConsoleOut0, under each name server.
Click on the online editor icon (icon marked ON) on the RTSystemEditor menu bar to open SystemEditor.
Drag and drop ConsoleIn0 and ConsoleOut0 from NameService View onto SystemEditor and connect InPort and OutPort respectively.
//ネームサービスビューには2つのネームサーバの状態が表示され、それぞれのネームサーバの下に ConsoleIn0、ConsoleOut0 という2つのコンポーネントが見えているはずです。
//RTSystemEditor のメニューバーのonlineエディタアイコン(ONと書かれたアイコン)をクリックし、SystemEditor を開きます。
//NameService View から ConsoleIn0 と ConsoleOut0 をそれぞれ SystemEditor 上にドラッグアンドドロップし、InPort と OutPort を接続します。

#ref(rtsystemeditor_consoleinout.png,center,80%)
CENTER: ''Connection between ConsoleIn and ConsoleOut by RTSystemEditor''
//CENTER: ''RTSystemEditorによるConsoleInとConsoleOutの接続''

Click the green play button on the menu bar to activate the two components and to the state shown above.
//メニューバーの緑の再生ボタンをクリックすると、2つのコンポーネントがアクティベートされ上図のような状態になります。

Enter the appropriate number from the window of the ConsoleIn component on the PC side.
//PC側の ConsoleIn コンポーネントのウインドウから適当な数字を入力します。

#ref(consolein_window.png,center,80%)
CENTER: ''Enter numeric value from ConsoleIn (PC)''
//CENTER: ''ConsoleIn (PC) 側から数値を入力''

Then, the numerical value entered in ConsoleIn appears on the display of ConsoleOut on Raspberry Pi side as shown below.
//すると、下図のように Raspberry Pi側の ConsoleOut の表示に ConsoleIn で入力した数値が現れます。

#ref(consoleout_window.png,center,80%)
CENTER: ''ConsoleOut (Raspberry Pi) side display''
//CENTER: ''ConsoleOut (Raspberry Pi) 側の表示''

&aname(trouble);

*** (G)trouble shooting
//*** トラブルシューティング

Depending on the network environment and PC settings, the above procedure may not work. Please refer to the troubleshooting below and solve the problem.
//ネットワーク環境や PC の設定により、上記の手順でうまくいかないことがあります。以下のトラブルシューティングを参考に問題を解決してください。

**** (G)ConsoleOut is not displayed on the service of Raspberry Pi side
//**** Raspberry Pi側のサービスのしたに ConsoleOut が表示されない

:Name server problem | When the end server address of the name server is invalid This kind of phenomenon occurs. It may be resolved by restarting the name server with rtm-naming.
In addition, if there are two or more network interfaces such as Raspberry Pi's wired LAN and wireless LAN etc., there are cases to resolve by using only one network used for connection with PC.
//:ネームサーバの問題|ネームサーバのエンドポイントアドレスが不正な場合このような現象が起きます。rtm-naming で再度ネームサーバを起動しなおすと解決する場合があります。
//このほか、Raspberry Pi の有線LANと無線LAN等2つ以上のネットワークインターフェースがある場合、PCとの接続に使用するどちらかのネットワークのみを使うように設定することで解決するケースもあります。

:Component problem | A name server other than localhost may be registered in the configuration file (rtc.conf) that the component has read. Please set up to register the component on the localhost name server such as described as corba.nameservers: localhost.
Also, if there are two or more network interfaces such as Raspberry Pi's wired LAN and wireless LAN, there are cases to solve by using only one network used for connection with PC.
//:コンポーネントの問題|コンポーネントが読み込んだ設定ファイル(rtc.conf)に localhost 以外のネームサーバが登録されている場合が考えられます。corba.nameservers: localhost と記述するなど localhost のネームサーバにコンポーネントを登録するよう設定してください。
//また、Raspberry Pi の有線LANと無線LAN等2つ以上のネットワークインターフェースがある場合、PCとの接続に使用するどちらかのネットワークのみを使うように設定することで解決するケースもあります。

**** (G)Can not connect with RTSystemEditor, there is no reaction, etc.
//**** RTSystemEditor で接続できない、反応がなくなる等

:PC side component problem | When there are two or more network interfaces on the PC, this happens when the interface address that Raspberry Pi does not use is used as a component reference.
Check the IP address of the PC with ipconfig from the command prompt and set the IP address of the one used for rtc.conf as follows.
//:PC側のコンポーネントの問題|PCにネットワークインターフェースが2つ以上ある場合、Raspberry Pi で使用しない側のインターフェースアドレスがコンポーネントの参照として利用されている場合このような現象が起こります。
//コマンドプロンプトから ipconfig で PC の IPアドレスを調べる等して、rtc.conf に使用する方の IPアドレスを以下のように設定します。

 corba.endpoints: 192.168.11.20

However, in Vista and later Windows, files below C:\Program Files can not be edited easily. Take action by copying (or newly creating) ConsoleIn.exe and rtc.conf in an appropriate directory such as C:\tmp.
//ただし、Vista 以降の Windows では、C:\Program Files 以下のファイルは簡単には編集ができなくなっています。c:\tmp など適当なディレクトリーに ConsoleIn.exe と rtc.conf をコピー(あるいは新たに作成)するなどして、対処してください。

:Raspberry Pi side component problem | When there are two or more network interfaces such as Raspberry Pi's wired LAN and wireless LAN, etc., if each is connected to a different network, the same problem as the above PC occurs . Check the IP address of the one you use with ifconfig and put it in rtc.conf as follows.
//:Raspberry Pi側のコンポーネントの問題|Raspberry Pi の有線LANと無線LAN等2つ以上のネットワークインターフェースがある場合で、それぞれが別のネットワークにつながっている場合、上述のPCと同様の問題が起こります。ifconfig で使用する方のIPアドレスを調べ、rtc.conf に以下のように記載します。

 corba.endpoints: 192.168.11.21

** (G)Installing CMake
//** CMake のインストール

cmake can be installed using apt-get. Install as a user with root authority.
//cmake は apt-get を利用してインストールする事が可能です。root 権限を持つユーザでインストールを行います｡

 $ sudo apt-get update
 $ sudo apt-get install cmake

** (G)About installation of Doxygen
//** Doxygen のインストールについて

In the CMake-based RT component project, it is set to generate documents by using doxygen by default.
However, installing doxygen will install LaTeX and others at the same time, which puts pressure on the capacity of the SD card, so we will not install Doxygen in this tutorial.
//CMake ベースの RTコンポーネントプロジェクトでは、デフォルトで doxygen を利用してドキュメントを生成するように設定されています。
//しかしながら、doxygen をインストールすると、LaTeX等も同時にインストールされてしまい、SDカードの容量を圧迫しますのでこのチュートリアルでは Doxygen をインストールしません。

*** (G)How to not generate documents
//*** ドキュメントを生成しない方法

To suppress document generation by doxygen in CMake based RTC project, at the top level CMakeLists.txt,
//CMake ベースの RTCプロジェクトにおいて doxygen でのドキュメント生成を抑制するには、トップレベルの CMakeLists.txt で、

 option(BUILD_DOCUMENTATION "Build the documentation" ON)
    ↓
 option(BUILD_DOCUMENTATION "Build the documentation" OFF)

Change it as follows.
//のように変更します。

*** (G)Installing Doxygen
//*** Doxygen のインストール

If the SD card has enough capacity doxygen can be installed with apt-get as follows.
//SDカードの容量が十分ある場合 doxygen を apt-get で以下のようにインストールすることができます。

 $ sudo apt-get install doxygen

&color(red){It will take about ten minutes before Doxygen installation is complete.};
//&color(red){※Doxygen のインストールが完了するまでには、十数分程度かかります｡};

** (G)Installing Subversion/Git
//** Subversion/Git のインストール

It is recommended to install subversion / git because it is used frequently to acquire the source code from the outside.
//ソースコードを外部から取得する際にたびたび使用するので subversion/git をインストールすることをお勧めします。

 $ sudo apt-get install subversion git

** (G)Test compilation
//** コンパイルのテスト

I will test whether the component can be compiled.
There are components for mobile robot Kobuki in the following repository, so check it out and compile it.
//コンポーネントのコンパイルが行えるかテストしてみます。
//以下のリポジトリに移動ロボット Kobuki用コンポーネントがありますので、チェックアウトしてコンパイルしてみます。

- KobukiAIST RTC: http://svn.openrtm.org/components/trunk/mobile_robots/kobuki

*** (G)Check out the source code
//*** ソースコードのチェックアウト

Let's check out the source code.
//ソースコードをチェックアウトしてみます。

 $ svn co http://svn.openrtm.org/components/trunk/mobile_robots/kobuki
   : Omission
 A    kobuki/libkobuki/doc/CMakeLists.txt
 A    kobuki/libkobuki/License.rtf
 A    kobuki/libkobuki/CMakeLists.txt
 A    kobuki/rtc.conf
 A    kobuki/CMakeLists.txt
 Checked out revision 2.
 $

kobuki directory How the source code has been checked out, create a build directory, build and install within it.
//kobuki ディレクトリーいかにソースコードがチェックアウトされましたので、build ディレクトリーを作成しその中でビルド、インストールします。

  $ cd kobuki
  $ mkdir build
  $ cd build
  $ cmake -DCMAKE_INSTALL_PREFIX=/usr ..
  $ make
  $ cd src
  $ make install

kobuki directory How the source code has been checked out, create a build directory, build and install within it....
//このソースコードはデフォルトで Doxygenに よるドキュメント生成が OFF になっていますので、Doxygen がインストールされていなくてもビルドできるでしょう。