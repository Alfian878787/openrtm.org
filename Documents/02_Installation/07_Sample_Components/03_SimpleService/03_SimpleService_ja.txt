#contents
//**SimpleService
このサンプルは、OpenRTM-aist の C++版、Python版、Java版 に同梱されています。
***概要
ServicePortの使用方法を示したサンプルです。以下に示すIDLを使用してサービスを定義しています。

 typedef sequence<string> EchoList;
 typedef sequence<float> ValueList;
 
 interface MyService
 {
   string echo(in string msg);
   EchoList get_echo_history();
   void set_value(in float value);
   float get_value();
   ValueList get_value_history();
 };

MyServiceConsumerコンポーネントとMyServiceProviderコンポーネントを起動します。
Consumer側コンポーネントをActivateすると、コンソールに利用可能なコマンドリストが表示されますので、各コマンドをお試しください。(Port間の接続にはRTSystemEditorをご利用ください。)

#br

&br;
***起動画面

#ref(SimpleService_example_rtse_ja.png,60%,center)
CENTER:''SimpleService実行例(RTSystemEditor接続画面)''
#br

#ref(MyService_example.png,60%,center)
CENTER:''MyServiceConsumerコンポーネントとMyServiceProviderコンポーネントの実行例''

&br;
***使い方
SimpleServiceは、MyServiceConsumerからコマンドを送り、MyServiceProviderでそれを処理させるというサンプルです（※正確には、コマンドの解釈はConsumer側であり、Provider側の関数を呼び出す形で実装されています）。
MyServiceConsumerとMyServiceProviderの対応するポートをRTSystemEditor上で接続してください。両コンポーネントをアクティベートします（ActivateするのはConsumer側コンポーネントだけでもよい）とConsumer側プロンプトにコマンド一覧が表示されるので、適宜コマンドを入力してください。Provider側の応答がプロンプト上で観察できます。
#br

- 手順

-- RTSystemEditorを起動し、SystemEditorを用意します。→RTSystemEditorの使用方法の詳細については[[RTSystemEditor >/node/1175]]を参照
-- MyServiceConsumerとMyServiceProviderの両コンポーネントを起動します。
コンポーネントの起動はOSやOpenRTM-aist の言語によってことなりますので、以下の表を参考に起動します。
|LEFT:110|LEFT:120|LEFT:120|LEFT:120|LEFT:120|c
||>|CENTER:Windowsの場合|>|CENTER:Linuxの場合|
||MyServiceConsumerコンポーネント|MyServiceProviderコンポーネント|MyServiceConsumerコンポーネント|MyServiceProviderコンポーネント|
|C++版|MyServiceConsumerComp.exe|MyServiceProviderComp.exe|MyServiceConsumerComp|MyServiceProviderComp|
|Python版|MyServiceConsumer.py|MyServiceProvider.py|MyServiceConsumer.py|MyServiceProvider.py|
|Java版|MyServiceConsumer.bat|MyServiceProvider.bat|MyServiceConsumer.sh|MyServiceProvider.sh|
-- RtcLinkのNameServiceViewに両コンポーネントが現れるので、それらをSystemEditor上にドラッグします。
-- 両コンポーネントの対応ポートを結びます。（上図SimpleService実行例を参照）
-- どちらかのコンポーネントを右クリックし、「All Activate」を選択します。（この場合は、Consumer側コンポーネントをActivateするだけでも動作します。）
-- Consumer側プロンプトにコマンドを入力します。
#br

- コマンド
-- echo <message>：任意の<message>をエコー
-- set_value <value>：任意の<value>をProvider側にセット
-- get_value：現在Provider側にセットされている値を取得して表示
-- get_echo_history：今までのエコーメッセージの履歴をProvider側から取得
-- get_value_history：今までにセットしてきた値の履歴をProvider側から取得

