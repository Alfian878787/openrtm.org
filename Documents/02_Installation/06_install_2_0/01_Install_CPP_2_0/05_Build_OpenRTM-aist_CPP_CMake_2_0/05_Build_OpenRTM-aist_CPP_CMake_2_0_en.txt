// Title: Build process of OpenRTM-aist(C++) by using CMake
#contents

** (G)Windows + omniORB
Please install TortoiseSVN from the following.
//以下から TortoiseSVN をインストールしてください。

- https://tortoisesvn.net/
- https://ja.osdn.net/projects/tortoisesvn/

Please obtain the OpenRTM-aist source code from the following.
//以下から OpenRTM-aist のソースコードを入手してください。

- http://svn.openrtm.org/OpenRTM-aist/trunk/OpenRTM-aist/

Please obtain the already built omniORB from the following.
//以下からビルド済みの omniORB を入手してください。

- http://openrtm.org/pub/omniORB/win32/omniORB-4.2.2/

Move to the checked out folder (OpenRTM - aist) and execute the following command.
//チェックアウトしたフォルダー(OpenRTM-aist)に移動して以下のコマンドを実行してください。

 python convert_character_code.py ./ win32 utf_8_sig
 mkdir src\lib\coil\common\coil
 move src\lib\coil\common\*.* src\lib\coil\common\coil\
 
 copy build\yat.py utils\rtm-skelwrapper\
 
 mkdir build_omni
 cd build_omni
 cmake -DOMNI_VERSION=42  -DOMNI_MINOR=2 -DOMNITHREAD_VERSION=40 -DORB_ROOT=C:/workspace/omniORB-4.2.2-win64-vc15 -DCORBA=omniORB -G "Visual Studio 15 2017 Win64" ..
 cmake --build . --config Release

| Variable name | Meaning | Value that can be set |
| OMNI_VERSION | omniORB version | 40, 41, 42 |
| ORB_ROOT | OmniORB expanded path ||
| CORBA | CORBA library | omniORB |
//|変数名|意味|設定できる値|
//|OMNI_VERSION|omniORB のバージョン|40、41、42|
//|ORB_ROOT|omniORB を展開したパス||
//|CORBA|CORBA のライブラリー|omniORB|

** (G)Windows + TAO
Please install TortoiseSVN from the following.
//以下から TortoiseSVN をインストールしてください。

- https://tortoisesvn.net/
- https://ja.osdn.net/projects/tortoisesvn/

Please obtain the OpenRTM-aist source code from the following.
//以下から OpenRTM-aist のソースコードを入手してください。

- http://svn.openrtm.org/OpenRTM-aist/trunk/OpenRTM-aist/

Please download ACE + TAO.zip from below.
//以下から ACE+TAO.zip をダウンロードしてください。

- http://download.dre.vanderbilt.edu

Build ACE and TAO in Visual Studio.
Change ''ace/config-win32.h'' in the folder where ACE + TAO.zip has been expanded to ''ace/config.h''.
Next, open the ACE_wrappers_vc12.sln (or ACE_wrappers_vc14.sln, ACE_wrappers_vs2017.sln) in Visual Studio and build it with the following environment variables set.
//Visual Studio で ACE と TAO のビルドをします。
//ACE+TAO.zip を展開したフォルダーの ''ace/config-win32.h'' を ''ace/config.h'' に変更してください。
//次に以下の環境変数を設定した状態で ACE_wrappers_vc12.sln (もしくは ACE_wrappers_vc14.sln、ACE_wrappers_vs2017.sln)を Visual Studio で開いてビルドしてください。

Move to the checked out folder (OpenRTM-aist) and execute the following command.
//チェックアウトしたフォルダー(OpenRTM-aist)に移動して以下のコマンドを実行してください。

 python convert_character_code.py ./ win32 utf_8_sig
 mkdir src\lib\coil\common\coil
 move src\lib\coil\common\*.* src\lib\coil\common\coil\
 
 copy build\yat.py utils\rtm-skelwrapper\
 
 mkdir build_tao
 cd build_tao
 cmake -DORB_ROOT=C:/workspace/ACE_wrappers -DCORBA=TAO -G "Visual Studio 15 2017 Win64" ..
 set PATH=%PATH%;C:\workspace\ACE_wrappers\lib;
 cmake --build . --config Release


** (G)Windows 10 IoT + omniORB
Built-in binary files for omniORB's Windows 10 IoT are currently not distributed, so you need to build them yourself.
Cygwin installation is required.
//omniORBのWindows 10 IoT用のビルド済みバイナリファイルは現在のところ配布していないため、自力でビルドする必要があります。
//Cygwinのインストールが必要です。

- https://www.cygwin.com/

Get source code of omniORB.
//omniORBのソースコードを入手してください。

- https://sourceforge.net/projects/omniorb/files/omniORB/omniORB-4.2.2/

Please expand omniORB - 4.2.2.tar.bz2 to a suitable place.
//omniORB-4.2.2.tar.bz2を適当な場所に展開してください。

First apply the patch for ARM + Windows.
Please obtain a patch from below.
//最初にARM+Windows用の修正パッチを適用します。
//以下から修正パッチを入手してください。

- http://svn.openrtm.org/omniORB/trunk/windows/omniORB-4.2.2-windows-iot.patch

Execute the following command on Cygwin.
//Cygwin上で以下のコマンドを実行してください。


 patch -p1 -d omniORB-4.2.2 < omniORB-4.2.2-windows-iot.patch


Edit ''mk/platforms/arm_win32_vs_14.mk'' in the folder where you expanded omniORB-4.2.2.tar.bz2.
If the version of Visual Studio you use is different, please select the one that is appropriate.
Specify the Python directory as follows.
//omniORB-4.2.2.tar.bz2を展開したフォルダの''mk/platforms/arm_win32_vs_14.mk''を編集します。
//使用するVisual Studioのバージョンが違う場合は合ったものを選択してください。
//以下のようにPythonのディレクトリを指定します。


 PYTHON = /cygdrive/c/Python27/python

Next, edit ''config/config.mk''.
Specify the corresponding mk file as follows.
Please correspond as appropriate when the version of Visual Studio is different.
//次に''config/config.mk''を編集します。
//以下のように対応したmkファイルを指定します。
//Visual Studioのバージョンが違う場合は適宜対応してください。


 platform = arm_win32_vs_14


For cross compiling, prepare executable files such as idl compiler which can operate in the development environment.
Please obtain the binary of omniORB which was built for x86 from the following.
//クロスコンパイルを行うため、idlコンパイラなどの実行ファイルは開発環境で動作可能なものを用意します。
//以下からx86用にビルドした omniORB のバイナリを入手してください。

- http://openrtm.org/pub/omniORB/win32/omniORB-4.2.2/

Please copy the contents of '' bin / x86_win32 '' in the folder where you unzipped the zip file to ''bin/x86_win32'' in the folder where you expanded omniORB - 4.2.2.tar.bz2.
//zipファイルを展開したフォルダの''bin/x86_win32''の中身を、omniORB-4.2.2.tar.bz2を展開したフォルダの''bin/x86_win32''にコピーしてください。



Move to the directory where omniORB-4.2.2.tar.bz2 is expanded and execute the following command.
//omniORB-4.2.2.tar.bz2を展開したディレクトリに移動して、以下のコマンドを実行してください。

 set PATH=C:\cygwin64\bin;%PATH%;
 call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86_arm
 cd src
 make export

This will create an executable file in ''bin / ARM_win32'' and a library in ''lib / ARM_win32''.
For vcvarsall.bat, please use the version that is appropriate for the version of Visual Studio.
For Visual Studio 2017 it will be ''C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvarsall.bat''.
//これで''bin/ARM_win32''に実行ファイルが、''lib/ARM_win32''にライブラリが生成されます。
//vcvarsall.batについてはVisual Stduioのバージョンにあったものを使用してください。
//Visual Studio 2017の場合は''C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvarsall.bat''となります。


The build of OpenRTM-aist is almost the same as usual.
Please specify the compiler for ARM as cmake's option ''Visual Studio 14 2015 ARM''.
//OpenRTM-aistのビルドは通常とほとんど同じです。
//cmakeのオプションとして''Visual Studio 14 2015 ARM''というようにARM用のコンパイラを指定してください。


 python convert_character_code.py ./ win32 utf_8_sig
 mkdir src\lib\coil\common\coil
 move src\lib\coil\common\*.* src\lib\coil\common\coil\
 
 copy build\yat.py utils\rtm-skelwrapper\
 
 mkdir build_omni
 cd build_omni
 cmake -DOMNI_VERSION=42  -DOMNI_MINOR=2 -DOMNITHREAD_VERSION=40 -DORB_ROOT=C:/workspace/omniORB-4.2.2 -DCORBA=omniORB -G "Visual Studio 14 2015 ARM" ..
 cmake --build . --config Release

You can not build it unless ARM compiler is installed in Visual Studio.
If you do not have an ARM compiler installed, please start ''Visual Studio Installer'' and install ''Visual Studio C ++ Compiler and Library for ARM''.
//Visual StudioにARM用コンパイラがインストールされていないとビルドできません。
//ARM用コンパイラをインストールしていない場合は、''Visual Studio Installer''を起動して''ARM用Visual Studio C++コンパイラとライブラリ'''をインストールしてください。


&br;
#br

#ref(arm1.png,50%, center)
&br;
#br

** (G)Ubuntu + omniORB

 svn co http://svn.openrtm.org/OpenRTM-aist/trunk/OpenRTM-aist/
 cd OpenRTM-aist/
 mkdir src/lib/coil/common/coil
 cp src/lib/coil/common/*.* src/lib/coil/common/coil/
 cp build/yat.py utils/rtm-skelwrapper/
 mkdir build_linux
 cd build_linux/
 cmake -DOMNI_VERSION=41 -DCORBA=omniORB ..
 make

| Variable name | Meaning | Value that can be set |
| OMNI_VERSION | omniORB version | 40, 41, 42 |
| CORBA | CORBA library | omniORB |
//|変数名|意味|設定できる値|
//|OMNI_VERSION|omniORB のバージョン|40、41、42|
//|CORBA|CORBA のライブラリー|omniORB|

** (G)Ubuntu + TAO
First of all build and install ACE + TAO with the following command.
//まずは以下のコマンドでACE+TAOをビルド、インストールしてください。

 sudo apt-get install gperf
 export ACE_ROOT=${PWD}/ACE_wrappers/build/linux
 export TAO_ROOT=${ACE_ROOT}/TAO
 export LD_LIBRARY_PATH=$ACE_ROOT/ace:$ACE_ROOT/lib
 export INSTALL_PREFIX=/home/openrtm/ace_install
 wget http://download.dre.vanderbilt.edu/previous_versions/ACE+TAO-6.4.5.tar.gz
 tar xf ACE+TAO-6.4.5.tar.gz
 cd ACE_wrappers
 mkdir -p build/linux
 ./bin/create_ace_build build/linux
 echo '#include "ace/config-linux.h"' > build/linux/ace/config.h
 echo 'include $(ACE_ROOT)/include/makeinclude/platform_linux.GNU' > build/linux/include/makeinclude/platform_macros.GNU
 cd build/linux
 make
 make install
 cd TAO
 make
 make install

Build OpenRTM-aist with the following command.
//以下のコマンドでOpenRTM-aistをビルドしてください。

 svn co http://svn.openrtm.org/OpenRTM-aist/trunk/OpenRTM-aist/
 cd OpenRTM-aist/
 mkdir src/lib/coil/common/coil
 cp src/lib/coil/common/*.* src/lib/coil/common/coil/
 cp build/yat.py utils/rtm-skelwrapper/
 mkdir build_tao
 cd build_tao
 cmake -DORB_ROOT=$ACE_ROOT -DCORBA=TAO ..
 make

** (G)VxWorks + omniORB
It is necessary to specify the home directory of Wind River Workbench in advance.
Please set the directory where Wind River Workbench is installed to the variable ''WIND_HOME''.
//事前にWind River Workbenchのホームディレクトリを指定する必要があります。
//Wind River Workbenchをインストールしたディレクトリを''WIND_HOME''という変数に設定してください。

 export WIND_HOME=/home/openrtm/WindRiver

It is necessary to build omniORB before building OpenRTM-aist.
//OpenRTM-aistのビルドの前に、omniORBのビルドを行う必要があります。

*** (G)omniORB
Get source code of omniORB.
//omniORBのソースコードを入手してください。

- http://omniorb.sourceforge.net/
Please obtain the VxWorks compatible patch of omniORB.
//omniORBのVxWorks対応パッチを入手してください。

- http://svn.openrtm.org/omniORB/trunk/vxworks/omniORB-4.2.2-vxworks.patch

Execute the build with the following command.
//以下のコマンドでビルドを実行します。

 wget https://jaist.dl.sourceforge.net/project/omniorb/omniORB/omniORB-4.2.2/omniORB-4.2.2.tar.bz2
 tar xf omniORB-4.2.2.tar.bz2
 wget http://svn.openrtm.org/omniORB/trunk/vxworks/omniORB-4.2.2-vxworks.patch
 patch -p1 -d omniORB-4.2.2 < omniORB-4.2.2-vxworks.patch
 cd omniORB-4.2.2
 mkdir build
 cd build
 ../configure
 make
 cd ..
 sed -i '1s/^/platform = ${VXWORKS_PLATFORM}\n/' config/config.mk
 cd src
 make export

However, please be sure to enter VXWORKS_PLATFORM according to your operating environment.
| VXWORKS_PLATFORM | CPU | VxWorks version | Implementation method |
| powerpc_vxWorks_kernel_6.6 | PowerPC | 6.6 | Kernel module |
| powerpc_vxWorks_RTP_6.6 | PowerPC | 6.6 | RTP |
| powerpc_vxWorks_kernel_6.9 | PowerPC | 6.9 | kernel module |
| powerpc_vxWorks_RTP_6.9 | PowerPC | 6.9 | RTP |
| simlinux_vxWorks_kernel_6.6 | simulator on Linux | 6.6 | kernel module |
| simpentium_vxWorks_RTP_6.6 | Simulator on Linux | 6.6 | RTP |
| simlinux_vxWorks_kernel_6.9 | simulator on Linux | 6.9 | kernel module |
| simpentium_vxWorks_RTP_6.9 | Simulator on Linux | 6.9 | RTP |
//ただし、VXWORKS_PLATFORMには動作環境に合ったものを入力するようにしてください。
//|VXWORKS_PLATFORM|CPU|VxWorksのバージョン|実装方法|
//|powerpc_vxWorks_kernel_6.6|PowerPC|6.6|カーネルモジュール|
//|powerpc_vxWorks_RTP_6.6|PowerPC|6.6|RTP|
//|powerpc_vxWorks_kernel_6.9|PowerPC|6.9|カーネルモジュール|
//|powerpc_vxWorks_RTP_6.9|PowerPC|6.9|RTP|
//|simlinux_vxWorks_kernel_6.6|Linux上のシミュレータ|6.6|カーネルモジュール|
//|simpentium_vxWorks_RTP_6.6|Linux上のシミュレータ|6.6|RTP|
//|simlinux_vxWorks_kernel_6.9|Linux上のシミュレータ|6.9|カーネルモジュール|
//|simpentium_vxWorks_RTP_6.9|Linux上のシミュレータ|6.9|RTP|

*** (G)OpenRTM-aist
Please enter the following command.
//以下のコマンドを入力してください。

 svn co http://svn.openrtm.org/OpenRTM-aist/trunk/OpenRTM-aist/
 cd OpenRTM-aist/
 mkdir src/lib/coil/common/coil
 cp src/lib/coil/common/*.* src/lib/coil/common/coil/
 cp build/yat.py utils/rtm-skelwrapper/
 mkdir build_vxworks
 cd build_vxworks/
 cmake -DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN_FILE} -DVX_VERSION=${VX_VERSION} -DORB_ROOT=${ORB_ROOT} -DOMNI_VERSION=42 -DCORBA=omniORB -DVX_CPU_FAMILY=${ARCH} ..
 make
However, make the following settings for TOOLCHAIN_FILE, VX_VERSION, ORB_ROOT, ARCH.
//ただし、TOOLCHAIN_FILE、VX_VERSION 、ORB_ROOT、ARCHには以下の設定をしてください。

| TOoolCHAIN_FILE | ''../Toolchain-vxworks6.6-Linux.cmake'',  ''for VxWorks 6.6 (kernel module, PowerPC)'',  ''../ Toolchain-vxworks6.cmake''|
| VX_VERSION | ''vxworks-6.6'' or ''vxworks-6.9'' |
| ORB_ROOT | omniORB directory (eg /home/openrtm/omniORB-4.2.2) |
| VX_CPU_FAMILY | '' ppc '' (PowerPC), '' simlinux '' (kernel module, simulator), '' simpentium '' (RTP, simulator) |
//|TOOLCHAIN_FILE|VxWorks 6.6(カーネルモジュール、PowerPC)の場合は''../Toolchain-vxworks6.6-Linux.cmake''、それ以外の場合は''../Toolchain-vxworks6.cmake''|
//|VX_VERSION|''vxworks-6.6''か''vxworks-6.9''|
//|ORB_ROOT|omniORBのディレクトリ(例：/home/openrtm/omniORB-4.2.2)|
//|VX_CPU_FAMILY|''ppc''(PowerPC)、''simlinux''(カーネルモジュール、シミュレータ)、''simpentium''(RTP、シミュレータ)|

For RTP, you need to add ''-DRTP=ON'' to the cmake command.
//RTPの場合はcmakeコマンドに''-DRTP=ON''を追加する必要があります。

 cmake -DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN_FILE} -DVX_VERSION=${VX_VERSION} -DORB_ROOT=${ORB_ROOT} -DOMNI_VERSION=42 -DCORBA=omniORB -DVX_CPU_FAMILY=${ARCH} -DRTP=ON ..
 make


** (G)VxWorks + ORBexpress
Currently the corresponding environment is VxWorks 6.6, PowerPC only.
//※現在のところ対応環境はVxWorks 6.6、PowerPCのみです。

Please enter the following command.
//以下のコマンドを入力してください。


 svn co http://svn.openrtm.org/OpenRTM-aist/trunk/OpenRTM-aist/
 cd OpenRTM-aist/
 mkdir src/lib/coil/common/coil
 cp src/lib/coil/common/*.* src/lib/coil/common/coil/
 cp build/yat.py utils/rtm-skelwrapper/
 mkdir build_vxworks
 cd build_vxworks/
 cmake -DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN_FILE} -DORB_ROOT=${ORB_ROOT} -DCORBA=ORBexpress ..
 make

Please make the following settings for TOOLCHAIN_FILE, ORB_ROOT.
| TOOLCHAIN_FILE | For kernel module''../Toolchain-vxworks6.6-Linux.cmake'', for RTP ''../Toolchain-vxworks6.cmake'' |
| ORB_ROOT | ORBexpress directory (ex:/home/openrtm/OIS/ORBexpress/RT_2.8.4_PATCH_KC1) |

//TOOLCHAIN_FILE、ORB_ROOTには以下の設定をしてください。
//|TOOLCHAIN_FILE|カーネルモジュールの場合は''../Toolchain-vxworks6.6-Linux.cmake''、RTPの場合は''../Toolchain-vxworks6.cmake''|
//|ORB_ROOT|ORBexpressのディレクトリ(例：/home/openrtm/OIS/ORBexpress/RT_2.8.4_PATCH_KC1)|