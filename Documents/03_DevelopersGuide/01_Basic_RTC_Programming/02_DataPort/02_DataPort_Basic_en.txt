// -*- pukiwiki-edit -*-
//*Data Port (Basic Tutorial)

#contents

//------------------------------------------------------------
**What is Data Port

The "Data Port" is a port for continuous data exchange between RTCs.
The data port which sends data to other RTC is called "OutPort", and
the data port which receives from other RTC is called "InPort."
"OutPort" and "InPort" collectively means "Data Port."

#ref(dataport_en.png,30%,center)
CENTER: ''Data Port (InPort and OutPort)''

RTCs can be written in a various progamming languages. And, RTCs can
be distributed in the netowrk, and they can be launched on a same node
and they can be instantiated on a same process. Communication between
Data Ports can be done transparently even though both ends of RTCs are
written in any kind of programming languages or are distributed on the
network.

The RTC can have any number of data ports if you need. For example, if
you make a RTC which obtains data from a sensor, this component must
have at least one OutPort to output sensor data.

On the other hand, if you make a motor component which drives a motor
according to the given reference torque, this component must have at
least one InPort to receive reference torque data.  If you make a
controller component by using these components, it must have an InPort
to receive sensor data, and an InPort to receive reference data and an
OutPort to output torque data respectively.

#ref(dataport_example_en.png,40%,center)
CENTER: ''An example of data ports of a sensor, a controller and a motor''

Let's see a simple example usage of InPort and OutPort in actual code.
Each object works as follows.

- encoderDevice: An object which has functionality to control hardware (ex. counter borad) to get current angle from encoder.
- encoderData: A variable to hold data of an encoder. We assume that this variable has a field "data" (this is a member of a structure) to hold encoder data.
- encoderDataOut: An OutPort object. This object is associated with the encoderData object.

 // An example of a encoder component
 encoderData.data = encoderDevice.read(); // getting current value from counter
 encoderDataOut.write();                  // Data output from the OutPort


At the first line, a current value of the encoder is read by read()
function of the encoderDevice object. The obtained data is substituted
to the "data" member of encoderData object. When write() function of
encoderDataOut that is a instance of the OutPort is called,
encoderDataOut object outputs encoderData object to connected InPorts.

On the other hand, a motor component which has a InPort can be written
as follows.

- motorDevice: A object which controls a motor by accessing hardware (ex. a DA board that is connected to a motor driver). If libraries are not provided from the vendor of the hardware, you have to implement by yourself.
- motorData: A variable which holds a value from a InPort.
We assume that the variable has a member "data" to store encoder's data.
- motorDataIn: An InPort object. This object is associated with the motorData object.


 // An example of a motor component
 if (motorDataIn.isNew() {
   motorData.data = motorDataIn.read(); // getting data from InPort
   motorDevice.output(motorData.data);  // output reference value to a motor dirver
 }


At the first line of the code, it is checked whether data are coming
to the InPort.  If data are coming, calling motorDataIn's read()
function, the data is copied from InPort to "data" member of motorData
object.  Then the output() function of the motorDevice object is
called to give a reference value to the motor actually.

Correspondingly a controller component which has InPorts and a OutPort
can be written as follows.


 // An example of controller component
 if (positionDataIn.isNew() && referenceDataIn.isNew()) {
 
   positionDataIn.read();  // Read position data from a InPort
   referenceDataIn.read(); // Read velocity data from a InPort
 
   // Calculate torque to be given according to algorithm
   torqueData.data = controller.calculate(positionData.data,
                                           referenceaData.data);
   torqueDataOut.write(); // Output motor torque from OutPort
 }

The detailed explanation is skipped, since it is almost same as only
InPort or only OutPort case.  Since RT-Component framework hides
differences such as the other RTC implementation language and the
other RTC location of the network, RTC Data exchange can be performed
easily like this.


//------------------------------------------------------------
**Type of Variable

In the example so far, since declaration of each object was not shown,
C++ and Java developers who are familiar with typed-languages could be
interested in types of variable used in sample codes.

***Basic Types

In the example above, variable to be stored data is assumed as the
TImedDouble data type.  It is almost same as the following data type
written in C/C++ structure data type.

 struct Time
 {
   long int sec;
   long int usec;
 };
 
 struct TimedDouble
 {
   Time tm;
   double data;
 };

The following rules and characteristics is defined for types of data ports.

- Data ports have its own specific types.
- Type is defined by the IDL (Interface Definition Language), which is a language independent interface definition language.
- Ports which are same IDL definition can be connected each other even if these are different language ports.
- Ports which have different type cannot be connected, and cannot communicate each other.

Therefore, an encoder, a controller and a motor components
respectively should be TimedDouble in the above example.

OpenRTM-aist provides the following basic types for the data port, and
they can be utilized without any definition.  These default basic data
types have "tm" field to store time-stamp.

| Type name   | Description |
| TimedShort  | short int with time-stamp |
| TimedUShort | unsigned short int with time-stamp |
| TimedLong   | long int with time-stamp |
| TimedULong  | unsigned long int with time-stamp |
| TimedFloat  | float with time-stamp |
| TimedDouble | double with time-stamp |
| TimedString | string with time-stamp |
| TimedWString| wstring with time-stamp |
| TimedChar   | char with time-stamp |
| TimedWChar  | wchar with time-stamp |
| TimedOctet  | ƒoƒCƒg with time-stamp |
| TimedBool   | bool with time-stamp |


You might have no situation to use TimedChar, TimedWChar and
TimedOctet in the above list.

Conversion rules from the IDL types to each language is called
mapping.  If you want to know the actual mapping between
language-specific type and IDL type, please see CORBA language-mapping
specifications or see the "Language mapping" section.

***(a little) Complex data types

Sequence types named -Seq corresponding to basic types are provided.
In brief these are array of basic types

 seqdata.length(10); // allocate array for 10 elements
 for (int i(0); i < seqdata.length(); ++i) // length() without argument returns length
 {
   seqdata[i] = i; // substitute a value
 }

As shown in above, you can use sequence type in C++.  It is more
convenient than raw array, and it is similar to STL vector class
template, but functionality is poor.  In Java language, a holder class
for array type is automatically generated and used.  In Python
language, arrays are directly mapped to Python's normal array.

In the example mentioned above, a single encoder and a single motor
are only used.  But in the actual robot systems which have many degree
of freedom, many encoders and motors would be handled by a component.
In this case, it is not good idea to make ports for each degree of
freedom, because of performance of communication, synchronization
among degree of freedom and so on.  In this case, sequence data type
can be utilized to handle several set of data effectively.

***Original data types

You might want to use more complex data structure.  In this case, you
can define a new data type and use as data port data type.  See the
"Data Port (Advanced)" section for details.

//------------------------------------------------------------
**Data port connection

***Connector

In order to connect between InPort and OutPort on RTCs tools such as
RTSystemEditor and/or rtcshell are used.  After connecting ports, data
sent from OutPort go through the network are received by InPort.
Connection can select types from several options based on system
structure and characteristics of components.

- Interface type
- Dataflow type
- Subscription type
- Data push policy

***Interface type

In the interface type, you can select kind of interface that is used
for data transportation.  In the default, only corba_cdr type is
available, and it is recommended for general usage.  However, for a
certain specific system structure, you can extend to use other
interface type.


#ref(dataport_interfacetype_en.png,50%,cneter)
CENTER: ''Interface type''

***Data flow type

There are two types of data exchange. One is "push" type that OutPort
sends data to InPort, and other is "pull" type that InPort gets data
from OutPort.

In the push type, the entity to send data to InPort is OutPort side's
activity, which is usually on_execute() callback function.  In the
push type, the subject to send data to InPort is OutPort side's
activity.  The timing to send data would be specified as subscription
types after-mentioned.  On the other hand, in the pull type, the
entity to fetch data from OutPort is InPort side's activity, which is
usually on_execute() callback function.  In this case, receiveing data
is performed at the timing of read() function called at the InPort
side.

#ref(dataport_dataflowtype_en.png,50%,cneter)
CENTER: ''Dataflow types''

***Subscription type

Subscription type is a property that is valid for only dataflow type
is push.  As a default setting, "flush" for synchronous data push type
is specified.  And asynchronous data push type "new" and "periodic"
are also provided.  These three subscription types are available.

In the "flush" type subscription, data push process to send data from
OutPort to InPort is performed in the write() function of OutPort
directly.  This means that data delivery is guaranteed when write()
function returns from invocation.  On the other hand, if receiver
InPort is located far from sender in the network location and
communication latency is big, the activity might have to wait until
returning from write() function of OutPort.  This might cause problem
for the activity which are executed in real-time loop.

In the "new" type and "periodic" type, a "publisher" as a sender
thread is created.  In these types, OutPort's write() function only
writes down data into data buffer and returns immediately. Actual data
pushing action is performed by publisher threads.

#ref(dataport_subscriptiontype_en.png,50%,cneter)
CENTER: ''Subscription types''

In the "new" subscription type, a signal is broadcasted to publisher
threads waiting for transmission simultaneously on writing data into
OutPort, and publishers wake up and send data.  If data transmission
time is enough small than data writing period into the buffer, it
almost behaves like "flush" subscription type.  On the other hand, if
it takes much time for sending data to receiver, there is no guarantee
that all data are delivered to receiver.  This is a best effort data
transmission type.

In the "periodic" subscription type, the publisher fetches data from a
buffer and send them to receiver in the specified constant period.
The transmission period is given from outside when connection is
established.  If data transmission time takes longer than the push
rate of periodic publisher, the push period might not be kept.  If
user does not consider the consistency of data writing ratio into
buffer (it is caused by activity's period), data reading ratio from
buffer (it depends on push ratio of publisher) and data transmission
policy after-mentioned, it causes buffer-full and buffer-empty status
constantly.  This is a kind of subscription type that requires
consideration of the producer-consumer problem (also known as the
bounded-buffer problem.)

***Data transmission policy

If the subscription type is "new" or "periodic", OutPort has buffers.
How to send data which are stored in the buffer at the data
transmission time is called data transmission policy.

There are four types of data transmission policy: "all" for sending
all data in a buffer in one time, "fifo" for sending with first in
first out method, "skip" for sending with skipping in specified
number, and "new" for sending only the newest data and discarding
other old data.

| Name | Description |
| all  | Send all data stored in buffers. |
| fifo | Send data in first in first out way. |
| skip | Send data in every "n"-intervals and discard others. |
| new  | Send only the newest data and discard others. |

If you chose asynchronous subscriptions such as "new" and "periodic",
these transmission policy should be properly specified based on the
data production ratio, the data consuming ratio and the bandwidth of
the communication path.

//------------------------------------------------------------
**InPort programming

From now, let's take a look at how data ports are used in actual
program.

When using InPort, writing programs according to the following rules
in mind is recommended.

- Logic should be written assuming data is not coming.
- Logic should be written assuming data is invalid.
- Logic should be written assuming length array data always changes.
- Logic should be written assuming data stops suddenly.

An OutPort which is connected an InPort might be owned by RTC running
on other node. A port might be connected to any other ports, and data
might not be sent from anywhere. In case of array data, the length of
array might change in the next data. Connections might be destroyed,
or other RTC might stop and data stops suddenly.

When modularizing, it is very important making it with less
assumptions and prerequisites, and independency from other elements,
and reusability of them and usability depends on these design rules.

Now, the structure of InPort is explained before seeing the actual
usage of InPort.

#ref(dataport_inport_en.png,50%,cneter)
CENTER: ''The structure of the InPort''

The substance of InPort is an object.  In C++ language, it is defined
as a class template InPort<T> type.  The data type which a data port
uses is substituted for T.  The lower example shows InPort declaration
of the ConsoleOut component which is attached as a sample.  InPort is
declared with the TimedLong type.

  TimedLong m_in;
  InPort<TimedLong> m_inIn;

If you are using RTCBuilder and rtc-template, these declarations and
initialization will be generated automatically.  When using InPort,
one T type variable connected to the InPort object is defined.
TimedLong type variable m_in shown in the above-mentioned example is
the variable.  This is called an InPort variable.

InPort and an InPort variable are associated at the time of
initialization, and if data read function read() of InPort is called,
one data will be read from the buffer which InPort has, and they will
be copied to an InPort variable.  Thus, the data sent to InPort are
used through an InPort variable.

*** InPort object

The functions defined by the InPort class template are shown in the
following tables.

Although these are functions of the InPort class of C++, also in other
language, each functions are offered by the almost same name. In
addition, the reference manual of these functions can be seen from
"Start" -> "OpenRTM-aist" -> "C++" -> "documents" -> "Class reference"
on Windows.  On the Linux, if the documentation package is installed,
you can find them under
${prefix}/share/OpenRTM-aist/docs/ClassReference.  The manual is
described in the doxygen format, please display a class list from the
"name space" of a top menu, and refer to the InPort for it.

| InPort (const char *name, DataType &value) |  Constructor |
| ~InPort (void) |  Destructor |
| const char *  name () | Get the name of this port. |
| bool  isNew () | Check if data is the newest one. |
| bool  isEmpty () |  Check if the buffer is empty. |
| bool  read () |  Read data from DataPort. |
| void  update () |  Read the newest data into T type variable associated with InPort |
| void  operator>> (DataType &rhs) | Read the newest data into a T type right hand side variable. |
| void setOnRead (OnRead< DataType > *on_read) | Set a callback when read from InPort to buffer. |
| void  setOnReadConvert (OnReadConvert< DataType > *on_rconvert) | Set a conversion callback when read from InPort to buffer. |

The mainly used functions are isNew() and read(). See the following
example actually used.

 RTC::ReturnCode_t ConsoleOut::onExecute(RTC::UniqueId ec_id)
 {
   if (m_inIn.isNew())
     {
       m_inIn.read();
       std::cout << "Received: " << m_in.data << std::endl;
       std::cout << "TimeStamp: " << m_in.tm.sec << "[s] ";
       std::cout << m_in.tm.nsec << "[ns]" << std::endl;
     }
   return RTC::RTC_OK;
 }

It checked whether data would come by m_inIn.isNew() and data are read
into InPort variable m_in by m_inIn.read(). Then, the content of m_in
is displayed by cout.

Usually, like this example, the data in InPort handling is performed
by the onExecute() function, and it is programmed to process
periodically the data delivered to InPort.

You could understand other functions immediately from description.
However, the functions setOnRead and setOnRedConvert which set a
call-back object are anew explained by advanced section.

** OutPort

Since OutPort itself only sends out data, it becomes somewhat easy
compared with InPort.

#ref(dataport_outport_en.png,50%,cneter)
CENTER: ''The structure of OutPort''

The structure of OutPort is almost the same as InPort, and it is
defined in C++ as a class template which takes T type parameter.
T is a data type of OutPort and it can send data only to the InPort
with same type T.  OutPort as well as InPort is used together with an
OutPort variable.  If the write() function of OutPort is called after
writing data in an OutPort variable, data will be sent out to InPort
connected to OutPort.

***OutPort object

The function defined by the OutPort class template is shown in the
following tables.

In other language, each functions are provided by the almost same name
about OutPort as well as InPort. Please see ''OutPort'' from the "name
space" of the reference manual in dosygen as well as InPort.

| OutPort (const char *name, DataType &value) |  Constructor |
| ~OutPort (void) |  Destructor |
| bool  write (DataType &value) |  Write data with argument. |
| bool  write () |  Write data from OutPort variable. |
| bool  operator<< (DataType &value) |  Write data from right hand side variable. |
| DataPortStatus::Enum  getStatus (int index) |  Get status from a specified connector. |
| DataPortStatusList  getStatusList () |  Get status list from the all connectors. |
| void  setOnWrite (OnWrite< DataType > *on_write) |  Set OnWrite callback function. |
| void  setOnWriteConvert (OnWriteConvert< DataType > *on_wconvert) |  Set OnWriteConvert callback function. |


The functions mainly used in OutPort are write() and getStatusList().

 RTC::ReturnCode_t ConsoleIn::onExecute(RTC::UniqueId ec_id)
 {
   std::cout << "Please input number: ";
   std::cin >> m_out.data;
   if (!m_outOut.write())
     {
       DataPortStatusList stat = m_outOut.getStatusList();
 
       for (size_t i(0), len(stat.size()); i < len; ++i)
         {
           if (stat[i] != PORT_OK)
             {
               std::cout << "Error in connector number " << i << std::endl;
             }
         }
     }
   return RTC::RTC_OK;
 }

First, in the std::cin >> m_out.data line, data are substituted to
OutPort variable from standard input.  Then, data are sent out from
OutPort by m_outOut.write().  When a return value is false, the status
of a port is investigated and it is being printed in which connection
the error has occurred.


** Summary of data port

Here, the fundamental concept of a data port (InPort, OutPort) and
usage were explained.  Although a declaration of a data port is made
by RTCBuilder or rtc-template, a component developer needs to describe
actually giving data or using data.  However, in order to use a data
port simply, if only isNew() of InPort and a read() function keep only
write() of OutPort, and a getStatusList() function in mind, they will
be enough.
