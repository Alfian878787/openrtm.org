// Title: Acquire the status of RTC (EC)
There are two ways to get the error. It can be easily realized with rtctree (library under rtshell), but first, I will explain from the principle point.
//エラーを取得する方法として2つの方法があります。
//rtctree （rtshell のもととなっているライブラリ）ですと簡単に実現できますが、
//まずは原理的なところから説明させていただきます。

1) Poll the EC
Query the current state with get_component_state () for the execution context (EC) attached to an RTC. Since this method is polling, if it is heavily used, the speed of the system will be reduced.
//1) ECに対してポーリングをする
//あるRTCにアタッチされている実行コンテキスト（EC）に対して get_component_state() で
//現在の状態を問い合わせる。
//この方法はポーリングですので多用するとシステムの速度低下を招きます。

I will explain with pseudocode.
//疑似コードで説明いたします。

 rtc = <Obtain RTC object reference in some way>
//rtc = <何らかの方法でRTCのオブジェクトリファレンスを取得>
 ec_list = rtc.get_owned_contexts();
// ec_list には RTCが持つ自身のECが入る。通常[0]にデフォルトコンテキストが
// 入っており、OpenRTM-aistでは[1]以降にECが入ることはない。
 switch (ec_list[0].get_component_state(rtc)) {
  case CREATED_STATE:
    printf("Created state.");
    break;
  case INACTIVE_STATE:
    printf("Inactive state.");
    break;
  case ACTIVE_STATE:
    printf("Active state.");
    break;
  case ERROR_STATE:
    printf("Error state.");
   break;
  default:
     printf("Unknown state");
     break;
 }

We first acquire EC from RTC and obtain state by RTC as argument to that EC.
The way of calling like this is from the following way of thinking.
//まずRTCからECを取得して、そのECに対してRTCを引数にして状態を取得しています。
//このような呼び出し方をしているのは、以下の様な考え方からです。

The fact that the status of RTC is Inactive-Active-Error is that the state of the RTC
It is not the state when an execution context (EC) is associated with an RTC.
(That is, the idea is that the state is on the EC side.)
//RTCのステータスとして Inactive-Active-Error とされているのは、実際にはRTC の状態
//ではなく、ある実行コンテキスト(EC)があるRTCと結びついたときの状態です。
//（すなわち、状態はEC側にある、という考え方です。）
It corresponds to figure 5.6 of http://www.omg.org/spec/RTC/.
//http://www.omg.org/spec/RTC/ のFigure5.6 がそれに当たります。

Since there is usually only EC of its own, it is not a problem to equate the state of EC and state of RTC, but in fact it is understandable that one RTC may be attached to more than one EC Please give me.
//通常は自身のECしかないため、ECの状態とRTCの状態を同一視しても問題ないのですが、
//実際には一つのRTCは複数のECにアタッチされる可能性があることをご理解ください。

2) Using ComponentObserver
The other way is to use ComponentObserver (introduced in 1.1.0 or later). ComponentObserver has the following interface, you implement a servant on the side you want to query, and attach this object to RTC so that it calls back when the state changes.
//2) ComponentObserver を利用する
//もう一つはComponentObserver （1.1.0以降で導入） を利用する方法です。
//ComponentObserverは以下の様なインターフェースを持っており、問い合わせをしたい側で
//サーバントを実装し、このオブジェクトをRTCにアタッチすることで状態が変わったとき
//などにコールバックさせます。

http://svn.openrtm.org/OpenRTM-aist/tags/RELEASE_1_1_0/OpenRTM-aist/src/ext/sdo/observer/ComponentObserver.idl

See @interface ComponentObserver section.
//@interface ComponentObserver の項をご覧ください。

obs_svt = new ComponentOberver_impl(); // servant
OpenRTM::ComponentObserver obs_ref = obs_svt._this(); // Object reference
SDO::ServiceProfile profile;
profile.id = UUID();
profile.interface_type = CORBA_Util::toRepositoryId<OpenRTM::ComponentObserver>(); // rtm/Typename.h
CORBA_SeqUtil.push_back(profile.properties, NVUtil::newNV("observed_status", "RTC_STATUS"));
CORBA_SeqUtil.push_back(profile.properties, NVUtil::newNV("heartbeat.enable", "YES"));
CORBA_SeqUtil.push_back(profile.properties, NVUtil::newNV("heartbeat.interval", "1.0"));
profile.service = obs_ref;

rtc = <Obtain RTC object reference in some way>
//rtc = <何らかの方法でRTCのオブジェクトリファレンスを取得>
SDO::Configuration conf = rtc.get_configuration(); // SDO::get_configuration()
conf.add_service_profile(profile);

When the status changes to ACTIVE, the above ovs_svt
//状態がACTIVEに変わったら、上記 ovs_svt の
ComponentOberver_impl::update_status("RTC_STATUS", "ACTIVE:0");
When the state changes to INACTIVE,
//状態がINACTIVEに変わったら、
ComponentOberver_impl::update_status("RTC_STATUS", "INACTIVE:0");
When the status changes to ERROR,
//状態がERRORに変わったら、
ComponentOberver_impl::update_status("RTC_STATUS", "ERROR:0");
Is called.
//が呼び出される。

//> もしないのでしたらどのタイミングでリセットするかをどのように判断するのか
//> 教えて頂けないでしょうか。
//>
//> rtshellなどの方法で適切なタイミングでリセットを掛けるタイミングがわから
//> ず、OpenRTMでは一般的な方法がないのか気になっております。

By the way, in rtctree under rtshell, for example in the constructor of RTCTree
When dynamic = True is set, when the tree object acquires the state of RTC
We will use ComponentObserver to get state.
//ちなみに、rtshellのもととなっているrtctreeでは、たとえば RTCTree のコンストラクタに
//dynamic = True をセットするとツリーオブジェクトがRTCの状態を取得する際に
//ComponentObserverを利用して状態を取得するようになります。

https://github.com/gbiggs/rtctree/blob/master/rtctree/tree.py

Also, using TreeNode :: add_callback () seems to be able to hook events.
//また TreeNode::add_callback() を利用すると、イベントをフックできるようです。

https://github.com/gbiggs/rtctree/blob/master/rtctree/node.py

The event name is defined at the bottom of this file.
//このファイルの一番下にイベント名が定義されています。
https://github.com/gbiggs/rtctree/blob/master/rtctree/component.py