// Title: Configuration file and command line options (Basic)
#contents

** Configuration file (rtc.conf)
The component manager reads the configuration file rtc.conf at startup.
A configuration file is normally created with the name rtc.conf, but you can pass a configuration file created with any name.
//** 設定ファイル  ( rtc.conf ) 
//コンポーネントマネージャは起動時に設定ファイル rtc.conf を読み込みます。
//コンフィギュレーションファイルは通常 rtc.conf という名前で作成しますが、任意の名前で作成したコンフィギュレーションファイルを渡すこともできます。

*** Location of rtc.conf

rtc.conf is usually placed in the same directory as the RTC executable file (standalone component: xxxComp, xxxComp.exe executable RTC etc.) and its settings are loaded automatically.
Alternatively, you can use the ''-f'' option to load a configuration file of arbitrary name.
If rtc.conf is not in the same directory as the executable file or if it is not specified with the ''-f'' option, it reads rtc.conf placed on the system instead.
//*** rtc.conf の配置場所
//rtc.conf は通常RTC実行ファイル（スタンドアロンコンポーネント： xxxComp や xxxComp.exe など実行形式になっているRTC)  と同じディレクトリーに配置して、その設定を自動的に読み込ませます。
//もしくは、''-f'' オプションを利用して任意の名前の設定ファイルを読み込ませることもできます。
//rtc.conf が実行ファイルと同じディレクトリーにないか、''-f'' オプションで指定されていない場合は、代わりにシステムに配置された rtc.conf を読み込みます。

Reading priority of rtc.conf is set as follows.
//rtc.conf の読み込み優先度は以下のように設定されています。

**** On Linux / Unix
+ Command line option "-f"
+ Environment variable "RTC_MANAGER_CONFIG"
+ Default configuration file "./rtc.conf"
+ Default configuration file "/etc/rtc.conf"
+ Default configuration file "/etc/rtc/rtc.conf"
+ Default configuration file "/usr/local/etc/rtc.conf"
+ Default configuration file "/usr/local/etc/rtc/rtc.conf"
+ Embedded configuration value
//**** Linux/Unixの場合
//+ コマンドラインオプション "-f"
//+ 環境変数 "RTC_MANAGER_CONFIG"
//+ デフォルト設定ファイル "./rtc.conf"
//+ デフォルト設定ファイル "/etc/rtc.conf"
//+ デフォルト設定ファイル "/etc/rtc/rtc.conf"
//+ デフォルト設定ファイル "/usr/local/etc/rtc.conf"
//+ デフォルト設定ファイル "/usr/local/etc/rtc/rtc.conf"
//+ 埋め込みコンフィギュレーション値

**** For Windows
+ Command line option "-f"
+ Environment variable "RTC_MANAGER_CONFIG"
+ Default configuration file "./rtc.conf"
+ Default configuration file "%RTM_ROOT%/%RTM_VC_VERSION%/rtc.conf"
//**** Windowsの場合
//+ コマンドラインオプション "-f"
//+ 環境変数 "RTC_MANAGER_CONFIG"
//+ デフォルト設定ファイル "./rtc.conf"
//+ デフォルト設定ファイル "%RTM_ROOT%/%RTM_VC_VERSION%/rtc.conf"

In Windows, rtc.conf (usually C:\Program Files\OpenRTM-aist\(version number)\(Version of VC) placed under the directory specified by the environment variables "RTM_ROOT" and ''RTM_VC_VERSION'' )) Is loaded.
//Windowsでは、環境変数 ”RTM_ROOT" および ”RTM_VC_VERSION" で指定されるディレクトリー下に置かれた rtc.conf (通常は C:\Program Files\OpenRTM-aist\(バージョン番号)\(VCのバージョン)) が読み込まれます。

*** Main setting items
Below are the setting options of rtc.conf which is often used.
In addition to the following options, various options can be specified in rtc.conf. For details [[rtc.conf setting item list:/ja/content/rtcconf_reference_ja]].
//*** 主な設定項目
//以下に、良く利用される rtc.conf の設定オプションを示します。
//以下のオプション以外にも、rtc.conf には様々なオプションを指定することができます。詳細は [[rtc.conf設定項目一覧:/ja/content/rtcconf_reference_ja]] を参照してください。

**** Settings related to name service
Items related to the setting of the naming service are as follows.
//**** ネームサービスに関する設定 
//ネーミングサービスの設定に関する項目は以下の通りです。

:''corba.nameservers''|
It is specified by host_name: port_number, the default port is 2809 (omniORB default). ~
Multiple servers can be specified, and server name delimiter is comma ",".
//host_name:port_numberで指定、デフォルトポートは2809 (omniORB のデフォルト)。~
//複数サーバーを指定可能で、サーバー名の区切り文字はコンマ "," 。

:''naming.formats''|
%h.host_cxt/%n.rtc →host.host_cxt/MyComp.rtc~
Multiple designation possible. ~
If you want to be compatible with 0.2.0, ~
//複数指定可能。~
//0.2.0互換にしたければ、~
%h.host_cxt/%M.mgr_cxt/%c.cat_cxt/%m.mod_cxt/%n.rtc

:''naming.update.enable''|
“YES” or “NO”~
Automatic update setting of registration to the naming service. ~
Register the name again when the name service starts up after starting the component.
//ネーミングサービスへの登録の自動アップデート設定。~
//コンポーネント起動後にネームサービスが起動したときに、再度名前を登録します。

:''naming.update.interval''|
Update cycle [s]. The default is 10 seconds.
//アップデートの周期[s]。デフォルトは10秒。

:''timer.enable''|
“YES” or “NO”~
Manager timer valid/invalid. It must be valid to use naming.update.
//マネージャタイマー有効・無効。naming.updateを使用するには有効でなければならない。

:''timer.tick''|
Resolution of timer [s]. The default is 100 ms.
//タイマーの分解能[s]。デフォルトは100ms。

**** Setting related to log output
//****ログ出力に関する設定

:''logger.enable''|
“YES” or “NO”~
Enable/Disable log output.
//ログ出力を有効・無効に設定。

:''logger.file_name''|
Log file name. ~
%h: Host name, %M: Manager name, %p: Process ID usable
//ログファイル名。~
//%h：ホスト名､%M:マネージャ名,%p：プロセスID 使用可

:''logger.date_format''|
Date format. It conforms to the notation of strftime (3). ~
Default : %b %d %H:%M:%S → Apr 24 01: 02: 04 |
//日付フォーマット。strftime(3)の表記法に準拠。~
//デフォルト：%b %d %H:%M:%S → Apr 24 01:02:04|

:''logger.log_level''|
Log level： SILENT, ERROR, WARN, INFO, DEBUG, TRACE, VERBOSE, PARANOID.~
Do not output anything (SILENT)~All output (PARANOID) ~
(*) Previously it could be used in RTC, but it can not be used now.
//ログレベル： SILENT, ERROR, WARN, NORMAL, INFO, DEBUG, TRACE, VERBOSE, PARANOID.~
//何も出力しない(SILENT)～全て出力する(PARANOID).~
//※以前は RTC 内で使えましたが、現在は使えません。

**** Settings related to execution context
//****実行コンテキストに関する設定 

:''exec_cxt.periodic.type''|
Specify the execution context to use. ~
at present,
//使用する実行コンテキストを指定。~
//現在のところ、
PeriodicExecutionContext, ExtTrigExecutionContext
Can be used. ~
The default is PeriodicExecutionContext.
//が使用可能です。~
//デフォルトはPeriodicExecutionContext.

:''exec_cxt.periodic.rate''|
Specify the frequency [Hz] of the execution context. ~
Effective range: (0, 1000000). ~
Default: 1000. ~
//実行コンテキストの周波数[Hz]を指定。~
//有効範囲：(0, 1000000].~
//デフォルト：1000.~

****Other settings
//****その他の設定 

:''corba.endpoint''|
IP_Addr: Specified by Port. When there are multiple NICs, it specifies the ORB to listen on. ~
'':'' Is required even if Port is not specified. ~
Example: corba.endpoint: 192.168.0.12 ~
Please specify when there are two NICs.
(It may happen by chance even if not specified.)
//IP_Addr:Port で指定。NIC が複数あるとき、ORB をどちらで listen させるかを指定します。~
//Port を指定しない場合でも'':''が必要です。~
//例:  corba.endpoint: 192.168.0.12~
//NIC が2つある場合必ず指定してください。
//(指定しなくても偶然正常に動作することもあります。)

:''corba.args''|
Argument for CORBA. For details, refer to omniORB manual.
//CORBA に対する引数。詳細は omniORB のマニュアルを参照してください。

''[Category name].[Component name].config_file'' |
''[Category name].[Instance name].config_file'' |
Component configuration file
Category name: manipulator, component name: myarm, instance name myarm 0, 1, 2 ...
 manipulator.myarm.config_file: arm.conf
 Or
 manipulator.myarm0.config.file: arm0.conf
It is possible to specify it like.
//''[カテゴリ名].[コンポーネント名].config_file''|
//''[カテゴリ名].[インスタンス名]. config_file''|
//コンポーネントの設定ファイル
//カテゴリ名：manipulator、コンポーネント名：myarm、インスタンス名 myarm 0、1、2… の場合
// manipulator.myarm.config_file: arm.conf
// または
// manipulator.myarm0.config.file: arm0.conf
//のように指定可能です。

** Command line option
//** コマンドラインオプション

For standalone components, or RTC daemon (rtcd), you can specify several options on the command line.
The following table shows the command line options that can be specified.
//スタンドアロンコンポーネントの場合、またはRTC daemon (rtcd) では、コマンドラインにいくつかのオプションを指定することができます。
//以下の表に、指定可能なコマンドラインオプションを示します。

|CENTER:''option''|CENTER:''meaning''|
| ''-a'' | Manager service OFF |
| ''-f'' <file name> | Specify configuration file |
| ''-o'' <option> | option specification |
| ''- p'' <port number> | port number specification |
| ''-d'' | Master manager designation |
//|CENTER: ''オプション'' |CENTER: ''意味'' |
//| ''-a''         | マネージャサービス OFF |
//| ''-f'' <file name> | 設定ファイルの指定 |
//| ''-o'' <option> | オプション指定 |
//| ''-p'' <port number> | ポート番号指定 |
//| ''-d'' | マスターマネージャ指定 |

show the detailed meaning of these options.
//これらのオプションの詳細な意味をいかに示します。

*** -a: Manager service off
//*** -a: マネージャサービスOFF

Normally, to start RTC, the internal component manager instantiates or deletes the RTC. (To manage lifecycle)
By default the server (servant) is started so that this manager can be controlled remotely.
However, if you do not need to start the same RTC in the same process, start another RTC by loading another RTC module after starting, do not use the ''-a'' option You can suppress startup of the servant by specifying it.
//通常、RTCを起動するためには、内部のコンポーネントマネージャがRTCをインスタンス化したり、削除したりします。（ライフサイクルの管理を行う、という）
//デフォルトではこのマネージャを、リモートから制御できるようにサーバー（サーバント）が起動されるようになっています。
//しかし、起動後に、同じプロセスで同じRTCを起動したり、別のRTCのモジュールをロードしてRTCを起動させたり等する必要がない場合には、サーバントは不要なので ''-a'' オプションを指定することでサーバントの起動を抑制することもできます。

*** -f: Specify setting file
//*** -f: 設定ファイル指定

With the ''-f'' option, you can give files of arbitrary names to standalone components or rtcd instead of rtc.conf.
//''-f'' オプションを利用すると、任意の名前のファイルを rtc.conf の代わりにスタンドアロンコンポーネントやrtcdに与えることができます。

 <Application example>
// <利用例>
 ConsoleInComp -f consin.conf

*** -o: Option specification
//*** -o: オプション指定

With the ''-o'' option, you can give options that can be specified in rtc.conf from the command line. Options given with the ''-o'' option take precedence over those specified in rtc.conf, so if you want to temporarily overwrite the options specified in rtc.conf and change them, It is convenient to use the '-o' option.
However, since it is passed as a command line option, blanks are recognized as argument breaks, so you do not need to include spaces or enclose it in single quotes or double quotation marks.
//''-o'' オプションを利用すると、rtc.conf に指定することのできるオプションをコマンドラインから与えることができます。''-o'' オプションで与えたオプションは rtc.conf で指定されたものよりも優先されますので、rtc.conf で指定してあるオプションを一時的に上書きして変更したい場合などは、''-o''オプションを利用すると便利です。
//ただし、コマンドラインオプションとして渡すので、空白は引数の切れ目として認識されますので、指定する際には空白を入れないか、シングルクォーテーションかダブルクォーテーションで囲むなどする必要があります。

 <Application example>
// <利用例>
 ConsoleInComp -o corba.nameservers:localhost,openrtm.org
 ConsoleInComp -o "corba.nameservers:localhost, openrtm.org"
 <Example not recognized correctly>
// <正しく認識されない例>
 ConsoleInComp -o corba.nameservers:localhost, openrtm.org
 '',(Comma)'' followed by a space, so openrtm.org is recognized as another argument.
// '',(カンマ)''の後に空白があるため、openrtm.org が別の引数として認識される。

*** -p: Port number specification
//*** -p: ポート番号指定

Using ''-p'', you can specify the port number used by the RTC to be started.
You may want to use this option if you want to start with a specific port number when RTC starts up.
This option has the same hostname as the ''corba.endpoints:'' option and behaves the same as specifying only the port number.
//''-p'' を利用すると、起動するRTCが利用するポート番号を指定することができます。
//RTC起動時に特定のポート番号で起動したい場合には、このオプションを利用するとよいでしょう。
//このオプションは ''corba.endpoints:'' オプションでホスト名無しで、ポート番号のみを指定するのと同じふるまいをします。

 <Application example>
// <利用例>
 ConsoleInComp -p 2810
 Same as below
//以下と同じ
 ConsoleInComp -o "corba.endpoints: :2810" 

*** -d: Master manager designation
//*** -d: マスターマネージャ指定

With the ''-d'' option you can start the standalone component you started up and rtcd as daemon mode and master manager.
The manager has a master and a slave, and the master normally waits for a request with fixed port number 2810 and delegates RTC activation etc. to the slave.
When invoked with the ''-d'' option, the port number is fixed to 2810 by default, the manager servant is started in master mode, and the manager's reference is registered in the name service.
//''-d'' オプションを利用すると、起動したスタンドアロンコンポーネントや rtcd をデーモンモードかつマスターマネージャとして起動することができます。
//マネージャにはマスターとスレーブがあり、マスターは通常固定ポート番号 2810 でリクエストを待ち受け、スレーブに対してRTCの起動などを委譲します。
//''-d'' オプションを指定して起動すると、ポート番号がデフォルトでは 2810 に固定され、またマネージャのサーバントがマスターモードで起動され、ネームサービスにマネージャの参照が登録されます。

