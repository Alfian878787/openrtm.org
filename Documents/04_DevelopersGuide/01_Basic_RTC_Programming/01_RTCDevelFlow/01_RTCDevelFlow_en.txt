// -*- pukiwiki-edit -*-
//*The flow of RTC programming

OpenRTM-aist provides a framework to support easy development of
RT-Component (RTC), which modularizes existing source code or
libraries or newly developed software, to user (a component
developer.)  The following figure shows the RT-Component development
flow.

&br;&br;
#ref(ComponentDevelFlow.png,nolink,center)
CENTER:''RT-Component development flow''
&br;&br;

Usually, a component developer embeds the library function, class
library, etc. as existing software property at a component framework,
and creates a component.  Herewith existing software resource is
created as a RT component which is a software part, and it can reuse
now in various scenes.  Created RT components are deployed into the
suitable location on a network and it can be used from any locations
on a network as a distributed object.

As shown in the figure above, RT-Components created in conformity with
RT-Component framework can be created as two kinds of binary files.  A
stand-alone RT-Component (Standalone RT-Component) is a binary of the
execute form which can be executed as it is by a single file.  A
loadable module RT-Component (Loadable Module RT-Component) is a
binary file of the loadable module format in which loading is
dynamically possible.  RT-Component can be created, distributed and
performed in these two ways.

* The basic of RTC programming

There are some differences between the usual programming and
programming of RT-Component.



** Program without "main" function

Unlike the usual program, there is no "main" function in the program
of RT-Component.  One RT-Component is usually implemented as a class
which inherited the special base class.

The logic which RT-Component should perform is implemented as override
of the member function (method) of the base class.  For example, it
describes handling like initialization in an onInitialize function.
Or handling to perform at the time of termination describes handling
in an onFinalize function.

 ReturnCode_t MyComponent::onInitialize()
 {
   // Initialization and so on.
 }
 ReturnCode_t MyComponent::onFinalize()
 {
   // Finalization and so on.
 }

To which timing are the initialization and the finalization processing
which were written here performed?  In order to know it, you needs to
understand the life cycle of RT component.

**Component lifecycle

A series of state flow from creating an RT-Ccomponent to finalizing it
is called life cycle of RT-Component.

Basically RT-Component has the following three states.

- Created
- Alive
- End

The "Alive" state has more internal states, which is mentioned later.

As mentioned above, a component is implemented as one class.
Therefore, it is almost the same as an object (instance) being
generated that a component is generated.  Usually, RT-Component is
created by the manager (RTC manager) and the manager manages the life
cycle of RT-Component henceforth.

Specifically, the manager calls the onInitialize function mentioned
above, after creating the instance of RT-Component.  Moreover, when
RT-Component is finished, the manager calls an onFinalize function.
Thus, RT-Component is programmed by describing adequate logic for
every call-back (it is called the component action) assigned to the
specific timing in the life cycle of RT-Component.

** Execution context

Usually, if a program is executed, a thread will be assigned to a
process and the thread will execute processing described as a program.
Usually, the program which controls a robot has a processing loop
executed by the thread, processes sensor data or continues controlling
an actuator.  The main logic for processing or controlling something
are called "the core logic" in RT-Component.

After RT-Component is created, it goes to the Alive-state.
Then, one thread is usually assigned and it is begun to execute the main logic of RT-Component.
This thread is called an execution context (ExecutionContext) in RT-Component.
Actually, an execution context is not the thread itself.
It is an object of a logical thread and has an execution cycle and a state.
If RT-Component is created, an execution context will be related with RT-Component and core logic will drive.
Thereby, RT-Component performs some processings (for example, a robot is controlled).

** State transition of RTC

As mentioned above, RT-Component has states and logic is described as
action assigned to the states and transitions.  The following figure
expresses the state transition diagram (state machine figure of UML)
of RT-Component.

&br;&br;
#ref(RTCStateMachine040.png,nolink,center)
CENTER:''State machine of RT-Component''
&br;&br;

Created and Alive are states of RT-Component.
Some other sub-states exist in the Alive-state.

*** Stopping-state and Running-state of thread

Let's see the upper part of state machine in the Alive-state including
the Stopped-state and the Running-state.

&br;&br;
#ref(RTCStateMachineStartStop.png,nolink,center)
CENTER:''Stopping-state and Running-state of thread''
&br;&br;

This is the state where the thread is halted (Stopped) or running
(Running), when an execution context is seen as a thread.

If the execution context in an idle state (Stopped) receives a start
event, onStartup of RT-Component's callback will be called and it will
change to a running state (Running).  Conversely, by a stop event, an
execution context calls the onShutdown of RT-Component's callback and
changes into the idle state (Stopped) state.

Action of core logic are executed in the running state (Running)
state, and no actions are executed in the idle state (Stopped.)

*** Active / inactive state

The lower berth within the Alive state is a state transition of an
active (Active), an inactive (Inactive), and an error of core logic
(Error).

RT-Component is in the inactive state (Inactive) immediately after RT
component creation.  If RT-Component is activated, onActivate which
is an action of RT-Component will be called and it will change to the
active state.  While being in the active state, the action onExecute of
RT-Component usually continues being called repeatedly.  Usually, the
main logic of RT-Component is processed within this onExecute.

For example, typical robot system processing such as reading data from
sensors and controlling motors based on the data received from other
components will be described in onExecute callback function.

RT component continues staying at the active state until it becomes
inactive or an error occurs.  When it is inactived, onDeactivate is
called, and it changes into the inactive state.  When a certain error
occurs in processing of an active state, onAborting which is action of
RT component is called and it changes to an error state (Error).

When it changes to error status, it continues staying at error status
until reset is performed from the outside, and onError continues being
called.  onReset will be called if reset is performed.  If processing
of onReset is successful, it can change in the inactive state
(Inactive) and can be in an active state again, but when onReset goes
wrong, it continues staying at an error status.


&br;&br;
#ref(RTCStateMachineActiveInactive.png,nolink,center)
CENTER:''Inactive, Active and Error state''
&br;&br;

**Summary of Actions

RT component developer should considers what kind of logics should be
assigned for every state of above-mentioned RT component's actions,
and implements logics to the component functions corresponding to each
action.  That is, what is necessary is only to override the function
''on-something'' required for the component which you create, and just
to program the logics of the function.

Below, the function and role of action of a component are shown.

|onInitialize| Initialization. It is called only once at the time of initiation of a component life cycle.|
|onActivated| It is called only once at the time of transition from inactive to active state. |
|onExecute| It is called periodically in active state. |
|onDeactivated| It is called only once at the time of transition from active to inactive state. |
|onAborting| It is called once before entering the error state. |
|onReset| It is called only once when resetting at the transition from erro r to inactive state. |
|onError| It is called periodically in the error state. |
|onFinalize| It is called only once at the end of component life cycle. |
|onStateUpdate| It is called after onExecute every time. |
|onRateChanged| It is called when the rate of the ExecutionContext is changed. |
|onStartup| It is called when the ExecutionContext is started. |
|onShutdown| It is called when the ExecutionContext is stopped. |
