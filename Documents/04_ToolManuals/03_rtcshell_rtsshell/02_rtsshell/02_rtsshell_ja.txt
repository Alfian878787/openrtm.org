#contents

RTシステムを管理するためのコマンドラインツール。

**概要

''rtresurrect''はRTSProfile（RTシステム仕様記述方式）に保存されたRTシステムを復元するためのツールです。すべての接続、コンフィギュレーションの設定を復元し、およびアクティブなコンフィギュレーションを設定することができます。必要に応じて明示的にマークされていないコンポーネント以外がない場合に、これを無視することもできます。

''rtteardown''はRTSProfileに保存されたRTシステム(RTコンポーネントではなく)をシャットダウンします。すべての接続を切断します。

''rtcryo''は既存のRTシステムをRTSProfileのファイルとして保存するツールです。すべてのコンポーネント及びそれぞれのコンポーネントの接続と構成設定を一つのRTSProfileのファイルに保存します。

''rtstart''はコマンドラインで全RTシステムを起動するツールです。''rtstop''は逆に全システムを止まるツールです。RTSProfileを使って実行順、実行条件にしたがって適当なコンポーネントをactivateしたりdeactivateしたりします。

このソフトウエアはNEDO (独立行政法人 新エネルギー・産業技術総合開発機構) の次世代ロボット知能化技術開発プロジェクトの支援により、独立行政法人産業技術総合研究所によって開発されています。

**必要条件

- rtctree-2.0 と rtsprofile-2.0 が必要となります。RTSystemEditor-1.0に合います。
- Ubuntu 9.04を利用していたら、手動でPython 2.6をインストールすることが必要となります。Ubuntu 9.04以上をおすすめします。
- Python 2.5以下では存在しない機能を使うので、Python 2.6 以上が必要となります。

**インストール

インストールはいくつかの方法が利用可能です。

-リポジトリ（参照：以下の[[リポジトリ>#repo]]）またはソースアーカイブからダウンロード後、適当なディレクトリで解凍し、そこでコマンドを実行する。
-リポジトリ（参照：以下の[[リポジトリ>#repo]]）またはソースアーカイブからダウンロード後、適当なディレクトリで解凍し、インストールする：

++ソースを展開する。
++setup.pyを実行する。
 $ python setup.py install
++必要に応じて、環境変数を設定します。これはデフォルトで設定されていますが、設定されていない場合は自分で設定する必要があります。Windows上では、Python の site-packages ディレクトリが ''PYTHONPATH'' 環境変数に、Pythonスクリプトのディレクトリが ''PATH'' 環境変数に設定されていることを確認してください。通常、これらは ''C:\Python26\Lib\site-packages\'' と ''C:\Python26\Scripts\'' です（Pythonが''C:\Python26\''にインストールされた場合）。

-Windows ではインストーラの使用を推奨します。setup.py を利用すれば結果より容易に設定することができます。ただし、環境によってはさらに環境変数の設定が必要な場合があります。

**使い方

***rtresurrect

''rtresurrect''を起動してください。コマンドラインでRTSProfileのフォーマット（普通にXMLかYAML）のファイルのパスを渡してください。
 rtresurrect my_rtsystem.xml
アクションを実行する前にどのように行われるかを確認したい場合,''--dry-run''オプションを使用してください。これにより行われるアクションを表示しますが、実際には実行されないので、正しいかどうかを確認することができます。

***rtstart

''rtstart''を起動してください。コマンドラインでRTSProfileのフォーマット（普通にXMLかYAML）のファイルのパスを渡してください。
 rtstart my_rtsystem.xml
アクションを実行する前にどのように行われるかを確認したい場合,''--dry-run''オプションを使用してください。これにより行われるアクションを表示しますが、実際には実行されないので、正しいかどうかを確認することができます。

***rtstop

''rtstop''を起動してください。コマンドラインでRTSProfileのフォーマット（普通にXMLかYAML）のファイルのパスを渡してください。
 rtstop my_rtsystem.xml
アクションを実行する前にどのように行われるかを確認したい場合,''--dry-run''オプションを使用してください。これにより行われるアクションを表示しますが、実際には実行されないので、正しいかどうかを確認することができます。

***rtteardown

''rtteardown''を起動してください。コマンドラインでRTSProfileのフォーマット（普通にXMLかYAML）のファイルのパスを渡してください。
 rtteardown my_rtsystem.xml
アクションを実行する前に、どのようなことが行われるかを確認したい場合,''--dry-run''オプションを使用してください。これにより行われるアクションを表示しますが、実際には実行されないので、正しいかどうかを確認することができます。

***rtcryo

''rtcryo''を起動してください。コマンドラインで目的のファイルのパスを渡してください。
 rtcryo my_new_rtsystem.xml
rtcryoはRTCTreeを作成し、そのツリーの検索の結果を元に、RTSProfileを作成し保存します。[[rtctreeのマニュアル>]]の参照してください。

**ステート変更のプラン

RTSProfileには、RTシステムのステート変化を管理するための施設を含んでいます。コンポーネントステートの変更の順番を指定することは可能で、コンポーネントは別のコンポーネントの後にステートを変更することは必要な時にその順番を自動的に経産可能です。

&br;

rtstart と rtstop はこの情報を利用します。rtstart は Activation ブロックに含まれていた情報を利用して、rtstop は Deactivation ブロックに含まれていた情報を利用します。実行された時、それらは全システムの状態の変更のために計画を構築し実行します。エラーが出るか計画が完成までに止まりません。

''--dry-run''というオプションを追加すると計画は表示されますが実行はしません。計画の出力は以下のようです。

 {1} Activate /localhost/ConfigSample0.rtc in execution context 0 (Required)
 {2} [Order 1] Activate /localhost/Motor0.rtc in execution context 0 (Required)
 {4} [Order 3/Wait 5000ms] Activate /localhost/Controller0.rtc in execution context 0 (Required)
 {3} [Order 2/Sync to Motor0, Order 5/Sync to Controller0] Activate /localhost/Sensor0.rtc in execution context 0 (Required)
 {5} [Order 4/After ConfigSample0's action] Activate /localhost/ConsoleIn0.rtc in execution context 0 (Required)

各ラインの初めの括弧の中の数はアクションIDです。これらは実行の時にも表示され、アクションの簡単な識別は可能です。

続いて、角括弧中の値が出る可能性はあります。これは、実行されているアクションに関するどんな前条件を示します:

- ''Order''という前条件は順番を管理します。RTSProfile の condition の rts:sequence 値で設定可能です。他の前条件がない場合、アクションはこの順番によって実行します。
- ''Wait''という前条件はアクションが実行される前に規定時間が過ぎることが必要だと示します。
- ''Sync''という前条件は指定されたコンポーネントが目的状態に達するまで実行する行動を妨げます。
- ''After''という前条件は''Sync''と似てます。違いは、それらが指定されたアクションが別のコンポーネント上で最初に行なわれるのを待つということです。言いかえれば、そのアクションは、別のコンポーネントのアクションの後に、だがそれが目的状態に達したという確証の前に実行されます。

ラインの残りはアクションの説明です。

**シェル補完&aname(shell);

Bashの補完機能を追加するスクリプトが含まれます。''${prefix}/share/rtsshell''にインストールされます。（''${prefix}''はrtsshellがインストールされたディレクトリです。）例えば''/usr/local/''にインストールされた場合、以下のコマンドで読み込んでください。

 $ source /usr/local/share/rtsshell/bash_completion

以前のコマンドを''~/.bashrc''ファイルに追加して、新しいシェルに自動的に読み込まれます。

**リポジトリ&aname(repo);

最新版のソースは[[githubでGitのリポジトリ>http://github.com/gbiggs/rtsshell]]にあります。「Download source」をクリックしてダウンロードをすることができます。「git clone」を使うこともできます。パッチを送りたがったら、この方法がおすすめします。

 $ git clone git://github.com/gbiggs/rtsshell.git

**Changelog
***2.0

- シェル補完機能の追加（鈴木圭介氏より提供）
- プランニングの機能の追加

