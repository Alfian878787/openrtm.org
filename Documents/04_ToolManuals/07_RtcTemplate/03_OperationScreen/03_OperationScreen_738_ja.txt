#contents
**RtcTemplate操作画面
　RtcTemplateエディタを起動すると、「RTC Template Config」と書かれたRTC生成の設定項目を編集するエディタが現れます。

　以下, RtcTemplateの各設定項目や操作方法を説明します.
***項目説明
　項目の説明は以下のとおりです。
#br

#ref(Template.png,nolink,center)
CENTER:''RtcTemlate全項目''
#br

-1.Programming language selection
:　出力するプログラミング言語の選択|
 C++
 C++(Windows)
 Python
 Java
#br
-2.Module definition
:　モジュール定義|
|Module name|モジュール名|
|Module description|モジュールの説明|
|Module version|モジュールのバージョン|
|Module vender|モジュールのベンダ|
|Module category|モジュールのカテゴリ|
|Component type|コンポーネントの型(STATIC・UNIQUE・COMMUTATIVE)|
|Component's activity type|アクティビティタイプ(PERIODIC・SPORADIC・EVENT_DRIVEN)|
|Number of maximum instance|コンポーネントインスタンスの最大数です。|
#br

-3.InPort definition
:　入力ポート定義|
|Name|ポート名、ソースコード中で変数名として使用される|
|Type|ポートの型 ''※1''|
::''※1'' Timed ［Short｜Long｜UShort｜ULong｜Float｜Double｜Char｜Boolean｜Octet｜String］ およびそのシーケンス型が使用可能|
#br

-4.OutPort definition
:　出力ポート定義|
|Name|ポート名、ソースコード中で変数名として使用される|
|Type|ポートの型 ''※2''|
::''※2'' Timed ［Short｜Long｜UShort｜ULong｜Float｜Double｜Char｜Boolean｜Octet｜String］ およびそのシーケンス型が使用可能|
#br
#br

-5.Service Provider definition
:　サービスプロバイダ定義|
|IDL Path|サービスプロバイダで使用するIDLのパスを指定、1つのファイルには複数のインタフェースを指定できる|
|PortName|ポートが属するインタフェースの名前、この名前は、Corbaのポート名に使用される|
|Name|サービス名、この名前はインスタンス名と変数名で使用される|
|Type|サービスプロバイダの型、型名として使用される ''※3''|
::''※3''　型はフルパスで指定してください。(例) Module01::InterfaceName02|
#br

-6.Service Consumer definition
:　サービスコンシューマ定義|
|IDL Path|サービスコンシューマで使用するIDLのパスを指定、1つのファイルには複数のインタフェースを指定できる|
|PortName|ポートが属するインタフェースの名前、この名前は、Corbaのポート名に使用される|
|Name|コンシューマ名、この名前はインスタンス名と変数名で使用される|
|Type|サービスコンシューマの型、型名として使用される ''※4''|
::''※4''　型はフルパスで指定してください。(例) Module01::InterfaceName02|
#br

-7.ConfigurationSet definition
:　コンフィギュレーションセット定義|
|Name|コンフィギュレーションパラメータの名称|
|Type|コンフィギュレーションパラメータのデータ型|
|Default Value|コンフィギュレーションパラメータのデフォルト値|

#br

-8.Include IDL directory
:　インクルードするIDLの検索対象ディレクトリ|
#br

-9.Output directory
:　出力ディレクトリ|
#br

-10.Generate
:　生成ボタン|
#br

***出力選択
　RtcTemplateは、既存ファイルとの出力内容に差がある場合、出力を選択することができます。
#br

#ref(CompOfOutput.png,nolink,center)
CENTER:''出力選択''
#br
出力の選択では、以下の3つ出力候補の中から選択します。
-Original　　： 既に存在するファイルを使用する
-Merge　　　： マージブロックを利用したマージを行う（''※※''）
-Generate　： 新たに生成した内容で上書きする
#br
''※※''　Mergeでは、<rtc-template block=”bloack”>タグで囲まれた範囲のみを最新の生成内容で上書します。生成したテンプレートは、ユーザが変更しない範囲をあらかじめこのタグで囲んでいます。このタグの中は変更後もマージすることで消えてしまいますので、修正しないようにしてください。
#br

***セーブ
　RtcTemplateは、セーブすることができます。セーブを行うには、[Ctrl-S]もしくはエディタを右クリックし、コンテクストメニューから「Save」を選択、またはメニューバーの｢File｣−｢Save…｣もしくは｢File｣−｢Save As…｣を選択します。（「Save As…」の場合、任意のファイルにセーブできます）
#br

#ref(SaveFromContext.png,nolink,center)
CENTER:''コンテキストメニューからのセーブ''
#br

#ref(SaveFromMenu.png,nolink,center)
CENTER:''メニューバーからのセーブ''
#br

***オープン
　RtcTemplateは、ファイルを開く（オープン）ことができます。ファイルを開くには、エディタを右クリックし、コンテクストメニューから「Open」を選択、またはメニューバーの｢File｣−｢Open File…｣を選択します。
#br

#ref(OpenFromContext.png,nolink,center)
CENTER:''コンテキストメニューからのオープン''
#br

#ref(OpenFromMenu.png,nolink,center)
CENTER:''メニューバーからのオープン''
#br

**出力ファイル
　RtcTemplateが出力するファイルについて説明します。

***出力ファイル一覧
-C++
|ファイル名|説明|
|<モジュール名>Comp.cpp|コンポーネントを起動するコードです。|
|<モジュール名>.h|コンポーネントのヘッダです。|
|<モジュール名>.cpp|コンポーネントのコードです。|
|<サービス型名>SVC_impl.h|	サーバの実装ヘッダです。（※）ServiceProviderにて指定されたTypeのみが出力されます。|
|<サービス型名>SVC_impl. cpp|	サーバの実装コードです。（※）ServiceProviderにて指定されたTypeのみが出力されます。|
|Makefile.<モジュール名>|	コンパイルするためのMakefileです。|
::※rtc-templateは、このファイルを出力する際、オペレーションのテンプレートを生成するために、IDLをパースします。しかし、このパースの機能には以下のような制限が存在します。|
---プリプロセッサにおいて、#includeディレクティブのみ使用可能。（#ifdefなどは単に無視される）
---生成されるオペレーションは直接指定されたインタフェースのオペレーションのみで、親から継承したオペレーションは含まれない。
#br

-Python
|ファイル名|説明|
|<モジュール名>.py|コンポーネントのコード|
#br

-共通
|ファイル名|説明|
|README_<モジュール名>|READMEファイル、生成時の情報などが記録される|
#br


