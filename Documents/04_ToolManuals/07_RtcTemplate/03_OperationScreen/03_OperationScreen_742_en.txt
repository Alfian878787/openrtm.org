#contents
**TcTemplate operation screen
Launch RtcTemplate editor, you will see the editor written "RTC Template Config" for editing configuration items for the RTC generation.
The following explains details on configuration items and operation of RtcTemplate.

***Items Description 
Here are configuration items as follows:
#br

#ref(Template.png,nolink,center)
CENTER:''All items on RtcTemlate''

-1.Programming language selection
:Selection of the output programming language.|
 C++
 C++(Windows)
 Python
 Java

-2.Module definition
:Definition of Module|
|Module name|Module Name|
|Module description|Module Description|
|Module version|Module Version|
|Module vender|Module Vender|
|Module category|Module Category|
|Component type|Component's Type (STATIC, UNIQUE, COMMUTATIVE)|
|Component's activity type|Components's Activity Type (PERIODIC, SPORADIC, EVENT_DRIVEN)|
|Number of maximum instance|Maximum Number of Instances|

-3.InPort definition
:Definition of InPort|
|Name|Port Name, it is used as the variable name in the source code.|
|Type|Port Type ''Note1''|
::''Note1:'' Timed [Short , Long , UShort , ULong , Float , Double , Char , Boolean , Octet , String] and its sequence type can be used.|

-4.OutPort definition
:Definition of OutPort|
|Name|Port Name. it is used as the variable name in the source code.|
|Type|Port Type ''Note2''|
::''Note2:'' Timed [Short , Long , UShort , ULong , Float , Double , Char , Boolean , Octet , String] and its sequence type can be used.|

-5.Service Provider definition
:Definition of Service Provider|
|IDL Path|Specifies the path of IDL used by Service Provider. Multiple interfaces can be specified in one file.|
|PortName|Interface name that the port belongs to. This name is used for the port name of Corba.|
|Name|Service name. This name is used as instance name and variable name.|
|Type|Service Provider type. This is used as type name. ''Note3''|
::''Note3:''  Please specify type with full path. (Example) Module01::InterfaceName02|

-6.Service Consumer definition
:Definition of Service Consumer|
|IDL Path|Specifies the path of IDL used by Service Consumer. Multiple interfaces can be specified in one file.|
|PortName|Interface name that the port belongs to. This name is used for the port name of Corba.|
|Name|Consumer name. This name is used as instance name and variable name.|
|Type|Service Consumer type. This is used as type name. ''Note4''|
::''Note4:''  Please specify the type with full path. (Example) Module01::InterfaceName02|

-7.ConfigurationSet definition
:Definition of ConfigurationSet|
|Name||
|Type||
|Default Value||

::''Note:'' The above "Default Value" is displayed "Defaut Value" on RtcTemplate.|
#br

-8.Include IDL directory
:  The target directory to search IDL that is included.|
#br

-9.Output directory
:  Output directory|
#br

-10.Generate
:  Generation button|
#br


***Output Selection 
In RtcTemplate, when there is a difference in the output contents of the existing file, you can select the output options.
#br

#ref(CompOfOutput.png,nolink,center)
CENTER:''Output Selection''
#br
On the selection of output, you select it from among the following three output candidate.
-Original  : Use the already existed file.
-Merge  : Merge using merge block (See ''Note'')
-Generate  : Overwrite with a newly generated content
#br
''Note:'' In "Merge", the latest generated contents overwrite the only area enclosed with <rtc-template block ="block" > tag. The generated template is enclosed the area that users can't change with this tag in advance. Since the contents enclosed by this tag disappear by merging after they change, please don't change that area.
#br


***Save 
RtcTemplate can save. To save it, [Ctrl-S] or right-click on the editor, then select [Save] from the context menu, or select [File]-[Save...] or select [File]-[Save As...] of the menu bar. (You can save an appropriate file by [Save As...].)
#br

#ref(SaveFromContext.png,nolink,center)
CENTER:''Save from the context menu''
#br

#ref(SaveFromMenu.png,nolink,center)
CENTER:''Save from the menu bar''
#br

***Open 
RtcTemplate can open the file. To open the file, right-click on the editor, then select [Open] in the context menu or select [File]-[Open File...] in the menu bar.
#br

#ref(OpenFromContext.png,nolink,center)
CENTER:''Open from the context menu''
#br

#ref(OpenFromMenu.png,nolink,center)
CENTER:''Open from the menu bar''
#br

**Output Files
We will explain output files that RtcTemplate outputs.

***Output File List
-C++
|File Name|Description|
|<Module Name>Comp.cpp|Code to launch a component|
|<Module Name>.h|Component header file|
|<Module Name>.cpp|Component source file|
|<Service Type Name>SVC_impl.h|Implementation header of the service. Note:Only "Type" specified in ServiceProvider is output.|
|<Service Type Name>SVC_impl. cpp|Implementation code of the service. Note:Only "Type" specified in ServiceProvider is output.|
|Makefile.<Module Name>|Make file to compile the component.|
::Note: In RtcTemplate, IDL is parsed to generate a template of the operation when this file is output. However, there are the following limitations in this parsing function. |
---Only "# include" directive can be used in the pre-processor. ("# ifdef" etc. are merely ignored.)
---The generated operation is the only interface operation that is specified directly and is not included the operation that is inherited by parents.
#br

-Python
|File Name|Description|
|<Module name>.py|Component Code|
#br

-Common
|File Name|Description|
|README_<Module name>|README File. Record information of creation time etc.|
#br


